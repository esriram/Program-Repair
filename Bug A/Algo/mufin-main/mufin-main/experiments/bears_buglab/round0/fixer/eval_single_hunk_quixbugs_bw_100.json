{
    "shortest_path_length": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:00.700559301 +0100\n+++ /tmp/tmpq1m2t5_2.java\t2023-03-24 11:22:00.712559253 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "unvisitedNodes.get(node) + endnode.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:02.672551478 +0100\n+++ /tmp/tmpdaicaux5.java\t2023-03-24 11:22:02.672551478 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + endnode.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "unvisitedNodes.get(node) + firstnode.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:04.688543480 +0100\n+++ /tmp/tmp2feel0hc.java\t2023-03-24 11:22:04.688543480 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + firstnode.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:06.592535927 +0100\n+++ /tmp/tmpj8s48ifk.java\t2023-03-24 11:22:06.592535927 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "unvisitedNodes.get(node) + bvisitedNodes.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:08.520528277 +0100\n+++ /tmp/tmp_vf9mijl.java\t2023-03-24 11:22:08.524528261 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + bvisitedNodes.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "unvisitedNodes.get(node) + nonode.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:10.448520628 +0100\n+++ /tmp/tmp2tq_p1s4.java\t2023-03-24 11:22:10.452520612 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + nonode.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "unvisitedNodes.get(node) + bmaxnode.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:12.324513186 +0100\n+++ /tmp/tmpr6cnnwsz.java\t2023-03-24 11:22:12.324513186 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + bmaxnode.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "unvisitedNodes.get(node) + firstnode.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:14.288505392 +0100\n+++ /tmp/tmpg8zd_qzt.java\t2023-03-24 11:22:14.288505392 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + firstnode.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "unvisitedNodes.get(node) + endnode.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:16.216497740 +0100\n+++ /tmp/tmp246sgkhw.java\t2023-03-24 11:22:16.216497740 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + endnode.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "unvisitedNodes.get(node) + bvisitedNodes.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:18.180489947 +0100\n+++ /tmp/tmp514qtvpg.java\t2023-03-24 11:22:18.180489947 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + bvisitedNodes.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "unvisitedNodes.get(node) + index.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:20.124482236 +0100\n+++ /tmp/tmpjcq2o8mf.java\t2023-03-24 11:22:20.124482236 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + index.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "unvisitedNodes.get(nextnode) + firstNode.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:22.036474646 +0100\n+++ /tmp/tmpsibqhgap.java\t2023-03-24 11:22:22.052474583 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(nextnode) + firstNode.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "unvisitedNodes.get(nextnode) + nextnode.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:23.920467170 +0100\n+++ /tmp/tmpboyulp6f.java\t2023-03-24 11:22:23.924467155 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(nextnode) + nextnode.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "unvisitedNodes.get(node) + b.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:25.824459614 +0100\n+++ /tmp/tmp1creob6c.java\t2023-03-24 11:22:25.824459614 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + b.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, yOffset));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:27.712452122 +0100\n+++ /tmp/tmp7fsh9es5.java\t2023-03-24 11:22:27.716452106 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, yOffset));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, nextnode))));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:29.516444963 +0100\n+++ /tmp/tmpkr50dx6s.java\t2023-03-24 11:22:29.516444963 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, nextnode))));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "unvisitedNodes.get(nextnode) + b.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:31.536436945 +0100\n+++ /tmp/tmpb2ylm_23.java\t2023-03-24 11:22:31.536436945 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(nextnode) + b.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "unvisitedNodes.get(nextnode) + firstnode.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:33.452429341 +0100\n+++ /tmp/tmpobmyo5ey.java\t2023-03-24 11:22:33.452429341 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(nextnode) + firstnode.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "unvisitedNodes.get(node) + serviceName.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:35.392421641 +0100\n+++ /tmp/tmpdxosyl4g.java\t2023-03-24 11:22:35.396421625 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + serviceName.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "unvisitedNodes.get(node) + childPath.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:37.212414417 +0100\n+++ /tmp/tmpcig9jd2p.java\t2023-03-24 11:22:37.212414417 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + childPath.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "unvisitedNodes.get(node) + nonode.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:39.016407256 +0100\n+++ /tmp/tmp4cq_0edy.java\t2023-03-24 11:22:39.020407240 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + nonode.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "unvisitedNodes.get(node) + b[node.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:40.892399810 +0100\n+++ /tmp/tmp453xdmgu.java\t2023-03-24 11:22:40.892399810 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + b[node.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "unvisitedNodes.get(node) + rootnode.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:42.788392285 +0100\n+++ /tmp/tmpu48uhwzw.java\t2023-03-24 11:22:42.792392269 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + rootnode.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, firstnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:44.692384726 +0100\n+++ /tmp/tmpqdpaagi_.java\t2023-03-24 11:22:44.692384726 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, firstnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "unvisitedNodes.get(node) + baseNode.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:46.476377644 +0100\n+++ /tmp/tmpnnj1u6sk.java\t2023-03-24 11:22:46.476377644 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + baseNode.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "unvisitedNodes.get(node) + value.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:48.376370101 +0100\n+++ /tmp/tmp90f6_mqk.java\t2023-03-24 11:22:48.376370101 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + value.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "unvisitedNodes.get(node) + succNodes.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:50.244362687 +0100\n+++ /tmp/tmpemxqhihz.java\t2023-03-24 11:22:50.244362687 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + succNodes.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "unvisitedNodes.get(node) + bmaxnode.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:52.064355461 +0100\n+++ /tmp/tmptao7zvsk.java\t2023-03-24 11:22:52.164355063 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + bmaxnode.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "unvisitedNodes.get(node) + bvisitedNodes.get(Arrays.asList(node, nextnode))));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:53.912348125 +0100\n+++ /tmp/tmp0uzt7ctn.java\t2023-03-24 11:22:53.912348125 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + bvisitedNodes.get(Arrays.asList(node, nextnode))));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "unvisitedNodes.get(node) + endnode.get(Arrays.asList(node, nextnode))));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:55.800340628 +0100\n+++ /tmp/tmpqfq96vii.java\t2023-03-24 11:22:55.800340628 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + endnode.get(Arrays.asList(node, nextnode))));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "unvisitedNodes.get(node) + previousIB.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:57.624333386 +0100\n+++ /tmp/tmpo7c1ca9p.java\t2023-03-24 11:22:57.624333386 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + previousIB.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "unvisitedNodes.get(node) + inputString.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:22:59.276326828 +0100\n+++ /tmp/tmpjgn2uyzd.java\t2023-03-24 11:22:59.276326828 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + inputString.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "unvisitedNodes.get(node) + beginNodes.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:00.932320253 +0100\n+++ /tmp/tmphc1qdldo.java\t2023-03-24 11:23:00.936320239 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + beginNodes.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "unvisitedNodes.get(node) + numberOfnode.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:02.644313455 +0100\n+++ /tmp/tmpie1wj6d3.java\t2023-03-24 11:23:02.648313439 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + numberOfnode.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "unvisitedNodes.get(nextnode) + baseNode.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:04.320306800 +0100\n+++ /tmp/tmpfttbpc33.java\t2023-03-24 11:23:04.320306800 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(nextnode) + baseNode.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "unvisitedNodes.get(node) + firstnode.get(Arrays.asList(node, nextnode))));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:05.984300193 +0100\n+++ /tmp/tmpasmh7h9m.java\t2023-03-24 11:23:05.984300193 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + firstnode.get(Arrays.asList(node, nextnode))));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "unvisitedNodes.get(node) + lowerNodes.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:07.720293300 +0100\n+++ /tmp/tmp2t7q1my0.java\t2023-03-24 11:23:07.720293300 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + lowerNodes.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "unvisitedNodes.get(node) + snvisitedNodes.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:09.432286501 +0100\n+++ /tmp/tmpukfw3er3.java\t2023-03-24 11:23:09.432286501 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + snvisitedNodes.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "unvisitedNodes.get(node) + source.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:11.116279815 +0100\n+++ /tmp/tmp8zl6mb1s.java\t2023-03-24 11:23:11.116279815 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + source.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, nextnode)) %",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:12.764273270 +0100\n+++ /tmp/tmpomkm7dap.java\t2023-03-24 11:23:12.764273270 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, nextnode)) %\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "unvisitedNodes.get(node) + rootnode.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:14.500266376 +0100\n+++ /tmp/tmpxdz2tr7w.java\t2023-03-24 11:23:14.500266376 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + rootnode.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "unvisitedNodes.get(nextnode) + nextnode.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:16.204259609 +0100\n+++ /tmp/tmp77bcr21u.java\t2023-03-24 11:23:16.204259609 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(nextnode) + nextnode.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "unvisitedNodes.get(node) + endNodes.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:17.904252857 +0100\n+++ /tmp/tmp6e3qadmz.java\t2023-03-24 11:23:17.904252857 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + endNodes.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "unvisitedNodes.get(node) + indexConfig.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:19.508246488 +0100\n+++ /tmp/tmpqzvuzw_n.java\t2023-03-24 11:23:19.508246488 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + indexConfig.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "unvisitedNodes.get(nextnode) + value.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:21.224239672 +0100\n+++ /tmp/tmpv97yklhc.java\t2023-03-24 11:23:21.224239672 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(nextnode) + value.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "unvisitedNodes.get(node) + childPath.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:22.944232840 +0100\n+++ /tmp/tmp3a6v5y5o.java\t2023-03-24 11:23:22.944232840 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + childPath.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "unvisitedNodes.get(node) + b.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:24.648226074 +0100\n+++ /tmp/tmpy9xb_br_.java\t2023-03-24 11:23:24.648226074 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + b.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "unvisitedNodes.get(node) + endPredicate.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:26.444218941 +0100\n+++ /tmp/tmpyf9qtlka.java\t2023-03-24 11:23:26.448218925 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + endPredicate.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "unvisitedNodes.get(node) + index).get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:28.152212156 +0100\n+++ /tmp/tmptyrx5rlf.java\t2023-03-24 11:23:28.152212156 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + index).get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "unvisitedNodes.get(node) + firstNode.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:29.972204927 +0100\n+++ /tmp/tmp43une741.java\t2023-03-24 11:23:29.972204927 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + firstNode.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "unvisitedNodes.get(node) + blossNodes.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:31.676198158 +0100\n+++ /tmp/tmp9gmqnqh_.java\t2023-03-24 11:23:31.676198158 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + blossNodes.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "unvisitedNodes.get(nextnode) + b.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:33.420191232 +0100\n+++ /tmp/tmpm6dn4itv.java\t2023-03-24 11:23:33.420191232 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(nextnode) + b.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "unvisitedNodes.get(node) + luvisitedNodes.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:35.180184241 +0100\n+++ /tmp/tmpkpz5dcnm.java\t2023-03-24 11:23:35.180184241 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + luvisitedNodes.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, nextnode))[0];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:36.924177313 +0100\n+++ /tmp/tmpl1vg5u7w.java\t2023-03-24 11:23:36.924177313 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, nextnode))[0];\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "unvisitedNodes.get(node) + endLeft.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:38.636170511 +0100\n+++ /tmp/tmpz3clsw8z.java\t2023-03-24 11:23:38.636170511 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + endLeft.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "unvisitedNodes.get(nextnode) + firstnode.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:40.312163854 +0100\n+++ /tmp/tmpvilojopa.java\t2023-03-24 11:23:40.312163854 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(nextnode) + firstnode.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "unvisitedNodes.get(node) + baseNode.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:42.016157084 +0100\n+++ /tmp/tmpe3q7n2h3.java\t2023-03-24 11:23:42.016157084 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + baseNode.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "unvisitedNodes.get(nextnode) + firstNode.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:43.660150553 +0100\n+++ /tmp/tmpqt57tves.java\t2023-03-24 11:23:43.660150553 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(nextnode) + firstNode.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "unvisitedNodes.get(nextnode + firstnode.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:45.288144086 +0100\n+++ /tmp/tmp9o7ux9ix.java\t2023-03-24 11:23:45.288144086 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(nextnode + firstnode.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, nextnode))];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:47.044137109 +0100\n+++ /tmp/tmpiljk_o_a.java\t2023-03-24 11:23:47.044137109 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, nextnode))];\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "unvisitedNodes.get(node) + delta delta.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:48.716130466 +0100\n+++ /tmp/tmp0wfdnq06.java\t2023-03-24 11:23:48.720130451 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + delta delta.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "unvisitedNodes.get(node) + minNode.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:50.488123426 +0100\n+++ /tmp/tmp7sd559cv.java\t2023-03-24 11:23:50.488123426 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + minNode.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, currentnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:52.252116418 +0100\n+++ /tmp/tmpa6glt9dp.java\t2023-03-24 11:23:52.256116402 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, currentnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "unvisitedNodes.get(node) + node.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:54.012109425 +0100\n+++ /tmp/tmpjhqw2p2g.java\t2023-03-24 11:23:54.012109425 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + node.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "unvisitedNodes.get(node) + index.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:55.652102908 +0100\n+++ /tmp/tmphe9feer7.java\t2023-03-24 11:23:55.652102908 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + index.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "unvisitedNodes.get(node) + maxWidth maxWidth.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:57.352096154 +0100\n+++ /tmp/tmp_7hpe7w5.java\t2023-03-24 11:23:57.352096154 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + maxWidth maxWidth.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "unvisitedNodes.get(node) + bmaxnode.get(Arrays.asList(node, nextnode))));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:23:58.972089718 +0100\n+++ /tmp/tmpnj2f_0dp.java\t2023-03-24 11:23:58.972089718 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + bmaxnode.get(Arrays.asList(node, nextnode))));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "unvisitedNodes.get(node) + bbyteNodes.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:00.708082819 +0100\n+++ /tmp/tmpeflk03ng.java\t2023-03-24 11:24:00.712082804 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + bbyteNodes.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "unvisitedNodes.get(nextnode) + deltaY.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:02.376076191 +0100\n+++ /tmp/tmp65bx4osb.java\t2023-03-24 11:24:02.380076175 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(nextnode) + deltaY.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "unvisitedNodes.get(nextnode) + index.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:04.060069499 +0100\n+++ /tmp/tmpm85uvtfa.java\t2023-03-24 11:24:04.060069499 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(nextnode) + index.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, yVersion)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:05.660063142 +0100\n+++ /tmp/tmpbajkdmo4.java\t2023-03-24 11:24:05.660063142 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, yVersion)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "unvisitedNodes.get(node) + bvisitedNodes.get(Arrays.asList(node, nextnode)) %",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:07.396056244 +0100\n+++ /tmp/tmpxttzrj7v.java\t2023-03-24 11:24:07.400056228 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + bvisitedNodes.get(Arrays.asList(node, nextnode)) %\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "unvisitedNodes.get(node) + currentnode.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:09.120049393 +0100\n+++ /tmp/tmpn251_hfb.java\t2023-03-24 11:24:09.124049377 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + currentnode.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "unvisitedNodes.get(node) + ss.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:10.788042764 +0100\n+++ /tmp/tmph6hlhvjc.java\t2023-03-24 11:24:10.788042764 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + ss.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "unvisitedNodes.get(node) + deltaY.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:12.444036183 +0100\n+++ /tmp/tmp45v28y26.java\t2023-03-24 11:24:12.444036183 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + deltaY.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "unvisitedNodes.get(node) + b[node.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:14.112029554 +0100\n+++ /tmp/tmpxphd10uh.java\t2023-03-24 11:24:14.112029554 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + b[node.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "unvisitedNodes.get(node) + maxWidth.get(Arrays.asList(node, nextnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:15.744023068 +0100\n+++ /tmp/tmpznpx21t4.java\t2023-03-24 11:24:15.744023068 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + maxWidth.get(Arrays.asList(node, nextnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, propertiesnode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:17.484016152 +0100\n+++ /tmp/tmp94ft16kk.java\t2023-03-24 11:24:17.488016136 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, propertiesnode)) {\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "unvisitedNodes.get(node) + lowerNodes.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:19.332008810 +0100\n+++ /tmp/tmpiohw5se1.java\t2023-03-24 11:24:19.332008810 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + lowerNodes.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, nextnode)) http",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:20.992002210 +0100\n+++ /tmp/tmpyh_vpd5i.java\t2023-03-24 11:24:20.996002194 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, nextnode)) http\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, y + 1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:22.651995613 +0100\n+++ /tmp/tmp58zqd6gc.java\t2023-03-24 11:24:22.651995613 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, y + 1);\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "unvisitedNodes.get(nextnode) + baseNode.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:24.423988569 +0100\n+++ /tmp/tmpscc3m6zu.java\t2023-03-24 11:24:24.423988569 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(nextnode) + baseNode.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "unvisitedNodes.get(node) + bvisitedNodes.get(Arrays.asList(node, nextnode))[0];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:26.071982019 +0100\n+++ /tmp/tmp88ygn18z.java\t2023-03-24 11:24:26.071982019 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + bvisitedNodes.get(Arrays.asList(node, nextnode))[0];\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "unvisitedNodes.get(node) + luvisitedNodes.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:27.763975294 +0100\n+++ /tmp/tmpqiheep0s.java\t2023-03-24 11:24:27.767975279 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + luvisitedNodes.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "unvisitedNodes.get(node) + snvisitedNodes.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:29.451968584 +0100\n+++ /tmp/tmpraokq28d.java\t2023-03-24 11:24:29.451968584 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + snvisitedNodes.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "unvisitedNodes.get(node) + bvisitedNodes.get(Arrays.asList(node, nextnode)) http",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:31.159961796 +0100\n+++ /tmp/tmpv319ab8y.java\t2023-03-24 11:24:31.159961796 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + bvisitedNodes.get(Arrays.asList(node, nextnode)) http\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "unvisitedNodes.get(node) + bbyteNodes.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:32.867955006 +0100\n+++ /tmp/tmpluzfsf4u.java\t2023-03-24 11:24:32.867955006 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + bbyteNodes.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "unvisitedNodes.get(node) + bvisitedNodes.get(Arrays.asList(node, nextnode))];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:34.627948010 +0100\n+++ /tmp/tmpvl8dz999.java\t2023-03-24 11:24:34.627948010 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + bvisitedNodes.get(Arrays.asList(node, nextnode))];\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "unvisitedNodes.get(node) + blossNodes.get(Arrays.asList(node, nextnode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:36.283941426 +0100\n+++ /tmp/tmpb9g4n5ci.java\t2023-03-24 11:24:36.283941426 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + blossNodes.get(Arrays.asList(node, nextnode));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, nextnode)) %s",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:37.995934621 +0100\n+++ /tmp/tmp7o_gbmf4.java\t2023-03-24 11:24:37.995934621 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + nextnode.get(Arrays.asList(node, nextnode)) %s\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "unvisitedNodes.get(nextnode) + nextnode.get(Arrays.asList(node, nextnode))));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:39.703927831 +0100\n+++ /tmp/tmpnpnqp7gz.java\t2023-03-24 11:24:39.703927831 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(nextnode) + nextnode.get(Arrays.asList(node, nextnode))));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "unvisitedNodes.get(node) + bvisitedNodes.get(Arrays.asList(node, nextnode))[1];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:41.463920835 +0100\n+++ /tmp/tmpygx_ira6.java\t2023-03-24 11:24:41.463920835 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + bvisitedNodes.get(Arrays.asList(node, nextnode))[1];\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "unvisitedNodes.get(node) + bmaxnode.get(Arrays.asList(node, nextnode))[0];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:43.243913758 +0100\n+++ /tmp/tmput0h54ly.java\t2023-03-24 11:24:43.243913758 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + bmaxnode.get(Arrays.asList(node, nextnode))[0];\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "unvisitedNodes.get(nextnode) + firstNode.get(Arrays.asList(node, nextnode))));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:44.967906907 +0100\n+++ /tmp/tmpkl3n0vgs.java\t2023-03-24 11:24:44.967906907 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(nextnode) + firstNode.get(Arrays.asList(node, nextnode))));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "unvisitedNodes.get(node) + b[node.get(Arrays.asList(node, nextnode))));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:46.699900019 +0100\n+++ /tmp/tmptlr25qv9.java\t2023-03-24 11:24:46.699900019 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + b[node.get(Arrays.asList(node, nextnode))));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "unvisitedNodes.get(node) + bmaxnode.get(Arrays.asList(node, nextnode)) %",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:48.403893243 +0100\n+++ /tmp/tmpecu3e4p0.java\t2023-03-24 11:24:48.403893243 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + bmaxnode.get(Arrays.asList(node, nextnode)) %\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "unvisitedNodes.get(nextnode) + firstnode.get(Arrays.asList(node, nextnode))));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:50.147886310 +0100\n+++ /tmp/tmpeio8e9lg.java\t2023-03-24 11:24:50.147886310 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(nextnode) + firstnode.get(Arrays.asList(node, nextnode))));\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "unvisitedNodes.get(nextnode) + length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:51.899879345 +0100\n+++ /tmp/tmpi28u_8sc.java\t2023-03-24 11:24:51.899879345 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(nextnode) + length;\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "unvisitedNodes.get(node) + i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:53.559872745 +0100\n+++ /tmp/tmpl6gv91f2.java\t2023-03-24 11:24:53.559872745 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + i;\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "unvisitedNodes.get(node) + maxWidth;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_length/java_programs/SHORTEST_PATH_LENGTH.java\t2023-03-24 11:24:55.299865828 +0100\n+++ /tmp/tmpt52g6wve.java\t2023-03-24 11:24:55.299865828 +0100\n@@ -33,11 +33,11 @@\n                 if (unvisitedNodes.get(nextnode) == null) {\n                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                 }\n \n                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n+unvisitedNodes.get(node) + maxWidth;\n             }\n         }\n \n         return Integer.MAX_VALUE;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "distance + length_by_edge.get(Arrays.asList(node, nextnode))));"
    },
    "quicksort": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "} else if (x > y) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:21:58.724567139 +0100\n+++ /tmp/tmp69tv6qcz.java\t2023-03-24 11:21:58.792566870 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > y) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "} else if (x > pivot) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:00.596559714 +0100\n+++ /tmp/tmp3tugp8zx.java\t2023-03-24 11:22:00.596559714 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > pivot) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "} else if (x > x.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:05.276541147 +0100\n+++ /tmp/tmp5ok9v7t9.java\t2023-03-24 11:22:05.276541147 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > x.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "} else if (x > i) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:07.232533387 +0100\n+++ /tmp/tmpkm19mrd0.java\t2023-03-24 11:22:07.236533371 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > i) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "} else if (x > value.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:09.264525324 +0100\n+++ /tmp/tmpdg2ox5e6.java\t2023-03-24 11:22:09.264525324 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > value.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "} else if (x > 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:11.248517453 +0100\n+++ /tmp/tmp5_rk34xm.java\t2023-03-24 11:22:11.248517453 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > 1) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "} else if (x > x) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:16.000498598 +0100\n+++ /tmp/tmpxvelrxz6.java\t2023-03-24 11:22:16.000498598 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > x) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "} else if (x > environment.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:20.592480377 +0100\n+++ /tmp/tmp8nno_4ct.java\t2023-03-24 11:22:20.592480377 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > environment.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "} else if (x < pivot) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:22.608472377 +0100\n+++ /tmp/tmp0uno0ojo.java\t2023-03-24 11:22:22.608472377 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x < pivot) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "} else if (x > maxLength) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:27.176454251 +0100\n+++ /tmp/tmp3xj9rtj9.java\t2023-03-24 11:22:27.176454251 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > maxLength) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "} else if (x > value) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:29.000447010 +0100\n+++ /tmp/tmp2althh6c.java\t2023-03-24 11:22:29.000447010 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > value) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "} else if (x >birth.x) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:30.904439453 +0100\n+++ /tmp/tmptk5paq0t.java\t2023-03-24 11:22:30.904439453 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >birth.x) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "} else if (x > q) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:32.704432310 +0100\n+++ /tmp/tmpt2fet6bx.java\t2023-03-24 11:22:32.704432310 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > q) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "} else if (x >INT.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:34.644424609 +0100\n+++ /tmp/tmpqo1pf32k.java\t2023-03-24 11:22:34.644424609 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >INT.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "} else if (x > v) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:36.468417370 +0100\n+++ /tmp/tmptzuyra41.java\t2023-03-24 11:22:36.468417370 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > v) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "} else if (x > 23) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:38.412409654 +0100\n+++ /tmp/tmpxw5p3478.java\t2023-03-24 11:22:38.416409638 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > 23) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "} else if (x >constructor.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:42.940391680 +0100\n+++ /tmp/tmp5f1r38dk.java\t2023-03-24 11:22:42.940391680 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >constructor.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "} else if (x > isDefault.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:44.852384090 +0100\n+++ /tmp/tmpwbf7ljj2.java\t2023-03-24 11:22:44.852384090 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > isDefault.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "} else if (x > maxY) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:46.748376566 +0100\n+++ /tmp/tmpvfqj76oe.java\t2023-03-24 11:22:46.748376566 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > maxY) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "} else if (x > j) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:48.588369261 +0100\n+++ /tmp/tmpll9d46xq.java\t2023-03-24 11:22:48.588369261 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > j) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "} else if (x == pivot) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:50.364362210 +0100\n+++ /tmp/tmptxhgxrpn.java\t2023-03-24 11:22:50.364362210 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x == pivot) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "} else if (x > m) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:54.508345757 +0100\n+++ /tmp/tmpjpq69eyg.java\t2023-03-24 11:22:54.508345757 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > m) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "} else if (x > 2*.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:56.164339183 +0100\n+++ /tmp/tmp0aq_0xmo.java\t2023-03-24 11:22:56.164339183 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > 2*.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "} else if (x > 31) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:22:57.784332752 +0100\n+++ /tmp/tmpy1yatyk3.java\t2023-03-24 11:22:57.784332752 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > 31) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "} else if (x > nrt) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:01.800316807 +0100\n+++ /tmp/tmpuimhy1f4.java\t2023-03-24 11:23:01.800316807 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > nrt) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "} else if (x >springframework_x) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:03.452310247 +0100\n+++ /tmp/tmps6d3kps9.java\t2023-03-24 11:23:03.452310247 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >springframework_x) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "} else if (x > result.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:05.216303243 +0100\n+++ /tmp/tmp7bn7p_5x.java\t2023-03-24 11:23:05.216303243 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > result.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "} else if (x > 0x) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:07.088295809 +0100\n+++ /tmp/tmpevm5ovsh.java\t2023-03-24 11:23:07.092295793 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > 0x) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "} else if (x > n.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:08.732289280 +0100\n+++ /tmp/tmpryk5wl4y.java\t2023-03-24 11:23:08.732289280 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > n.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "} else if (x > 12) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:10.412282610 +0100\n+++ /tmp/tmprqixp231.java\t2023-03-24 11:23:10.412282610 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > 12) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "} else if (x >ch.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:14.556266153 +0100\n+++ /tmp/tmp5w_ft7vc.java\t2023-03-24 11:23:14.560266137 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >ch.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "} else if (x > dy) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:16.264259370 +0100\n+++ /tmp/tmpr07rgcbo.java\t2023-03-24 11:23:16.268259355 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > dy) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "} else if (x >Charset.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:17.984252541 +0100\n+++ /tmp/tmp615c7ley.java\t2023-03-24 11:23:17.984252541 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >Charset.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "} else if (x > n) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:19.740245568 +0100\n+++ /tmp/tmpdwjphkm8.java\t2023-03-24 11:23:19.740245568 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > n) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "} else if (x > n - 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:21.460238735 +0100\n+++ /tmp/tmpc0sdv86s.java\t2023-03-24 11:23:21.460238735 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > n - 1) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "} else if (x >help) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:23.188231872 +0100\n+++ /tmp/tmppdw2fump.java\t2023-03-24 11:23:23.188231872 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >help) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "} else if (x >subset.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:24.884225137 +0100\n+++ /tmp/tmp230fvjv2.java\t2023-03-24 11:23:24.884225137 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >subset.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "} else if (x >mm) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:26.544218543 +0100\n+++ /tmp/tmpw6t2vbwn.java\t2023-03-24 11:23:26.544218543 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >mm) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "} else if (x > startIndex) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:28.264211711 +0100\n+++ /tmp/tmpef0er3zk.java\t2023-03-24 11:23:28.264211711 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > startIndex) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "} else if (x > appName.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:30.004204802 +0100\n+++ /tmp/tmpb1lbltip.java\t2023-03-24 11:23:30.004204802 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > appName.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "} else if (x > START_pivot) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:31.712198016 +0100\n+++ /tmp/tmpgcyg4d6z.java\t2023-03-24 11:23:31.712198016 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > START_pivot) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "} else if (x > SPACE) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:33.436191167 +0100\n+++ /tmp/tmpn7yol969.java\t2023-03-24 11:23:33.436191167 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > SPACE) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "} else if (x > nct) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:35.172184272 +0100\n+++ /tmp/tmpklwyu0vg.java\t2023-03-24 11:23:35.172184272 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > nct) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "} else if (x > ASCII) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:36.916177344 +0100\n+++ /tmp/tmp3emdbgnz.java\t2023-03-24 11:23:36.916177344 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > ASCII) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "} else if (x > exp) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:38.628170545 +0100\n+++ /tmp/tmpu5kftd8x.java\t2023-03-24 11:23:38.628170545 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > exp) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "} else if (x < y) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:40.384163567 +0100\n+++ /tmp/tmpc91fub9y.java\t2023-03-24 11:23:40.384163567 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x < y) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "} else if (x > m.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:42.104156735 +0100\n+++ /tmp/tmpxnopnyi7.java\t2023-03-24 11:23:42.104156735 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > m.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "} else if (x > Comment) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:43.884149664 +0100\n+++ /tmp/tmpx9mrrye6.java\t2023-03-24 11:23:43.884149664 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > Comment) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "} else if (x > mu.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:45.588142893 +0100\n+++ /tmp/tmpxfn5v997.java\t2023-03-24 11:23:45.588142893 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > mu.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "} else if (x > operand.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:47.276136188 +0100\n+++ /tmp/tmpmbkuport.java\t2023-03-24 11:23:47.276136188 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > operand.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "} else if (x > 0x05) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:48.988129386 +0100\n+++ /tmp/tmp4oadbezu.java\t2023-03-24 11:23:48.988129386 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > 0x05) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "} else if (x > needed) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:53.020113367 +0100\n+++ /tmp/tmpqy6ffwce.java\t2023-03-24 11:23:53.020113367 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > needed) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "} else if (x > nElt) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:54.664106835 +0100\n+++ /tmp/tmpl04n8fgn.java\t2023-03-24 11:23:54.668106819 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > nElt) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "} else if (x > 0x02) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:23:56.348100143 +0100\n+++ /tmp/tmpyo9ya4a9.java\t2023-03-24 11:23:56.352100127 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > 0x02) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "} else if (x > 0x0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:00.496083662 +0100\n+++ /tmp/tmpmxpgvuqz.java\t2023-03-24 11:24:00.496083662 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > 0x0) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": true,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "} else if (x > ptr) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:04.400068149 +0100\n+++ /tmp/tmppa96rm3w.java\t2023-03-24 11:24:04.404068133 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > ptr) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "} else if (x >3.0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:06.080061473 +0100\n+++ /tmp/tmpnv7u8n8q.java\t2023-03-24 11:24:06.084061457 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >3.0) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "} else if (x > MAX_VALUE) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:10.040045736 +0100\n+++ /tmp/tmpg666y20k.java\t2023-03-24 11:24:10.040045736 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > MAX_VALUE) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "} else if (x > important) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:11.800038742 +0100\n+++ /tmp/tmpv7a1h16e.java\t2023-03-24 11:24:11.804038726 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > important) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "} else if (x > upper.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:13.540031827 +0100\n+++ /tmp/tmphanog40q.java\t2023-03-24 11:24:13.540031827 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > upper.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "} else if (x >pivot) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:15.292024864 +0100\n+++ /tmp/tmpldjcfogz.java\t2023-03-24 11:24:15.292024864 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >pivot) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "} else if (x > digit) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:19.364008681 +0100\n+++ /tmp/tmpru7qi6nt.java\t2023-03-24 11:24:19.368008665 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > digit) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "} else if (x >FIX.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:21.060001940 +0100\n+++ /tmp/tmpvimfkaiy.java\t2023-03-24 11:24:21.060001940 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >FIX.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "} else if (x > available) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:22.759995184 +0100\n+++ /tmp/tmpkno_87tz.java\t2023-03-24 11:24:22.763995168 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > available) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "} else if (x > zipCode) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:24.463988410 +0100\n+++ /tmp/tmp57ssnusn.java\t2023-03-24 11:24:24.463988410 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > zipCode) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "} else if (x >caption) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:26.243981338 +0100\n+++ /tmp/tmpr0z0m90c.java\t2023-03-24 11:24:26.243981338 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >caption) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "} else if (x > Field.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:27.955974531 +0100\n+++ /tmp/tmp4ey6d51b.java\t2023-03-24 11:24:27.955974531 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > Field.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "} else if (x > x.byte) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:29.683967662 +0100\n+++ /tmp/tmpjvu7wa4g.java\t2023-03-24 11:24:29.683967662 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > x.byte) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "} else if (x >Jobs) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:31.307961207 +0100\n+++ /tmp/tmphmg3vpgv.java\t2023-03-24 11:24:31.311961191 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >Jobs) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "} else if (x > end) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:33.031954354 +0100\n+++ /tmp/tmpmbvdyobx.java\t2023-03-24 11:24:33.035954339 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > end) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "} else if (x >PLAIN) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:34.711947675 +0100\n+++ /tmp/tmpt_kv2kc_.java\t2023-03-24 11:24:34.711947675 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >PLAIN) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "} else if (x > x.size) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:36.427940854 +0100\n+++ /tmp/tmpu2f17dy_.java\t2023-03-24 11:24:36.427940854 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > x.size) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "} else if (x > START.pivot) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:38.131934080 +0100\n+++ /tmp/tmpkkjpjtpl.java\t2023-03-24 11:24:38.131934080 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > START.pivot) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "} else if (x > cur.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:39.787927497 +0100\n+++ /tmp/tmpte3fw0a4.java\t2023-03-24 11:24:39.787927497 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > cur.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "} else if (x > v1ed) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:41.475920788 +0100\n+++ /tmp/tmpj04x3kkc.java\t2023-03-24 11:24:41.479920773 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > v1ed) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "} else if (x >birth) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:43.219913854 +0100\n+++ /tmp/tmpqz3c1y3e.java\t2023-03-24 11:24:43.219913854 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >birth) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "} else if (x > times) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:44.951906968 +0100\n+++ /tmp/tmpqvf9ydkl.java\t2023-03-24 11:24:44.951906968 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > times) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "} else if (x >subject) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:46.671900130 +0100\n+++ /tmp/tmpcuxu84o3.java\t2023-03-24 11:24:46.671900130 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >subject) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "} else if (x >ch) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:48.395893278 +0100\n+++ /tmp/tmpak9gb14e.java\t2023-03-24 11:24:48.399893259 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >ch) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "} else if (x >header) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:50.123886406 +0100\n+++ /tmp/tmp10p6a7pm.java\t2023-03-24 11:24:50.127886392 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >header) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "} else if (x >springframework.x) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:51.831879615 +0100\n+++ /tmp/tmp0by8g5qw.java\t2023-03-24 11:24:51.831879615 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >springframework.x) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "} else if (x > byteArray.x) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:53.547872792 +0100\n+++ /tmp/tmp_gi0vu4q.java\t2023-03-24 11:24:53.547872792 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > byteArray.x) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "} else if (x > routing.x) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:55.279865906 +0100\n+++ /tmp/tmpvx5alb17.java\t2023-03-24 11:24:55.279865906 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > routing.x) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "} else if (x > major.x) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:56.983859130 +0100\n+++ /tmp/tmpzcj9_ol1.java\t2023-03-24 11:24:56.987859114 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > major.x) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "} else if (x > 0x03) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:24:58.927851403 +0100\n+++ /tmp/tmpvf1djnjy.java\t2023-03-24 11:24:58.931851384 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > 0x03) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "} else if (x > byteArray.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:25:03.195834430 +0100\n+++ /tmp/tmpeshky4p5.java\t2023-03-24 11:25:03.195834430 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > byteArray.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "} else if (x >Cert.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:25:04.967827386 +0100\n+++ /tmp/tmptyhy2j90.java\t2023-03-24 11:25:04.971827367 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >Cert.length) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "} else if (x > 32) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:25:06.719820416 +0100\n+++ /tmp/tmpy85s9bf8.java\t2023-03-24 11:25:06.775820194 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > 32) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "} else if (x > true) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:25:10.831804065 +0100\n+++ /tmp/tmpjv_69jje.java\t2023-03-24 11:25:10.835804049 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > true) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "} else if (x > jp) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:25:12.623796939 +0100\n+++ /tmp/tmpf8lfae18.java\t2023-03-24 11:25:12.623796939 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > jp) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "} else if (x > x.c) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:25:14.319790194 +0100\n+++ /tmp/tmpp7ucyumq.java\t2023-03-24 11:25:14.323790179 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > x.c) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "} else if (x > w) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:25:16.079783195 +0100\n+++ /tmp/tmpd3knl4vs.java\t2023-03-24 11:25:16.079783195 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > w) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "} else if (x > dfs {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:25:17.795776370 +0100\n+++ /tmp/tmpzvg5dfp1.java\t2023-03-24 11:25:17.795776370 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > dfs {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "} else if (x > 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:25:19.475769689 +0100\n+++ /tmp/tmp8v35hx64.java\t2023-03-24 11:25:19.475769689 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > 0) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": true,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "} else if (x > x.x) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:25:23.547753494 +0100\n+++ /tmp/tmp3un77u8f.java\t2023-03-24 11:25:23.547753494 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > x.x) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "} else if (x > v + 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:25:25.287746573 +0100\n+++ /tmp/tmpozivdxo3.java\t2023-03-24 11:25:25.291746558 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > v + 1) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "} else if (x > v1 ) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:25:27.035739621 +0100\n+++ /tmp/tmph6ulh16q.java\t2023-03-24 11:25:27.035739621 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > v1 ) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "} else if (x > 1){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:25:28.739732843 +0100\n+++ /tmp/tmp8nu_poi_.java\t2023-03-24 11:25:28.739732843 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > 1){\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "} else if (x >You {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:25:32.791716726 +0100\n+++ /tmp/tmppn8kuppq.java\t2023-03-24 11:25:32.791716726 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x >You {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "} else if (x > greater.L) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/quicksort/java_programs/QUICKSORT.java\t2023-03-24 11:25:34.423710236 +0100\n+++ /tmp/tmpl23vslp8.java\t2023-03-24 11:25:34.423710236 +0100\n@@ -21,11 +21,11 @@\n         ArrayList<Integer> greater = new ArrayList<Integer>();\n \n         for (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-            } else if (x > pivot) {\n+} else if (x > greater.L) {\n                 greater.add(x);\n             }\n         }\n         ArrayList<Integer> middle = new ArrayList<Integer>();\n         middle.add(pivot);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "} else if (x >= pivot) {"
    },
    "hanoi": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(start, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:00.031847011 +0100\n+++ /tmp/tmpvroa3pmj.java\t2023-03-24 11:25:00.099846743 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(start, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(end, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:04.127830724 +0100\n+++ /tmp/tmpm4okfcn4.java\t2023-03-24 11:25:04.127830724 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(end, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( start, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:08.167814661 +0100\n+++ /tmp/tmp47fmbr7c.java\t2023-03-24 11:25:08.171814642 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( start, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(84, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:12.323798131 +0100\n+++ /tmp/tmpusm0uf6t.java\t2023-03-24 11:25:12.323798131 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(84, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(a, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:16.359782081 +0100\n+++ /tmp/tmp1h4t3sf6.java\t2023-03-24 11:25:16.363782065 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(a, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(j, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:18.143774986 +0100\n+++ /tmp/tmprnfheo8g.java\t2023-03-24 11:25:18.147774970 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(j, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( blocks, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:19.879768083 +0100\n+++ /tmp/tmpli6p9a0c.java\t2023-03-24 11:25:19.883768067 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( blocks, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( network, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:21.635761099 +0100\n+++ /tmp/tmpue_xg2jv.java\t2023-03-24 11:25:21.635761099 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( network, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(Repository, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:23.419754002 +0100\n+++ /tmp/tmpxwel3fz1.java\t2023-03-24 11:25:23.431753955 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(Repository, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(query, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:25.239746764 +0100\n+++ /tmp/tmpki1g5rkt.java\t2023-03-24 11:25:25.239746764 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(query, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(expression, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:27.095739383 +0100\n+++ /tmp/tmpotwrcgdl.java\t2023-03-24 11:25:27.095739383 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(expression, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(thread, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:28.791732637 +0100\n+++ /tmp/tmpnfyxomh7.java\t2023-03-24 11:25:28.791732637 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(thread, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(network, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:30.495725859 +0100\n+++ /tmp/tmp0uah3ryz.java\t2023-03-24 11:25:30.499725843 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(network, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(Elt, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:32.243718907 +0100\n+++ /tmp/tmpb40v6xqn.java\t2023-03-24 11:25:32.247718891 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(Elt, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(container, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:33.947712129 +0100\n+++ /tmp/tmp3c8oe7o8.java\t2023-03-24 11:25:33.947712129 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(container, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(YEAR, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:35.711705112 +0100\n+++ /tmp/tmpz0apuklq.java\t2023-03-24 11:25:35.715705096 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(YEAR, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( endIndex, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:37.591697634 +0100\n+++ /tmp/tmpwedqw81f.java\t2023-03-24 11:25:37.591697634 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( endIndex, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(getAll, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:39.427690331 +0100\n+++ /tmp/tmpqug2z623.java\t2023-03-24 11:25:39.427690331 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(getAll, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(left, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:41.171683392 +0100\n+++ /tmp/tmpll2dq6th.java\t2023-03-24 11:25:41.171683392 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(left, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(1ance, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:42.975676217 +0100\n+++ /tmp/tmpqty0lfml.java\t2023-03-24 11:25:42.995676137 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(1ance, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( helper, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:44.619669676 +0100\n+++ /tmp/tmpsyridlzb.java\t2023-03-24 11:25:44.623669660 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( helper, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(>( start, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:48.807653016 +0100\n+++ /tmp/tmphehqkqxi.java\t2023-03-24 11:25:48.807653016 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(>( start, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(getTime, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:50.455646459 +0100\n+++ /tmp/tmpfxhegy6j.java\t2023-03-24 11:25:50.459646444 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(getTime, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(time, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:52.235639379 +0100\n+++ /tmp/tmp9hwlpvki.java\t2023-03-24 11:25:52.235639379 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(time, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(Listener, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:53.931632631 +0100\n+++ /tmp/tmpxo2hed0c.java\t2023-03-24 11:25:53.931632631 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(Listener, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(minNode, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:55.659625756 +0100\n+++ /tmp/tmp0pamzoi6.java\t2023-03-24 11:25:55.659625756 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(minNode, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( because, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:57.451618626 +0100\n+++ /tmp/tmp2yhgdt6z.java\t2023-03-24 11:25:57.451618626 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( because, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(layer, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:25:59.223611577 +0100\n+++ /tmp/tmpoiaqa67q.java\t2023-03-24 11:25:59.227611561 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(layer, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(term, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:00.987604558 +0100\n+++ /tmp/tmpv55hdxhf.java\t2023-03-24 11:26:00.991604542 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(term, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( throwable, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:02.739597588 +0100\n+++ /tmp/tmp_jpc1zuc.java\t2023-03-24 11:26:02.743597572 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( throwable, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( == helper, start)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:04.483590649 +0100\n+++ /tmp/tmpkg3s86fe.java\t2023-03-24 11:26:04.483590649 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( == helper, start)\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( final Pair, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:06.107584187 +0100\n+++ /tmp/tmp4y1kwnh5.java\t2023-03-24 11:26:06.107584187 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( final Pair, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( millis, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:07.751577646 +0100\n+++ /tmp/tmpwhggf4j0.java\t2023-03-24 11:26:07.755577630 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( millis, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(start, helper;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:09.475570786 +0100\n+++ /tmp/tmpsc3yyfq7.java\t2023-03-24 11:26:09.475570786 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(start, helper;\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(firstName, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:11.067564452 +0100\n+++ /tmp/tmp54feddk4.java\t2023-03-24 11:26:11.067564452 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(firstName, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(od, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:12.791557593 +0100\n+++ /tmp/tmp72bcru4f.java\t2023-03-24 11:26:12.791557593 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(od, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(1Reader, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:14.591550429 +0100\n+++ /tmp/tmpf8mlx18k.java\t2023-03-24 11:26:14.591550429 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(1Reader, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(Extension, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:16.267543758 +0100\n+++ /tmp/tmpu5kn42h5.java\t2023-03-24 11:26:16.271543743 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(Extension, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(new Pair, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:18.011536820 +0100\n+++ /tmp/tmpm0dqw2f0.java\t2023-03-24 11:26:18.015536804 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(new Pair, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(count, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:19.603530484 +0100\n+++ /tmp/tmp49rw2ssu.java\t2023-03-24 11:26:19.603530484 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(count, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(Sources, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:21.359523496 +0100\n+++ /tmp/tmpaqfalrkt.java\t2023-03-24 11:26:21.359523496 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(Sources, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(comment, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:23.071516683 +0100\n+++ /tmp/tmpcpms4qxi.java\t2023-03-24 11:26:23.071516683 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(comment, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(name, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:24.847509615 +0100\n+++ /tmp/tmpi5zqxn8m.java\t2023-03-24 11:26:24.847509615 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(name, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(val, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:26.591502675 +0100\n+++ /tmp/tmpbbo20guy.java\t2023-03-24 11:26:26.591502675 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(val, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(right, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:28.367495607 +0100\n+++ /tmp/tmpo0fy969d.java\t2023-03-24 11:26:28.371495591 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(right, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(storage, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:30.151488507 +0100\n+++ /tmp/tmp1vic5esn.java\t2023-03-24 11:26:30.151488507 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(storage, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(1 Pet, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:31.835481805 +0100\n+++ /tmp/tmp9ikbq1rz.java\t2023-03-24 11:26:31.839481789 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(1 Pet, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(ch, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:33.567474912 +0100\n+++ /tmp/tmpffwhuq7n.java\t2023-03-24 11:26:33.571474896 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(ch, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(CENTER, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:35.455467399 +0100\n+++ /tmp/tmpamgzsyl1.java\t2023-03-24 11:26:35.455467399 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(CENTER, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(Cluster, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:37.287460106 +0100\n+++ /tmp/tmpcw7y25kv.java\t2023-03-24 11:26:37.287460106 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(Cluster, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( query, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:39.047453101 +0100\n+++ /tmp/tmpr0za7ago.java\t2023-03-24 11:26:39.047453101 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( query, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(body, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:40.799446131 +0100\n+++ /tmp/tmp7z3in7v2.java\t2023-03-24 11:26:40.799446131 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(body, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( processing, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:42.507439331 +0100\n+++ /tmp/tmpb80qh_ee.java\t2023-03-24 11:26:42.507439331 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( processing, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(1Pane, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:44.219432516 +0100\n+++ /tmp/tmpebvo7z44.java\t2023-03-24 11:26:44.219432516 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(1Pane, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(prev, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:45.855426006 +0100\n+++ /tmp/tmp8ag5pzcl.java\t2023-03-24 11:26:45.859425987 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(prev, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(Graph, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:47.603419047 +0100\n+++ /tmp/tmpw3k_w_0i.java\t2023-03-24 11:26:47.603419047 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(Graph, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(items, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:49.371412009 +0100\n+++ /tmp/tmp1rerfaum.java\t2023-03-24 11:26:49.371412009 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(items, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( Shape, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:51.127405019 +0100\n+++ /tmp/tmpgly6nc6o.java\t2023-03-24 11:26:51.127405019 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( Shape, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( TO, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:52.907397933 +0100\n+++ /tmp/tmpqa0b4vvg.java\t2023-03-24 11:26:52.907397933 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( TO, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(is, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:54.607391166 +0100\n+++ /tmp/tmppfmtjy26.java\t2023-03-24 11:26:54.607391166 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(is, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(1, helper, start)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:56.327384321 +0100\n+++ /tmp/tmpyf4bxeaz.java\t2023-03-24 11:26:56.327384321 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(1, helper, start)\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(child, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:57.919377983 +0100\n+++ /tmp/tmpidueitcj.java\t2023-03-24 11:26:57.919377983 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(child, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( == helper, start;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:26:59.687370944 +0100\n+++ /tmp/tmp9q267t8n.java\t2023-03-24 11:26:59.691370928 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( == helper, start;\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(Change, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:01.311364480 +0100\n+++ /tmp/tmpm5z60vlc.java\t2023-03-24 11:27:01.311364480 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(Change, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(constructor, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:03.051357552 +0100\n+++ /tmp/tmpio_qdto7.java\t2023-03-24 11:27:03.051357552 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(constructor, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(Uri, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:04.779350673 +0100\n+++ /tmp/tmpyrx7ihz4.java\t2023-03-24 11:27:04.783350657 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(Uri, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(controlSet, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:06.523343731 +0100\n+++ /tmp/tmp_n5lzb5v.java\t2023-03-24 11:27:06.527343715 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(controlSet, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(:\", helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:08.275336755 +0100\n+++ /tmp/tmpgltxeroi.java\t2023-03-24 11:27:08.275336755 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(:\", helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(1, helper, start);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:09.899330293 +0100\n+++ /tmp/tmpmyfu5mtp.java\t2023-03-24 11:27:09.899330293 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(1, helper, start);\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(red, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:11.511323873 +0100\n+++ /tmp/tmp9k5y9bi1.java\t2023-03-24 11:27:11.511323873 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(red, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(oir, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:13.219317073 +0100\n+++ /tmp/tmp1qse0100.java\t2023-03-24 11:27:13.219317073 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(oir, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(gap, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:14.967310113 +0100\n+++ /tmp/tmpa7y6uucb.java\t2023-03-24 11:27:14.967310113 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(gap, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(SEPARATOR, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:16.699303218 +0100\n+++ /tmp/tmpj96jqnpf.java\t2023-03-24 11:27:16.699303218 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(SEPARATOR, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(1, helper, start));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:18.471296162 +0100\n+++ /tmp/tmpim8hazcf.java\t2023-03-24 11:27:18.471296162 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(1, helper, start));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(JOIN, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:20.151289474 +0100\n+++ /tmp/tmpj7x4ilrk.java\t2023-03-24 11:27:20.151289474 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(JOIN, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(Cxx, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:21.851282705 +0100\n+++ /tmp/tmprxgp9c7t.java\t2023-03-24 11:27:21.851282705 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(Cxx, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(supports, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:23.659275509 +0100\n+++ /tmp/tmpz2cy8n1o.java\t2023-03-24 11:27:23.659275509 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(supports, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( < helper, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:25.463268323 +0100\n+++ /tmp/tmpsr148ja5.java\t2023-03-24 11:27:25.463268323 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( < helper, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(>( helper, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:27.147261618 +0100\n+++ /tmp/tmp717_jx6t.java\t2023-03-24 11:27:27.147261618 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(>( helper, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( curr, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:28.783255105 +0100\n+++ /tmp/tmp0g2ky1y5.java\t2023-03-24 11:27:28.783255105 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( curr, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( owner, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:30.611247828 +0100\n+++ /tmp/tmpebjmyolr.java\t2023-03-24 11:27:30.611247828 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( owner, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( == helper, start);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:32.371240818 +0100\n+++ /tmp/tmpjrhg9ri_.java\t2023-03-24 11:27:32.371240818 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( == helper, start);\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( </, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:34.095233952 +0100\n+++ /tmp/tmpoi_gw9if.java\t2023-03-24 11:27:34.095233952 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( </, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( -1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:35.703227550 +0100\n+++ /tmp/tmp_m75qn22.java\t2023-03-24 11:27:35.703227550 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( -1;\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(8, helper, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:37.327221082 +0100\n+++ /tmp/tmp48h1xnd8.java\t2023-03-24 11:27:37.343221019 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(8, helper, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( Cxx, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:39.235213485 +0100\n+++ /tmp/tmpgt4yqh32.java\t2023-03-24 11:27:39.235213485 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( Cxx, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(start, helper);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:40.995206476 +0100\n+++ /tmp/tmpqzbz52om.java\t2023-03-24 11:27:40.999206461 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(start, helper);\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( == helper, start));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:42.687199741 +0100\n+++ /tmp/tmpmd3onlos.java\t2023-03-24 11:27:42.687199741 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( == helper, start));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( tokenType, helper));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:44.379193000 +0100\n+++ /tmp/tmpimwebk0i.java\t2023-03-24 11:27:44.383192984 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( tokenType, helper));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(11;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:46.183185816 +0100\n+++ /tmp/tmpoxmyy3fk.java\t2023-03-24 11:27:46.183185816 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(11;\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(6, helper, start);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:47.807179349 +0100\n+++ /tmp/tmpdsqoyiab.java\t2023-03-24 11:27:47.807179349 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(6, helper, start);\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>( helper, start);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:49.483172674 +0100\n+++ /tmp/tmpvn0iy0pq.java\t2023-03-24 11:27:49.515172547 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>( helper, start);\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(1, helper, start;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:51.167165970 +0100\n+++ /tmp/tmpvqk4v5m_.java\t2023-03-24 11:27:51.171165951 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(1, helper, start;\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(4, helper, start));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:52.883159133 +0100\n+++ /tmp/tmp74l5qoyj.java\t2023-03-24 11:27:52.883159133 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(4, helper, start));\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(4, helper, start);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:54.607152268 +0100\n+++ /tmp/tmpoueilnl0.java\t2023-03-24 11:27:54.607152268 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(4, helper, start);\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(8, helper, start);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:56.243145752 +0100\n+++ /tmp/tmptjvhvxde.java\t2023-03-24 11:27:56.243145752 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(8, helper, start);\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(6, helper, start)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:57.891139190 +0100\n+++ /tmp/tmp4ifwcg0p.java\t2023-03-24 11:27:57.891139190 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(6, helper, start)\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(controlSet, helper;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:27:59.519132704 +0100\n+++ /tmp/tmpkfc94udr.java\t2023-03-24 11:27:59.519132704 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(controlSet, helper;\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(6, helper, start;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:28:01.155126190 +0100\n+++ /tmp/tmpszlksign.java\t2023-03-24 11:28:01.155126190 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(6, helper, start;\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "steps.add(new Pair<Integer,Integer>(8, helper, start;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/hanoi/java_programs/HANOI.java\t2023-03-24 11:28:02.859119402 +0100\n+++ /tmp/tmppq1czo32.java\t2023-03-24 11:28:02.859119402 +0100\n@@ -22,11 +22,11 @@\n             crap_set.add(3);\n             crap_set.remove(start);\n             crap_set.remove(end);\n             int helper = crap_set.poll();\n             steps.addAll(hanoi(height-1, start, helper));\n-            steps.add(new Pair<Integer,Integer>(start, helper));\n+steps.add(new Pair<Integer,Integer>(8, helper, start;\n             steps.addAll(hanoi(height-1, helper, end));\n         }\n \n         return steps;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "steps.add(new Pair<Integer,Integer>(start, end));"
    },
    "bucketsort": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "for (Integer count : i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:25:38.495694038 +0100\n+++ /tmp/tmpzi1mw_ti.java\t2023-03-24 11:25:38.583693688 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : i;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "for (Integer i : count;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:25:40.291686893 +0100\n+++ /tmp/tmpjhof_wmc.java\t2023-03-24 11:25:40.291686893 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : count;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "for (Integer count : value;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:25:41.971680210 +0100\n+++ /tmp/tmpk95h983n.java\t2023-03-24 11:25:41.971680210 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : value;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "for (Integer count : 0; i < count;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:25:43.611673687 +0100\n+++ /tmp/tmpad4bhg3o.java\t2023-03-24 11:25:43.611673687 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : 0; i < count;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "for (Integer i : arr;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:25:45.231667242 +0100\n+++ /tmp/tmpq2v4_y_f.java\t2023-03-24 11:25:45.235667226 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : arr;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "for (Integer count : version.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:25:46.955660384 +0100\n+++ /tmp/tmpef731ecn.java\t2023-03-24 11:25:46.955660384 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : version.length;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "for(Integer count : value;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:25:48.723653351 +0100\n+++ /tmp/tmp4o947_1m.java\t2023-03-24 11:25:48.723653351 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for(Integer count : value;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "for (Integer count : 0;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:25:50.411646634 +0100\n+++ /tmp/tmpef4m9jze.java\t2023-03-24 11:25:50.411646634 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : 0;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "for (Integer i : value;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:25:52.075640015 +0100\n+++ /tmp/tmpbvr9wbrk.java\t2023-03-24 11:25:52.079639999 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : value;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "for (Integer i : arr.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:25:53.799633156 +0100\n+++ /tmp/tmp5lmje0c2.java\t2023-03-24 11:25:53.799633156 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : arr.length;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "for(Integer count : version.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:25:55.535626249 +0100\n+++ /tmp/tmpuxt2ixpt.java\t2023-03-24 11:25:55.535626249 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for(Integer count : version.length;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "for(Integer count : i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:25:57.199619630 +0100\n+++ /tmp/tmpn5ryg4cn.java\t2023-03-24 11:25:57.199619630 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for(Integer count : i;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "for (Integer count : version) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:25:58.923612770 +0100\n+++ /tmp/tmppc3ttjuc.java\t2023-03-24 11:25:58.923612770 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : version) {\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "for (Integer count : expression; i < count;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:00.647605912 +0100\n+++ /tmp/tmp1qdfo93z.java\t2023-03-24 11:26:00.651605897 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : expression; i < count;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "for (Integer i : this.arr;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:02.315599274 +0100\n+++ /tmp/tmphkjaw6c7.java\t2023-03-24 11:26:02.315599274 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : this.arr;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "for (Integer count : value) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:03.927592861 +0100\n+++ /tmp/tmpfvrag_on.java\t2023-03-24 11:26:03.927592861 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : value) {\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "for (Integer count : 0; i < count; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:05.659585970 +0100\n+++ /tmp/tmpo4umjm5q.java\t2023-03-24 11:26:05.659585970 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : 0; i < count; }\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "for (Integer count : value.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:07.319579364 +0100\n+++ /tmp/tmpxjsim5qe.java\t2023-03-24 11:26:07.319579364 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : value.length;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "for (Integer i : arr; i < count;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:09.059572441 +0100\n+++ /tmp/tmpsj6dk_24.java\t2023-03-24 11:26:09.059572441 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : arr; i < count;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "for (Integer count : version;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:10.763565660 +0100\n+++ /tmp/tmpyvko451y.java\t2023-03-24 11:26:10.763565660 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : version;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "for (Integer count : 0; i < count; version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:12.403559135 +0100\n+++ /tmp/tmppe_zpi5x.java\t2023-03-24 11:26:12.407559119 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : 0; i < count; version\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "for (Integer count : expression;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:14.011552735 +0100\n+++ /tmp/tmpj6sb47rq.java\t2023-03-24 11:26:14.015552720 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : expression;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "for (Integer count : version.get(arr);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:15.687546067 +0100\n+++ /tmp/tmpnbrmmo42.java\t2023-03-24 11:26:15.687546067 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : version.get(arr);\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "for (Integer count : expressionCount;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:17.407539223 +0100\n+++ /tmp/tmp7m8sowhr.java\t2023-03-24 11:26:17.407539223 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : expressionCount;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "for (Integer i : 0;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:19.107532457 +0100\n+++ /tmp/tmp40vsqv5c.java\t2023-03-24 11:26:19.155532266 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : 0;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "for(Integer count : version;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:20.811525676 +0100\n+++ /tmp/tmpqkuw9idd.java\t2023-03-24 11:26:20.815525661 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for(Integer count : version;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "for (Integer i : 0; i < count;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:22.519518880 +0100\n+++ /tmp/tmpx20_66a4.java\t2023-03-24 11:26:22.519518880 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : 0; i < count;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "for (Integer count : value; i < count;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:24.155512370 +0100\n+++ /tmp/tmpen_gtqrc.java\t2023-03-24 11:26:24.155512370 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : value; i < count;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "for (Integer count : this.arr;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:25.799505827 +0100\n+++ /tmp/tmp2n5rq4iq.java\t2023-03-24 11:26:25.799505827 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : this.arr;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "for (Integer count : Aggregate_arr;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:27.523498966 +0100\n+++ /tmp/tmp9mp1itkx.java\t2023-03-24 11:26:27.527498950 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : Aggregate_arr;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "for (Integer count : value; i++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:29.147492503 +0100\n+++ /tmp/tmps5spci3x.java\t2023-03-24 11:26:29.147492503 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : value; i++) {\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "for (Integer count : viewId;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:30.779486008 +0100\n+++ /tmp/tmpvjp79yac.java\t2023-03-24 11:26:30.779486008 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : viewId;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "for (Integer count : uri;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:32.475479258 +0100\n+++ /tmp/tmpym3ddp98.java\t2023-03-24 11:26:32.475479258 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : uri;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "for (Integer count : i; ) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:34.079472875 +0100\n+++ /tmp/tmprw92vgo7.java\t2023-03-24 11:26:34.079472875 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : i; ) {\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "for (Integer count : Aggregate_arr; fixed version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:35.647466633 +0100\n+++ /tmp/tmpgjepxbly.java\t2023-03-24 11:26:35.647466633 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : Aggregate_arr; fixed version\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "for (Integer count : expression; i++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:37.303460043 +0100\n+++ /tmp/tmpv2yeei3n.java\t2023-03-24 11:26:37.307460027 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : expression; i++) {\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "for (Integer count : UNRECOGNIZED;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:38.975453388 +0100\n+++ /tmp/tmp_xcatwnp.java\t2023-03-24 11:26:38.975453388 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : UNRECOGNIZED;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "for (Integer count : 9;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:40.699446527 +0100\n+++ /tmp/tmp6cz30ez3.java\t2023-03-24 11:26:40.699446527 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : 9;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "for(Integer count : 0; i < count;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:42.455439537 +0100\n+++ /tmp/tmp95bjxo8y.java\t2023-03-24 11:26:42.455439537 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for(Integer count : 0; i < count;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "for (Integer count : 0, arr.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:44.147432802 +0100\n+++ /tmp/tmpsxetywyv.java\t2023-03-24 11:26:44.147432802 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : 0, arr.length;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "for (Integer i : arr.next;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:45.807426196 +0100\n+++ /tmp/tmpy0vixf9a.java\t2023-03-24 11:26:45.811426182 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : arr.next;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "for (Integer count : expression) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:47.547419269 +0100\n+++ /tmp/tmpz2qtbfmf.java\t2023-03-24 11:26:47.547419269 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : expression) {\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "for(Integer count : expression;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:49.303412280 +0100\n+++ /tmp/tmpao5i4ugm.java\t2023-03-24 11:26:49.303412280 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for(Integer count : expression;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "for (Integer count : defaultValue;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:50.967405657 +0100\n+++ /tmp/tmpjlnzad0r.java\t2023-03-24 11:26:50.967405657 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : defaultValue;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "for(Integer count : version) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:52.671398874 +0100\n+++ /tmp/tmp04opk7it.java\t2023-03-24 11:26:52.671398874 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for(Integer count : version) {\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "for (int i : count;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:54.415391933 +0100\n+++ /tmp/tmpur64oiru.java\t2023-03-24 11:26:54.415391933 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (int i : count;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "for (Integer count : 0; i < count;\");",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:56.091385259 +0100\n+++ /tmp/tmpspp42nbu.java\t2023-03-24 11:26:56.091385259 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : 0; i < count;\");\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "for (Integer count : 9; i < count;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:57.775378555 +0100\n+++ /tmp/tmppe0fzm3t.java\t2023-03-24 11:26:57.775378555 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : 9; i < count;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "for (Integer count : 0; i--) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:26:59.519371613 +0100\n+++ /tmp/tmphca8po96.java\t2023-03-24 11:26:59.523371597 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : 0; i--) {\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "for (Integer i : count; i < count;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:01.163365069 +0100\n+++ /tmp/tmp1cgir7q_.java\t2023-03-24 11:27:01.167365053 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : count; i < count;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "for (Integer i : this.arr.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:02.835358412 +0100\n+++ /tmp/tmp58fhj3pw.java\t2023-03-24 11:27:02.839358396 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : this.arr.length;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "for (Integer count : value; ) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:04.555351566 +0100\n+++ /tmp/tmpc0byroxp.java\t2023-03-24 11:27:04.555351566 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : value; ) {\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "for (Integer count : queues_arr;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:06.223344925 +0100\n+++ /tmp/tmpvll9spu7.java\t2023-03-24 11:27:06.223344925 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : queues_arr;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "for (Integer count : arr.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:07.847338459 +0100\n+++ /tmp/tmparpif1ts.java\t2023-03-24 11:27:07.851338444 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : arr.length;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "for(Integer count : 0;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:09.547331692 +0100\n+++ /tmp/tmp9olozl13.java\t2023-03-24 11:27:09.547331692 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for(Integer count : 0;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "for (Integer count : TOKEN_arr;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:11.283324780 +0100\n+++ /tmp/tmp8bvvyy_r.java\t2023-03-24 11:27:11.283324780 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : TOKEN_arr;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "for (Integer count : ANY_arr;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:13.007317917 +0100\n+++ /tmp/tmpjzva_6yo.java\t2023-03-24 11:27:13.007317917 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : ANY_arr;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "for (Integer i : value.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:14.631311451 +0100\n+++ /tmp/tmpc3t1k0af.java\t2023-03-24 11:27:14.631311451 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : value.length;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "for(Integer count : version.get(arr);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:16.307304778 +0100\n+++ /tmp/tmp_s4w8xu6.java\t2023-03-24 11:27:16.307304778 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for(Integer count : version.get(arr);\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "for (Integer count : tags.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:18.047297850 +0100\n+++ /tmp/tmp70235vu2.java\t2023-03-24 11:27:18.047297850 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : tags.length;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "for (Integer i : height;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:19.747291082 +0100\n+++ /tmp/tmpcc2v96b6.java\t2023-03-24 11:27:19.747291082 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : height;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "for(Integer count : Aggregate_arr;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:21.391284537 +0100\n+++ /tmp/tmp86ronyq1.java\t2023-03-24 11:27:21.391284537 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for(Integer count : Aggregate_arr;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "for (Integer count : 0; i < len;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:23.007278103 +0100\n+++ /tmp/tmpetm34iy3.java\t2023-03-24 11:27:23.007278103 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : 0; i < len;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "for (Integer count : LINE_arr;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:24.587271812 +0100\n+++ /tmp/tmpg6xi02gw.java\t2023-03-24 11:27:24.587271812 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : LINE_arr;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "for (Integer count : value.type;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:26.259265154 +0100\n+++ /tmp/tmpx1pe5aox.java\t2023-03-24 11:27:26.259265154 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : value.type;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "for (Integer i : arr.key;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:27.895258640 +0100\n+++ /tmp/tmpinouxhcq.java\t2023-03-24 11:27:27.899258625 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : arr.key;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "for (Integer count : op.id;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:29.583251919 +0100\n+++ /tmp/tmpmby5wg3u.java\t2023-03-24 11:27:29.587251903 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : op.id;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "for (Integer count :0, value;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:31.199245485 +0100\n+++ /tmp/tmp24wcl18r.java\t2023-03-24 11:27:31.199245485 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count :0, value;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "for(Integer count : arr.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:32.943238539 +0100\n+++ /tmp/tmpcknveiov.java\t2023-03-24 11:27:32.943238539 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for(Integer count : arr.length;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "for(Integer count : expressionCount;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:34.579232028 +0100\n+++ /tmp/tmpp87d724d.java\t2023-03-24 11:27:34.579232028 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for(Integer count : expressionCount;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "for (Integer i : this.arr.values;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:36.219225495 +0100\n+++ /tmp/tmpg0enblev.java\t2023-03-24 11:27:36.219225495 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : this.arr.values;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "for (Integer i : count; ) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:37.851218996 +0100\n+++ /tmp/tmpvwj5hhie.java\t2023-03-24 11:27:37.851218996 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : count; ) {\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "for (Integer count : versionText;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:39.451212625 +0100\n+++ /tmp/tmp9y7ujg12.java\t2023-03-24 11:27:39.451212625 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : versionText;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "for (Integer count : i; i < count;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:41.095206080 +0100\n+++ /tmp/tmpkvu2c5eu.java\t2023-03-24 11:27:41.095206080 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : i; i < count;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "for (Integer count :CONTENT_arr;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:42.683199755 +0100\n+++ /tmp/tmpt0uyvs0z.java\t2023-03-24 11:27:42.683199755 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count :CONTENT_arr;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "for (Integer i : count; i++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:44.339193159 +0100\n+++ /tmp/tmpoos7gv5x.java\t2023-03-24 11:27:44.339193159 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : count; i++) {\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "for (Integer count : expressionCount; i++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:46.059186310 +0100\n+++ /tmp/tmp35dgz6tl.java\t2023-03-24 11:27:46.059186310 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : expressionCount; i++) {\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "for (Integer i : this.arr.next;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:47.695179795 +0100\n+++ /tmp/tmpk4yxh6we.java\t2023-03-24 11:27:47.695179795 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : this.arr.next;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "for(Integer count : viewId;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:49.379173088 +0100\n+++ /tmp/tmphjo_8v8c.java\t2023-03-24 11:27:49.383173072 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for(Integer count : viewId;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "for (Integer count : view;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:51.023166541 +0100\n+++ /tmp/tmpp5wnn9a4.java\t2023-03-24 11:27:51.023166541 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : view;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "for(Integer count : value.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:52.707159834 +0100\n+++ /tmp/tmpi1kq_h74.java\t2023-03-24 11:27:52.711159818 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for(Integer count : value.length;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "for (Integer count : value.attributes;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:54.407153067 +0100\n+++ /tmp/tmpzwz88qp7.java\t2023-03-24 11:27:54.411153048 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : value.attributes;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "for (Integer count : 10);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:56.119146246 +0100\n+++ /tmp/tmpvwvqwrte.java\t2023-03-24 11:27:56.123146230 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : 10);\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "for (Integer count :0, value.type;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:57.835139412 +0100\n+++ /tmp/tmp9vgikiz1.java\t2023-03-24 11:27:57.835139412 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count :0, value.type;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "for (Integer count : name;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:27:59.507132755 +0100\n+++ /tmp/tmpdcek95qn.java\t2023-03-24 11:27:59.511132736 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : name;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "for (Integer count : 0; i i {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:28:01.151126205 +0100\n+++ /tmp/tmppyetnlf7.java\t2023-03-24 11:28:01.151126205 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : 0; i i {\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "for (Integer count : 1; i < count;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:28:02.843119466 +0100\n+++ /tmp/tmpalp6p4pu.java\t2023-03-24 11:28:02.843119466 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : 1; i < count;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "for(Integer count : uri;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:28:04.599112472 +0100\n+++ /tmp/tmpwkl_ihfp.java\t2023-03-24 11:28:04.599112472 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for(Integer count : uri;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "for (Integer count : i; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:28:06.503104889 +0100\n+++ /tmp/tmpmttzdja_.java\t2023-03-24 11:28:06.503104889 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : i; }\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "for (Integer count : id;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:28:08.179098213 +0100\n+++ /tmp/tmpjfsvbnv6.java\t2023-03-24 11:28:08.179098213 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : id;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "for (Integer count : got;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:28:09.915091298 +0100\n+++ /tmp/tmpg4qja92l.java\t2023-03-24 11:28:09.915091298 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : got;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "for(Integer count : version version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:28:11.675084288 +0100\n+++ /tmp/tmpgy7x8w_l.java\t2023-03-24 11:28:11.679084272 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for(Integer count : version version\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "for (Integer count : version version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:28:13.335077677 +0100\n+++ /tmp/tmpdivmm8zk.java\t2023-03-24 11:28:13.339077661 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : version version\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "for (Integer count : lastName;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:28:15.023070955 +0100\n+++ /tmp/tmpdo1acv5f.java\t2023-03-24 11:28:15.023070955 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : lastName;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "for (Integer count : version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:28:16.659064439 +0100\n+++ /tmp/tmpymqdrb8m.java\t2023-03-24 11:28:16.659064439 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : version\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "for(Integer count : 9;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:28:18.295057922 +0100\n+++ /tmp/tmplwde8__m.java\t2023-03-24 11:28:18.295057922 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for(Integer count : 9;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "for (Integer i : version;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:28:20.019051052 +0100\n+++ /tmp/tmplus5ylpp.java\t2023-03-24 11:28:20.023051036 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : version;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "for(Integer count : version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:28:21.643044586 +0100\n+++ /tmp/tmp7pex4p9s.java\t2023-03-24 11:28:21.643044586 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for(Integer count : version\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "for (Integer i : uri;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:28:23.331037859 +0100\n+++ /tmp/tmp_o_gc6ph.java\t2023-03-24 11:28:23.335037844 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer i : uri;\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "for (Integer count : \"$ {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bucketsort/java_programs/BUCKETSORT.java\t2023-03-24 11:28:25.003031199 +0100\n+++ /tmp/tmp1bysi4x0.java\t2023-03-24 11:28:25.003031199 +0100\n@@ -17,11 +17,11 @@\n             counts.set(x,counts.get(x)+1);\n         }\n \n         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer count : arr) { // arr is counts in fixed version\n+for (Integer count : \"$ {\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n         }\n \n         return sorted_arr;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "for (Integer count : counts) {"
    },
    "lis": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "longest = prefix + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:06.315105638 +0100\n+++ /tmp/tmps1g8b0g7.java\t2023-03-24 11:28:06.387105351 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = prefix + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "longest = length + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:08.191098165 +0100\n+++ /tmp/tmph2gn8rck.java\t2023-03-24 11:28:08.195098150 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = length + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "longest = i + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:12.191082234 +0100\n+++ /tmp/tmp1jhaccoh.java\t2023-03-24 11:28:12.191082234 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = i + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "longest = length / 2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:16.175066363 +0100\n+++ /tmp/tmpp9ducx3l.java\t2023-03-24 11:28:16.175066363 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = length / 2;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "longest = prefix_lengths + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:20.251050129 +0100\n+++ /tmp/tmptlixnvkz.java\t2023-03-24 11:28:20.251050129 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = prefix_lengths + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "longest = info.length + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:22.047042977 +0100\n+++ /tmp/tmpllegj85o.java\t2023-03-24 11:28:22.047042977 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = info.length + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "longest = length / 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:23.751036187 +0100\n+++ /tmp/tmpuww0djdw.java\t2023-03-24 11:28:23.751036187 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = length / 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "longest = annotations.length + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:27.703020446 +0100\n+++ /tmp/tmp009jpwzv.java\t2023-03-24 11:28:27.707020427 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = annotations.length + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "longest = value + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:29.739012332 +0100\n+++ /tmp/tmp2n83ycrt.java\t2023-03-24 11:28:29.739012332 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = value + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "longest = prefix_lengths;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:31.543005147 +0100\n+++ /tmp/tmpgp3tkonp.java\t2023-03-24 11:28:31.543005147 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = prefix_lengths;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "longest = origin.length + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:33.506997322 +0100\n+++ /tmp/tmphtwmljks.java\t2023-03-24 11:28:33.510997306 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = origin.length + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "longest = ident + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:35.330990056 +0100\n+++ /tmp/tmpanylc5pa.java\t2023-03-24 11:28:35.330990056 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = ident + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "longest = parent + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:37.058983171 +0100\n+++ /tmp/tmpxfjvolvn.java\t2023-03-24 11:28:37.058983171 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = parent + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "longest =AsIndex + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:38.834976096 +0100\n+++ /tmp/tmpce7v8e0v.java\t2023-03-24 11:28:38.846976049 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =AsIndex + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "longest =length + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:40.582969133 +0100\n+++ /tmp/tmpup1fyvc0.java\t2023-03-24 11:28:40.582969133 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =length + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "longest -= length + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:44.614953072 +0100\n+++ /tmp/tmpt0eej6yq.java\t2023-03-24 11:28:44.614953072 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest -= length + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "longest = prefix_opacity + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:48.750936590 +0100\n+++ /tmp/tmpmcwqhw9h.java\t2023-03-24 11:28:48.754936574 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = prefix_opacity + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "longest = bounds.length + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:50.594929243 +0100\n+++ /tmp/tmpqt1qoex_.java\t2023-03-24 11:28:50.594929243 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = bounds.length + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "longest = prefix_80 + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:52.398922056 +0100\n+++ /tmp/tmpdovadsj7.java\t2023-03-24 11:28:52.398922056 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = prefix_80 + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "longest = packagePrefix + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:54.234914741 +0100\n+++ /tmp/tmp6ey9ez2o.java\t2023-03-24 11:28:54.234914741 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = packagePrefix + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "longest = important + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:56.122907219 +0100\n+++ /tmp/tmpfbqflhvt.java\t2023-03-24 11:28:56.122907219 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = important + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "longest = prefix_lengths);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:57.950899935 +0100\n+++ /tmp/tmpdg2jl4du.java\t2023-03-24 11:28:57.950899935 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = prefix_lengths);\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "longest = cc + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:28:59.634893226 +0100\n+++ /tmp/tmpu1vn961a.java\t2023-03-24 11:28:59.634893226 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = cc + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "longest = parent parentStyle + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:01.534885655 +0100\n+++ /tmp/tmpy3ph86p5.java\t2023-03-24 11:29:01.534885655 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = parent parentStyle + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "longest =Arguments.length + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:03.258878788 +0100\n+++ /tmp/tmp4oa54bv2.java\t2023-03-24 11:29:03.258878788 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =Arguments.length + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "longest = namespaces + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:05.150871247 +0100\n+++ /tmp/tmp_i63on1y.java\t2023-03-24 11:29:05.150871247 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = namespaces + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "longest = neighbors.length + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:06.930864153 +0100\n+++ /tmp/tmp855hly3d.java\t2023-03-24 11:29:06.930864153 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = neighbors.length + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "longest = firstIndex + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:08.762856853 +0100\n+++ /tmp/tmpxy3ku0n1.java\t2023-03-24 11:29:08.762856853 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = firstIndex + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "longest = prefix_MOVE + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:10.558849696 +0100\n+++ /tmp/tmp3sfb6ttq.java\t2023-03-24 11:29:10.558849696 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = prefix_MOVE + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "longest = this.length + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:12.442842189 +0100\n+++ /tmp/tmppdv1y6q7.java\t2023-03-24 11:29:12.446842172 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = this.length + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "longest = 1 + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:14.266834920 +0100\n+++ /tmp/tmpvyq838nh.java\t2023-03-24 11:29:14.266834920 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = 1 + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "longest =prefix_lengths + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:18.274818950 +0100\n+++ /tmp/tmp8yws9zy7.java\t2023-03-24 11:29:18.274818950 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =prefix_lengths + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "longest = dc + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:20.170811393 +0100\n+++ /tmp/tmpqr31x28l.java\t2023-03-24 11:29:20.174811377 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = dc + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "longest = longest + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:21.894804522 +0100\n+++ /tmp/tmpo7qs181n.java\t2023-03-24 11:29:21.894804522 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = longest + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "longest =, length + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:25.874788662 +0100\n+++ /tmp/tmp3ino3hbe.java\t2023-03-24 11:29:25.878788647 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =, length + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "longest =button + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:27.498782190 +0100\n+++ /tmp/tmpfg6izoi0.java\t2023-03-24 11:29:27.498782190 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =button + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "longest = label + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:29.278775097 +0100\n+++ /tmp/tmpsvbgf26r.java\t2023-03-24 11:29:29.278775097 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = label + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "longest = count + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:31.074767939 +0100\n+++ /tmp/tmp9zjcxd65.java\t2023-03-24 11:29:31.074767939 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = count + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "longest = prefix_imitives + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:32.794761085 +0100\n+++ /tmp/tmppco1ine6.java\t2023-03-24 11:29:32.798761069 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = prefix_imitives + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "longest =Label + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:34.550754086 +0100\n+++ /tmp/tmp6eypgq3_.java\t2023-03-24 11:29:34.550754086 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =Label + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "longest = infoOffset + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:36.418746642 +0100\n+++ /tmp/tmpnvgvfsum.java\t2023-03-24 11:29:36.418746642 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = infoOffset + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "longest =URI + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:38.178739628 +0100\n+++ /tmp/tmpb1rn5_n0.java\t2023-03-24 11:29:38.178739628 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =URI + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "longest = tupleOffset + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:39.910732724 +0100\n+++ /tmp/tmp3modp29f.java\t2023-03-24 11:29:39.910732724 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = tupleOffset + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "longest = attrCount + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:41.674725694 +0100\n+++ /tmp/tmpve6lt62n.java\t2023-03-24 11:29:41.674725694 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = attrCount + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "longest = prefix_lengths * 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:43.514718360 +0100\n+++ /tmp/tmp_cck_a__.java\t2023-03-24 11:29:43.514718360 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = prefix_lengths * 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "longest = inCount + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:45.386710899 +0100\n+++ /tmp/tmpl2phzhg2.java\t2023-03-24 11:29:45.386710899 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = inCount + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "longest = infoIndex + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:47.134703932 +0100\n+++ /tmp/tmpr_zdku1j.java\t2023-03-24 11:29:47.138703917 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = infoIndex + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "longest = first + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:48.926696791 +0100\n+++ /tmp/tmp8eem6voy.java\t2023-03-24 11:29:48.926696791 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = first + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "longest = 2 + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:50.746689537 +0100\n+++ /tmp/tmpd_almnkd.java\t2023-03-24 11:29:50.750689519 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = 2 + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "longest = firstOffset + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:54.926673238 +0100\n+++ /tmp/tmplayyfvrl.java\t2023-03-24 11:29:54.930673224 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = firstOffset + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "longest = firstResult + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:56.722666746 +0100\n+++ /tmp/tmpjuk4gehi.java\t2023-03-24 11:29:56.722666746 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = firstResult + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "longest = fontPrefix + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:29:58.450660498 +0100\n+++ /tmp/tmprifs1lcu.java\t2023-03-24 11:29:58.454660484 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = fontPrefix + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "longest = serverCount + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:00.198654176 +0100\n+++ /tmp/tmp5_8vj74x.java\t2023-03-24 11:30:00.198654176 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = serverCount + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "longest = jpaOffset + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:01.990647692 +0100\n+++ /tmp/tmp4dg5exip.java\t2023-03-24 11:30:01.990647692 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = jpaOffset + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "longest = root + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:03.794641164 +0100\n+++ /tmp/tmp5wx5_9v9.java\t2023-03-24 11:30:03.794641164 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = root + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "longest = sum + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:05.546634821 +0100\n+++ /tmp/tmptye6eeo6.java\t2023-03-24 11:30:05.546634821 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = sum + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "longest = defaultOffset + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:07.310628433 +0100\n+++ /tmp/tmpxcx1o0cp.java\t2023-03-24 11:30:07.310628433 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = defaultOffset + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "longest = MessagesOffset + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:09.082622013 +0100\n+++ /tmp/tmph6bbnr2q.java\t2023-03-24 11:30:09.082622013 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = MessagesOffset + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "longest = fileSizePrefix + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:10.834615663 +0100\n+++ /tmp/tmp6fn7qq3u.java\t2023-03-24 11:30:10.834615663 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = fileSizePrefix + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "longest =WithPrefix + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:12.786608587 +0100\n+++ /tmp/tmp29qbzbab.java\t2023-03-24 11:30:12.786608587 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =WithPrefix + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "longest = isPrefix + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:14.518602307 +0100\n+++ /tmp/tmp5bwekzkl.java\t2023-03-24 11:30:14.518602307 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = isPrefix + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "longest =Ph + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:16.262595980 +0100\n+++ /tmp/tmpqf440gm6.java\t2023-03-24 11:30:16.262595980 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =Ph + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "longest = longestBit + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:18.066589434 +0100\n+++ /tmp/tmptyzznyta.java\t2023-03-24 11:30:18.066589434 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = longestBit + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "longest = otherOffset + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:19.962582552 +0100\n+++ /tmp/tmpm8j7uy0w.java\t2023-03-24 11:30:19.962582552 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = otherOffset + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "longest =ValueException + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:21.890575553 +0100\n+++ /tmp/tmptfu8i4is.java\t2023-03-24 11:30:21.890575553 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =ValueException + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "longest = host + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:23.742568825 +0100\n+++ /tmp/tmphxzkxy_f.java\t2023-03-24 11:30:23.742568825 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = host + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "longest = true + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:25.486562489 +0100\n+++ /tmp/tmpa973dnxc.java\t2023-03-24 11:30:25.486562489 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = true + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "longest =[1]) + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:27.334555774 +0100\n+++ /tmp/tmp9bukwxq_.java\t2023-03-24 11:30:27.334555774 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =[1]) + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "longest = index + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:28.954549884 +0100\n+++ /tmp/tmpjjnp9jmq.java\t2023-03-24 11:30:28.954549884 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = index + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "longest = Comment + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:30.706543513 +0100\n+++ /tmp/tmpc8ql3v9g.java\t2023-03-24 11:30:30.706543513 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = Comment + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "longest =params + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:32.550536805 +0100\n+++ /tmp/tmphekxm_zy.java\t2023-03-24 11:30:32.550536805 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =params + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "longest = val + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:34.474529803 +0100\n+++ /tmp/tmpy9f7b4o5.java\t2023-03-24 11:30:34.474529803 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = val + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "longest = SessionFactory + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:38.694514440 +0100\n+++ /tmp/tmp8xqqs0nx.java\t2023-03-24 11:30:38.694514440 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = SessionFactory + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "longest = jpa + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:40.482507927 +0100\n+++ /tmp/tmp_gie7ygb.java\t2023-03-24 11:30:40.482507927 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = jpa + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "longest =For + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:42.262501442 +0100\n+++ /tmp/tmpdweclakz.java\t2023-03-24 11:30:42.262501442 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =For + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "longest =Signature + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:44.022495027 +0100\n+++ /tmp/tmpc0qs7_ap.java\t2023-03-24 11:30:44.022495027 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =Signature + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "longest = methodName + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:45.726488814 +0100\n+++ /tmp/tmp2hokrwkv.java\t2023-03-24 11:30:45.726488814 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = methodName + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "longest = marker + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:47.526482250 +0100\n+++ /tmp/tmpj9nb5zlu.java\t2023-03-24 11:30:47.526482250 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = marker + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "longest =destination + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:49.210476107 +0100\n+++ /tmp/tmpjkdw92lv.java\t2023-03-24 11:30:49.210476107 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =destination + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "longest =Row + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:50.986469627 +0100\n+++ /tmp/tmpttpmznrs.java\t2023-03-24 11:30:50.986469627 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =Row + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "longest = factory + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:52.898462649 +0100\n+++ /tmp/tmpbi576pcw.java\t2023-03-24 11:30:52.902462633 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = factory + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "longest = df + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:54.698456076 +0100\n+++ /tmp/tmp28nmai2v.java\t2023-03-24 11:30:54.698456076 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = df + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "longest = 16 + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:30:56.514449445 +0100\n+++ /tmp/tmpfxp6nhl9.java\t2023-03-24 11:30:56.514449445 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = 16 + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "longest =Converters + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:31:00.606434491 +0100\n+++ /tmp/tmpvca3_nwf.java\t2023-03-24 11:31:00.606434491 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =Converters + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "longest =53 + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:31:02.434427809 +0100\n+++ /tmp/tmp4mqs7xt4.java\t2023-03-24 11:31:02.434427809 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =53 + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "longest = datatype + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:31:06.498412945 +0100\n+++ /tmp/tmpm9sbnn4_.java\t2023-03-24 11:31:06.498412945 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = datatype + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "longest =backgroundColor + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:31:08.290406388 +0100\n+++ /tmp/tmpl_2biptm.java\t2023-03-24 11:31:08.294406374 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =backgroundColor + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "longest = fieldType + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:31:10.130399653 +0100\n+++ /tmp/tmp468vpip7.java\t2023-03-24 11:31:10.130399653 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = fieldType + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "longest = orientation + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:31:11.894393196 +0100\n+++ /tmp/tmp6u21zzr4.java\t2023-03-24 11:31:12.126392345 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = orientation + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "longest = 19 + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:31:13.650386765 +0100\n+++ /tmp/tmp9j16m5af.java\t2023-03-24 11:31:13.654386750 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = 19 + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "longest = object + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:31:18.554368796 +0100\n+++ /tmp/tmpcynqu7c4.java\t2023-03-24 11:31:18.554368796 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = object + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "longest =prefix + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:31:20.210362724 +0100\n+++ /tmp/tmplkv4hsoi.java\t2023-03-24 11:31:20.210362724 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =prefix + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "longest = 31 + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:31:23.118352061 +0100\n+++ /tmp/tmpp40rc89n.java\t2023-03-24 11:31:23.118352061 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = 31 + 1;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "longest = prefix_opacity;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:31:27.206337061 +0100\n+++ /tmp/tmpraot88d3.java\t2023-03-24 11:31:27.210337047 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = prefix_opacity;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "longest = prefix_lengths * 2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:31:29.310329338 +0100\n+++ /tmp/tmperrxny6g.java\t2023-03-24 11:31:29.310329338 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = prefix_lengths * 2;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "longest = prefix_TOTAL;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:31:31.350321846 +0100\n+++ /tmp/tmpioctwn6q.java\t2023-03-24 11:31:31.350321846 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = prefix_TOTAL;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "longest = prefix_lengths[0];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:31:33.730313103 +0100\n+++ /tmp/tmp_k54n2xz.java\t2023-03-24 11:31:33.730313103 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = prefix_lengths[0];\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "longest =prefix_lengths;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:31:35.622306153 +0100\n+++ /tmp/tmpxgjw0sba.java\t2023-03-24 11:31:35.622306153 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest =prefix_lengths;\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "longest = 0:",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:31:37.702298507 +0100\n+++ /tmp/tmpyhrwkp4o.java\t2023-03-24 11:31:37.702298507 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+longest = 0:\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lis/java_programs/LIS.java\t2023-03-24 11:31:40.178289403 +0100\n+++ /tmp/tmp5ss5zwd0.java\t2023-03-24 11:31:40.178289403 +0100\n@@ -26,11 +26,11 @@\n \n             int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n \n             if (length == longest || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-                longest = length + 1;\n+\n             }\n \n             i++;\n         }\n         return longest;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "longest = Math.max(longest,length + 1);"
    },
    "knapsack": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "else if (j < memo.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:28:29.175014579 +0100\n+++ /tmp/tmpo0q0zjo_.java\t2023-03-24 11:28:29.247014292 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "else if (j < memo[j) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:28:33.470997465 +0100\n+++ /tmp/tmpshqfopeb.java\t2023-03-24 11:28:33.470997465 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[j) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "else if (j < memo[j]){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:28:35.186990630 +0100\n+++ /tmp/tmp9sd6r0ww.java\t2023-03-24 11:28:35.186990630 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[j]){\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "else if (j < memo[i][j;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:28:36.842984033 +0100\n+++ /tmp/tmp4onnwdf4.java\t2023-03-24 11:28:36.846984019 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[i][j;\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "else if (j < memo[j]) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:28:38.594977052 +0100\n+++ /tmp/tmpmrbqbrk_.java\t2023-03-24 11:28:38.594977052 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[j]) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "else if (j < memo[j]) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:28:40.414969802 +0100\n+++ /tmp/tmphw_ud3pj.java\t2023-03-24 11:28:40.414969802 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[j]) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "else if (j < Subscriber.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:28:42.118963014 +0100\n+++ /tmp/tmpm4pb2oex.java\t2023-03-24 11:28:42.118963014 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < Subscriber.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "else if (j < memo[j - 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:28:43.866956049 +0100\n+++ /tmp/tmp5j62_8t_.java\t2023-03-24 11:28:43.890955954 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[j - 1) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "else if (j <Contin.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:28:45.606949117 +0100\n+++ /tmp/tmp3sdjazsk.java\t2023-03-24 11:28:45.610949101 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <Contin.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "else if (j <quj) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:28:47.298942376 +0100\n+++ /tmp/tmpidemyb42.java\t2023-03-24 11:28:47.298942376 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <quj) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "else if (j < memo[j;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:28:49.014935539 +0100\n+++ /tmp/tmp_w1cjlin.java\t2023-03-24 11:28:49.018935524 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[j;\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "else if (i < memo.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:28:50.738928671 +0100\n+++ /tmp/tmpbk9gcl7h.java\t2023-03-24 11:28:50.738928671 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (i < memo.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "else if (j < maximum) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:28:54.690912925 +0100\n+++ /tmp/tmp26_fo4um.java\t2023-03-24 11:28:54.690912925 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < maximum) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "else if (j < getCurrent.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:28:56.410906072 +0100\n+++ /tmp/tmpijuyikbb.java\t2023-03-24 11:28:56.410906072 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < getCurrent.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "else if (j < data.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:28:58.090899380 +0100\n+++ /tmp/tmp6vtzhngm.java\t2023-03-24 11:28:58.094899361 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < data.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "else if (j <History.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:28:59.782892636 +0100\n+++ /tmp/tmp5bfkasee.java\t2023-03-24 11:28:59.782892636 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <History.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "else if (j < i) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:01.498885799 +0100\n+++ /tmp/tmptjxctgsq.java\t2023-03-24 11:29:01.498885799 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < i) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "else if (j < memo[i]) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:05.726868949 +0100\n+++ /tmp/tmptcyutuwy.java\t2023-03-24 11:29:05.726868949 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[i]) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "else if (j < out.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:07.434862144 +0100\n+++ /tmp/tmproid88pa.java\t2023-03-24 11:29:07.438862128 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < out.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "else if (j < memo.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:09.186855163 +0100\n+++ /tmp/tmpilo0oru5.java\t2023-03-24 11:29:09.186855163 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo.length;\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "else if (j < memo[i]) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:10.822848645 +0100\n+++ /tmp/tmpaf27fodr.java\t2023-03-24 11:29:10.822848645 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[i]) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "else if (j < memo[j; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:12.506841934 +0100\n+++ /tmp/tmp71l6osb8.java\t2023-03-24 11:29:12.506841934 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[j; }\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "else if (j <ANCH.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:14.194835207 +0100\n+++ /tmp/tmp722m_t7o.java\t2023-03-24 11:29:14.194835207 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <ANCH.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "else if (j!= j) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:15.966828146 +0100\n+++ /tmp/tmp8cb7kndl.java\t2023-03-24 11:29:15.966828146 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j!= j) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "else if (j < memo[i]){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:20.458810246 +0100\n+++ /tmp/tmptyc0o_8e.java\t2023-03-24 11:29:20.458810246 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[i]){\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "else if (j <MethodName.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:22.182803375 +0100\n+++ /tmp/tmpcodfcdec.java\t2023-03-24 11:29:22.182803375 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <MethodName.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "else if (j < result.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:23.914796473 +0100\n+++ /tmp/tmpxcx4coc8.java\t2023-03-24 11:29:23.914796473 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < result.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "else if (j < memo[i) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:25.674789459 +0100\n+++ /tmp/tmp30ew40x8.java\t2023-03-24 11:29:25.674789459 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[i) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "else if (j < identity.j) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:27.430782461 +0100\n+++ /tmp/tmpbins9b_w.java\t2023-03-24 11:29:27.430782461 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < identity.j) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "else if (j <Initialization.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:29.198775416 +0100\n+++ /tmp/tmpdwgjquh4.java\t2023-03-24 11:29:29.198775416 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <Initialization.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "else if (j < memo[i][j]",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:30.954768417 +0100\n+++ /tmp/tmpnd9loigw.java\t2023-03-24 11:29:30.954768417 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[i][j]\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "else if (j < endpoints.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:32.642761691 +0100\n+++ /tmp/tmpc822mhte.java\t2023-03-24 11:29:32.642761691 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < endpoints.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "else if (j <line) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:34.362754836 +0100\n+++ /tmp/tmp06r33c9v.java\t2023-03-24 11:29:34.362754836 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <line) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "else if (j < secretKey) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:36.258747279 +0100\n+++ /tmp/tmp7kgoxpex.java\t2023-03-24 11:29:36.258747279 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < secretKey) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "else if (j < trans.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:38.054740121 +0100\n+++ /tmp/tmp8a71s2v1.java\t2023-03-24 11:29:38.058740106 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < trans.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "else if (j < Al) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:39.774733267 +0100\n+++ /tmp/tmpw06e6rgz.java\t2023-03-24 11:29:39.774733267 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < Al) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "else if (j < 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:41.510726347 +0100\n+++ /tmp/tmpc45tjkqw.java\t2023-03-24 11:29:41.510726347 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < 1) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "else if (j <CURRENT.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:45.950708652 +0100\n+++ /tmp/tmpy2dhf4ao.java\t2023-03-24 11:29:45.950708652 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <CURRENT.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "else if (j <correlated) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:47.622701987 +0100\n+++ /tmp/tmprouq9rnx.java\t2023-03-24 11:29:47.622701987 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <correlated) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "else if (j <relation.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:49.334695164 +0100\n+++ /tmp/tmpjndipqai.java\t2023-03-24 11:29:49.362695051 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <relation.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "else if (j < memo[j]]) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:51.126688022 +0100\n+++ /tmp/tmp88476437.java\t2023-03-24 11:29:51.130688006 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[j]]) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "else if (j < memo[i; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:52.806681325 +0100\n+++ /tmp/tmpquo8lman.java\t2023-03-24 11:29:52.806681325 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[i; }\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "else if (j < memo[i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:54.494674799 +0100\n+++ /tmp/tmp_mm3rwed.java\t2023-03-24 11:29:54.494674799 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[i;\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "else if (j < based.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:56.170668741 +0100\n+++ /tmp/tmpvaczkdf0.java\t2023-03-24 11:29:56.174668727 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < based.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "else if (j < variant.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:57.874662581 +0100\n+++ /tmp/tmp0xveyjk5.java\t2023-03-24 11:29:57.874662581 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < variant.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "else if (j < include.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:29:59.606656317 +0100\n+++ /tmp/tmp8t25kjo8.java\t2023-03-24 11:29:59.606656317 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < include.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "else if (j < size) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:01.330650081 +0100\n+++ /tmp/tmprujlmoyp.java\t2023-03-24 11:30:01.330650081 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < size) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "else if (j <used.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:03.126643581 +0100\n+++ /tmp/tmpoeyf25wq.java\t2023-03-24 11:30:03.126643581 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <used.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "else if (j < identity.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:04.930637051 +0100\n+++ /tmp/tmpboge3wm7.java\t2023-03-24 11:30:04.930637051 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < identity.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "else if (j < memo[j]++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:06.670630750 +0100\n+++ /tmp/tmpi2rt2eor.java\t2023-03-24 11:30:06.670630750 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[j]++) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "else if (j <weight) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:08.390624519 +0100\n+++ /tmp/tmphoogrnrw.java\t2023-03-24 11:30:08.394624505 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <weight) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "else if (j <xx.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:12.670609007 +0100\n+++ /tmp/tmpo3ox5v3g.java\t2023-03-24 11:30:12.670609007 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <xx.length) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "else if (j < memoizedSize) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:14.406602713 +0100\n+++ /tmp/tmp21xw9ehn.java\t2023-03-24 11:30:14.406602713 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memoizedSize) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "else if (j < capacity) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:16.162596343 +0100\n+++ /tmp/tmpkp6ronzr.java\t2023-03-24 11:30:16.162596343 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < capacity) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "else if (j < memo[j]]){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:20.274581420 +0100\n+++ /tmp/tmprvut35p8.java\t2023-03-24 11:30:20.274581420 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[j]]){\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "else if (i!= j) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:21.934575392 +0100\n+++ /tmp/tmpgme5si0g.java\t2023-03-24 11:30:21.934575392 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (i!= j) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "else if (j < memo[j], value;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:26.126560163 +0100\n+++ /tmp/tmpnm_svnnm.java\t2023-03-24 11:30:26.126560163 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[j], value;\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "else if (j < memo[i];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:27.774554174 +0100\n+++ /tmp/tmpz8jdxd0c.java\t2023-03-24 11:30:27.778554158 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[i];\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "else if (j < '0') {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:29.446548096 +0100\n+++ /tmp/tmpkxobnyzm.java\t2023-03-24 11:30:29.450548080 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < '0') {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "else if (i < memo[j) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:33.542533195 +0100\n+++ /tmp/tmppw8zi6sa.java\t2023-03-24 11:30:33.542533195 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (i < memo[j) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "else if (j < expr expr[j) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:35.226527066 +0100\n+++ /tmp/tmpr7cfmru2.java\t2023-03-24 11:30:35.226527066 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < expr expr[j) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "else if (j < memo.j) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:36.842521183 +0100\n+++ /tmp/tmp_ptrl7wc.java\t2023-03-24 11:30:36.842521183 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo.j) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "else if (j <2.0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:38.718514352 +0100\n+++ /tmp/tmpvcl20lxk.java\t2023-03-24 11:30:38.718514352 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <2.0) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "else if (j < memo.length - 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:42.938498978 +0100\n+++ /tmp/tmpsa7h2fyj.java\t2023-03-24 11:30:42.938498978 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo.length - 1) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "else if (j < memo[i][j){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:47.282483139 +0100\n+++ /tmp/tmpyepti1t3.java\t2023-03-24 11:30:47.286483125 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[i][j){\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "else if (i < memo.length - 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:48.982476940 +0100\n+++ /tmp/tmp5ahqwsb6.java\t2023-03-24 11:30:48.986476924 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (i < memo.length - 1) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "else if (j < k) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:53.122461830 +0100\n+++ /tmp/tmps0cfu9_9.java\t2023-03-24 11:30:53.126461816 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < k) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "else if (j <atable) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:54.866455462 +0100\n+++ /tmp/tmpllwh8jje.java\t2023-03-24 11:30:54.870455448 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <atable) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "else if (j < memo[i]++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:56.598449136 +0100\n+++ /tmp/tmpirwal0ml.java\t2023-03-24 11:30:56.598449136 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[i]++) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "else if (j <namespace) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:30:58.330442809 +0100\n+++ /tmp/tmpogrjb6be.java\t2023-03-24 11:30:58.330442809 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <namespace) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "else if (j < partially) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:00.082436406 +0100\n+++ /tmp/tmpyauma7vx.java\t2023-03-24 11:31:00.082436406 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < partially) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "else if (j <Val) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:01.750430310 +0100\n+++ /tmp/tmpojn_2ouk.java\t2023-03-24 11:31:01.782430193 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <Val) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "else if (j < 127) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:03.526423816 +0100\n+++ /tmp/tmp5wiexi43.java\t2023-03-24 11:31:03.530423802 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < 127) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "else if (j < 13) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:07.862407955 +0100\n+++ /tmp/tmp0k13yrol.java\t2023-03-24 11:31:07.862407955 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < 13) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "else if (j < ct) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:13.630386837 +0100\n+++ /tmp/tmpxasi0ky4.java\t2023-03-24 11:31:13.634386823 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < ct) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "else if (j < C++j) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:15.770378999 +0100\n+++ /tmp/tmpfxbgh0ex.java\t2023-03-24 11:31:15.770378999 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < C++j) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "else if (j <Remove) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:17.494372680 +0100\n+++ /tmp/tmpe3yfmd1x.java\t2023-03-24 11:31:17.602372285 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <Remove) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "else if (j < lowest) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:20.166362887 +0100\n+++ /tmp/tmp70yhu0qj.java\t2023-03-24 11:31:20.166362887 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < lowest) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "else if (j < memo.length; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:22.550354144 +0100\n+++ /tmp/tmpba5uuigt.java\t2023-03-24 11:31:22.690353631 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo.length; }\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "else if (j < bytesRead) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:24.622346544 +0100\n+++ /tmp/tmpfji_tulu.java\t2023-03-24 11:31:24.622346544 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < bytesRead) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "else if (j <dot) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:26.654339088 +0100\n+++ /tmp/tmpn4j8kxvs.java\t2023-03-24 11:31:26.654339088 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <dot) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "else if (j < it[i) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:28.814331158 +0100\n+++ /tmp/tmp6r7kcciv.java\t2023-03-24 11:31:28.974330570 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < it[i) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "else if (j < m) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:30.882323565 +0100\n+++ /tmp/tmpuinvlci5.java\t2023-03-24 11:31:30.882323565 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < m) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "else if (j < weight) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:33.402314309 +0100\n+++ /tmp/tmp6vm4ailn.java\t2023-03-24 11:31:33.546313781 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < weight) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "else if (j < memo) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:38.426295844 +0100\n+++ /tmp/tmpm68gqwjc.java\t2023-03-24 11:31:38.426295844 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "else if (j < memo[j] {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:40.150289507 +0100\n+++ /tmp/tmpkhhfxelp.java\t2023-03-24 11:31:40.154289491 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[j] {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "else if (j < Border) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:42.278281679 +0100\n+++ /tmp/tmpiizo3wmp.java\t2023-03-24 11:31:42.406281208 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < Border) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "else if (j < oct) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:44.430273762 +0100\n+++ /tmp/tmp4gpi19hf.java\t2023-03-24 11:31:44.430273762 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < oct) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "else if (j < lat) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:46.758265194 +0100\n+++ /tmp/tmphcthhrnq.java\t2023-03-24 11:31:46.758265194 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < lat) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "else if (j < memo[i][j];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:48.482258847 +0100\n+++ /tmp/tmp5h72qwla.java\t2023-03-24 11:31:48.486258831 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[i][j];\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "else if (j < C++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:50.210252484 +0100\n+++ /tmp/tmp5u0zzrvt.java\t2023-03-24 11:31:50.210252484 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < C++) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "else if (j < memo[j];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:52.414244366 +0100\n+++ /tmp/tmpiw02y0dw.java\t2023-03-24 11:31:52.418244350 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < memo[j];\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "else if (j <OTTOM) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:54.370237157 +0100\n+++ /tmp/tmpl_tvob6p.java\t2023-03-24 11:31:54.722235860 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <OTTOM) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "else if (j > j) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:31:56.630228829 +0100\n+++ /tmp/tmp82opmtvm.java\t2023-03-24 11:31:56.630228829 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j > j) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "else if (j < removeListener) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:32:03.398203868 +0100\n+++ /tmp/tmph7q5jiz2.java\t2023-03-24 11:32:03.398203868 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < removeListener) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "else if (j < pixel) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:32:05.670195483 +0100\n+++ /tmp/tmp1xxv2ifc.java\t2023-03-24 11:32:05.890194671 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < pixel) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "else if (j < len) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:32:07.910187214 +0100\n+++ /tmp/tmpu986c9fg.java\t2023-03-24 11:32:07.914187198 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < len) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "else if (j <assandra) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:32:10.078179208 +0100\n+++ /tmp/tmp0oqnx33o.java\t2023-03-24 11:32:10.078179208 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j <assandra) {\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "else if (j < it[i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:32:12.298171007 +0100\n+++ /tmp/tmp6se4tb5b.java\t2023-03-24 11:32:12.298171007 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < it[i;\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "else if (j < largest[i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/knapsack/java_programs/KNAPSACK.java\t2023-03-24 11:32:14.430163130 +0100\n+++ /tmp/tmpl37ofq6x.java\t2023-03-24 11:32:14.430163130 +0100\n@@ -25,11 +25,11 @@\n             for (int j = 0; j <= capacity; j++)\n             {\n                 if (i == 0 || j == 0) {\n                     memo[i][j] = 0;\n                 }\n-                else if (weight < j) {\n+else if (j < largest[i;\n                     memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                 }\n                 else {\n                     memo[i][j] = memo [i-1][j];\n                 }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "else if (weight <= j) {"
    },
    "powerset": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "to_add.add(subset subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:31:47.750261542 +0100\n+++ /tmp/tmpc6ri91se.java\t2023-03-24 11:31:48.150260068 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "to_add.add(subset subset : rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:31:50.058253042 +0100\n+++ /tmp/tmp8rq6w1cb.java\t2023-03-24 11:31:50.178252601 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset subset : rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "to_add.add(subset);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:31:52.458244203 +0100\n+++ /tmp/tmplvgw5d0m.java\t2023-03-24 11:31:52.462244189 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "to_add.add(subsetsubset : rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:31:55.086234520 +0100\n+++ /tmp/tmp6hqotedt.java\t2023-03-24 11:31:55.086234520 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subsetsubset : rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "to_add.add(ArrayList subset : rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:31:56.858227987 +0100\n+++ /tmp/tmpfdwpxilp.java\t2023-03-24 11:31:56.862227973 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(ArrayList subset : rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "to_add.add(subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:31:58.854220628 +0100\n+++ /tmp/tmp0nss5m0k.java\t2023-03-24 11:31:58.906220437 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "to_add.add(subset subset, rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:01.114212292 +0100\n+++ /tmp/tmpmaswc9zo.java\t2023-03-24 11:32:01.222211895 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset subset, rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "to_add.add(storage subset : rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:03.666202879 +0100\n+++ /tmp/tmpptz4kr1a.java\t2023-03-24 11:32:03.666202879 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(storage subset : rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "to_add.add(FieldName subset : rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:05.682195438 +0100\n+++ /tmp/tmp6agavrdo.java\t2023-03-24 11:32:05.890194671 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(FieldName subset : rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "to_add.add(ip subset : rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:07.934187125 +0100\n+++ /tmp/tmp2ln0s8mm.java\t2023-03-24 11:32:07.934187125 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(ip subset : rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "to_add.add(atedated : rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:10.098179134 +0100\n+++ /tmp/tmp5fblz8zo.java\t2023-03-24 11:32:10.222178675 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(atedated : rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "to_add.add(mask subset : rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:12.322170920 +0100\n+++ /tmp/tmp5kpzehgx.java\t2023-03-24 11:32:12.322170920 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(mask subset : rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "to_add.add(getString subset : rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:14.450163056 +0100\n+++ /tmp/tmpy2msqmb2.java\t2023-03-24 11:32:14.454163040 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(getString subset : rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "to_add.add(subset subset, rest_subsets);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:16.414155797 +0100\n+++ /tmp/tmproinyd2i.java\t2023-03-24 11:32:16.418155781 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset subset, rest_subsets);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "to_add.add(20, subset : rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:19.058146021 +0100\n+++ /tmp/tmp0c0hzdqf.java\t2023-03-24 11:32:19.094145888 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(20, subset : rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "to_add.add(subset subset);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:21.494137011 +0100\n+++ /tmp/tmp50hz02zj.java\t2023-03-24 11:32:21.494137011 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset subset);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "to_add.add(define subset : rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:23.918128044 +0100\n+++ /tmp/tmp3h1l34_8.java\t2023-03-24 11:32:23.918128044 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(define subset : rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "to_add.add( Condition subset : rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:26.146119799 +0100\n+++ /tmp/tmp8kxy2ls8.java\t2023-03-24 11:32:26.282119295 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add( Condition subset : rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "to_add.add(deleted subset : rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:28.406111432 +0100\n+++ /tmp/tmpcp371wei.java\t2023-03-24 11:32:28.406111432 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(deleted subset : rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "to_add.add(10, subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:30.270104530 +0100\n+++ /tmp/tmp0frb2yjn.java\t2023-03-24 11:32:30.274104516 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(10, subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "to_add.add(queue subset : rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:32.194097404 +0100\n+++ /tmp/tmp9jt_uul6.java\t2023-03-24 11:32:32.194097404 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(queue subset : rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "to_add.add(ArrayList subset : restResponsesubsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:33.646092025 +0100\n+++ /tmp/tmp5g4amrl7.java\t2023-03-24 11:32:33.646092025 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(ArrayList subset : restResponsesubsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "to_add.add(subset subset : restResponsesubsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:35.690084450 +0100\n+++ /tmp/tmpz97gsl56.java\t2023-03-24 11:32:35.694084434 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset subset : restResponsesubsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "to_add.add(strategy);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:37.674077096 +0100\n+++ /tmp/tmpwxr2ay38.java\t2023-03-24 11:32:37.678077080 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(strategy);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "to_add.add(asList subset : rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:40.022068391 +0100\n+++ /tmp/tmp18xzilqu.java\t2023-03-24 11:32:40.074068199 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(asList subset : rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "to_add.add(10,10, subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:42.218060246 +0100\n+++ /tmp/tmp5d0rdbgr.java\t2023-03-24 11:32:42.378059653 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(10,10, subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "to_add.add(subsetsubset : replace_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:44.410052115 +0100\n+++ /tmp/tmp54wkgt_l.java\t2023-03-24 11:32:44.414052099 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subsetsubset : replace_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "to_add.add(subsetsubset : subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:46.958042659 +0100\n+++ /tmp/tmpswm_l6dm.java\t2023-03-24 11:32:47.358041174 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subsetsubset : subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "to_add.add(subsetsubset : from_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:49.434033469 +0100\n+++ /tmp/tmpmxqhka6q.java\t2023-03-24 11:32:49.434033469 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subsetsubset : from_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "to_add.add(mask subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:51.202026902 +0100\n+++ /tmp/tmppbwmkswg.java\t2023-03-24 11:32:51.202026902 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(mask subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "to_add.add(subset subset | rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:52.966020352 +0100\n+++ /tmp/tmp96z5pt0d.java\t2023-03-24 11:32:52.966020352 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset subset | rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "to_add.add( recursive subset : rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:54.470014765 +0100\n+++ /tmp/tmpvpn4ewy7.java\t2023-03-24 11:32:54.470014765 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add( recursive subset : rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "to_add.add(first);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:55.902009445 +0100\n+++ /tmp/tmp47ttn8_t.java\t2023-03-24 11:32:55.902009445 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(first);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "to_add.add(completed);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:57.494003528 +0100\n+++ /tmp/tmp9asvknem.java\t2023-03-24 11:32:57.494003528 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(completed);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "to_add.add(subsetcall : rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:32:59.077997641 +0100\n+++ /tmp/tmp8z93s8ww.java\t2023-03-24 11:32:59.077997641 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subsetcall : rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "to_add.add(output;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:00.625991885 +0100\n+++ /tmp/tmporgemkhp.java\t2023-03-24 11:33:00.625991885 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(output;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "to_add.add(INDEX_subsets);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:02.229985921 +0100\n+++ /tmp/tmpvqguch8t.java\t2023-03-24 11:33:02.233985908 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(INDEX_subsets);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "to_add.add(ipip, output;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:03.973979436 +0100\n+++ /tmp/tmp9cuc_461.java\t2023-03-24 11:33:03.973979436 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(ipip, output;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "to_add.add(subset!= subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:05.601973379 +0100\n+++ /tmp/tmp5yeuf58e.java\t2023-03-24 11:33:05.601973379 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset!= subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "to_add.add(subsetsubset : CURRENT_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:07.389966727 +0100\n+++ /tmp/tmpzzrsks9e.java\t2023-03-24 11:33:07.389966727 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subsetsubset : CURRENT_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "to_add.add(len);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:09.157960149 +0100\n+++ /tmp/tmp7ksygxj4.java\t2023-03-24 11:33:09.157960149 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(len);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "to_add.add(USE_subsets);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:11.005953269 +0100\n+++ /tmp/tmpxr2xsydh.java\t2023-03-24 11:33:11.009953253 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(USE_subsets);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "to_add.add(ANNOTATION_ADAPTER;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:13.133945346 +0100\n+++ /tmp/tmp06e9ztbo.java\t2023-03-24 11:33:13.133945346 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(ANNOTATION_ADAPTER;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "to_add.add(vc);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:14.905938746 +0100\n+++ /tmp/tmp7ei3mwdg.java\t2023-03-24 11:33:14.909938733 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(vc);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "to_add.add(ip, output;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:16.637932296 +0100\n+++ /tmp/tmpedrni10l.java\t2023-03-24 11:33:16.637932296 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(ip, output;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "to_add.add(updated subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:18.393925752 +0100\n+++ /tmp/tmpvbb4takx.java\t2023-03-24 11:33:18.397925738 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(updated subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "to_add.add(to_add);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:20.197919030 +0100\n+++ /tmp/tmpyiizahmc.java\t2023-03-24 11:33:20.197919030 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(to_add);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "to_add.add(subset subset : rest_subsets);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:21.741913276 +0100\n+++ /tmp/tmp20q4bzev.java\t2023-03-24 11:33:21.741913276 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset subset : rest_subsets);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "to_add.add(subset >= subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:23.229907729 +0100\n+++ /tmp/tmpd6_ilf9y.java\t2023-03-24 11:33:23.229907729 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset >= subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "to_add.add(DisplayName);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:24.629902508 +0100\n+++ /tmp/tmp_ze3eyy3.java\t2023-03-24 11:33:24.629902508 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(DisplayName);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "to_add.add( Bit subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:26.165896781 +0100\n+++ /tmp/tmp_rk_q43y.java\t2023-03-24 11:33:26.165896781 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add( Bit subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "to_add.add(COLUMNS_subsets, output;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:27.685891110 +0100\n+++ /tmp/tmp0_1iokge.java\t2023-03-24 11:33:27.689891097 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(COLUMNS_subsets, output;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "to_add.add( replace_subsets);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:29.185885516 +0100\n+++ /tmp/tmpcaj0jydq.java\t2023-03-24 11:33:29.185885516 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add( replace_subsets);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "to_add.add(subset subset[ rest_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:30.961878888 +0100\n+++ /tmp/tmpsccz_bxu.java\t2023-03-24 11:33:30.961878888 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset subset[ rest_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "to_add.add(subset | to_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:32.561872917 +0100\n+++ /tmp/tmppyy9u845.java\t2023-03-24 11:33:32.561872917 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset | to_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "to_add.add(ated;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:34.205866782 +0100\n+++ /tmp/tmp12r8tvdw.java\t2023-03-24 11:33:34.205866782 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(ated;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "to_add.add(subset 9;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:35.965860209 +0100\n+++ /tmp/tmpcfxra1fn.java\t2023-03-24 11:33:35.965860209 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset 9;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "to_add.add(subsetsubset : new subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:37.797853368 +0100\n+++ /tmp/tmpdvl5owoj.java\t2023-03-24 11:33:37.797853368 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subsetsubset : new subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "to_add.add(subsetsubset : restException;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:39.553846811 +0100\n+++ /tmp/tmppezxlt_h.java\t2023-03-24 11:33:39.557846795 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subsetsubset : restException;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "to_add.add(subset subset, to_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:41.221840579 +0100\n+++ /tmp/tmpb__si48k.java\t2023-03-24 11:33:41.221840579 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset subset, to_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "to_add.add(INDEX_subsets, output;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:42.933834182 +0100\n+++ /tmp/tmpkgrbrwap.java\t2023-03-24 11:33:42.937834168 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(INDEX_subsets, output;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "to_add.add( replace_subsets, output;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:44.677827665 +0100\n+++ /tmp/tmpld30472b.java\t2023-03-24 11:33:44.677827665 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add( replace_subsets, output;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "to_add.add(ip);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:46.269821715 +0100\n+++ /tmp/tmpxrt0su9w.java\t2023-03-24 11:33:46.273821699 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(ip);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "to_add.add(atedated : restResponsesubsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:48.133814746 +0100\n+++ /tmp/tmpz1s1mrx0.java\t2023-03-24 11:33:48.137814730 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(atedated : restResponsesubsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "to_add.add(subsetsubset : codec;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:49.849808328 +0100\n+++ /tmp/tmpkj78192z.java\t2023-03-24 11:33:49.849808328 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subsetsubset : codec;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "to_add.add(subsetsubset : with_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:51.461802299 +0100\n+++ /tmp/tmpi6lojg97.java\t2023-03-24 11:33:51.461802299 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subsetsubset : with_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "to_add.add(ipip;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:53.133796046 +0100\n+++ /tmp/tmpfg7bx4l4.java\t2023-03-24 11:33:53.133796046 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(ipip;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "to_add.add(COLUMNS_subsets); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:54.793789835 +0100\n+++ /tmp/tmp6ibdue9b.java\t2023-03-24 11:33:54.793789835 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(COLUMNS_subsets); }\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "to_add.add(subsetsubset : originalArrayList;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:56.465783578 +0100\n+++ /tmp/tmpmfvdw20d.java\t2023-03-24 11:33:56.465783578 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subsetsubset : originalArrayList;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "to_add.add(subsetsubset : to_subsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:58.165777215 +0100\n+++ /tmp/tmp6zt0wojo.java\t2023-03-24 11:33:58.165777215 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subsetsubset : to_subsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "to_add.add(USE_subsets, output;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:33:59.753771270 +0100\n+++ /tmp/tmp_kjas2rv.java\t2023-03-24 11:33:59.753771270 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(USE_subsets, output;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "to_add.add(subsetsubset : restResponsesubsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:01.401765098 +0100\n+++ /tmp/tmpf7rvhw_m.java\t2023-03-24 11:34:01.401765098 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subsetsubset : restResponsesubsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "to_add.add(pair subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:02.985759168 +0100\n+++ /tmp/tmpjhf8y5nu.java\t2023-03-24 11:34:02.989759152 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(pair subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "to_add.add(getString subset : restResponsesubsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:04.633752995 +0100\n+++ /tmp/tmpulgl3_2p.java\t2023-03-24 11:34:04.633752995 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(getString subset : restResponsesubsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "to_add.add(define subset : restResponsesubsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:06.249746942 +0100\n+++ /tmp/tmpyx9gayy0.java\t2023-03-24 11:34:06.249746942 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(define subset : restResponsesubsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "to_add.add(subset20, subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:07.913740706 +0100\n+++ /tmp/tmpjplhz83i.java\t2023-03-24 11:34:07.913740706 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset20, subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "to_add.add(completed;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:09.589734424 +0100\n+++ /tmp/tmp09n5wgqw.java\t2023-03-24 11:34:09.589734424 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(completed;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "to_add.add(radio);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:11.249728203 +0100\n+++ /tmp/tmpngo0vcbv.java\t2023-03-24 11:34:11.249728203 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(radio);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "to_add.add(AND_subsets);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:12.989721680 +0100\n+++ /tmp/tmpm3iefwx9.java\t2023-03-24 11:34:12.989721680 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(AND_subsets);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "to_add.add(subsetsubset : visited;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:14.801714886 +0100\n+++ /tmp/tmplra13ih7.java\t2023-03-24 11:34:14.801714886 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subsetsubset : visited;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "to_add.add(type subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:16.485708570 +0100\n+++ /tmp/tmp0bakuy7k.java\t2023-03-24 11:34:16.489708554 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(type subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "to_add.add(FieldName subset : restResponsesubsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:18.225702044 +0100\n+++ /tmp/tmpfdcqbx0f.java\t2023-03-24 11:34:18.229702027 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(FieldName subset : restResponsesubsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "to_add.add(MEDIA_subsets); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:19.989695424 +0100\n+++ /tmp/tmpdg71198_.java\t2023-03-24 11:34:19.989695424 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(MEDIA_subsets); }\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "to_add.add( getExpression);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:21.693689031 +0100\n+++ /tmp/tmpsmty5xsl.java\t2023-03-24 11:34:21.693689031 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add( getExpression);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "to_add.add(subsetsubset : bean;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:23.469682364 +0100\n+++ /tmp/tmp3mahdcu_.java\t2023-03-24 11:34:23.469682364 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subsetsubset : bean;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "to_add.add(ip subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:25.257675652 +0100\n+++ /tmp/tmpqn4u_u69.java\t2023-03-24 11:34:25.261675639 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(ip subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "to_add.add(on);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:26.949669302 +0100\n+++ /tmp/tmp2stsh0fp.java\t2023-03-24 11:34:26.949669302 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(on);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "to_add.add(subsetsubset : span;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:28.833662225 +0100\n+++ /tmp/tmpvcgt6g86.java\t2023-03-24 11:34:28.833662225 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subsetsubset : span;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "to_add.add(subset20,20, subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:30.517655900 +0100\n+++ /tmp/tmpxwk6dkk6.java\t2023-03-24 11:34:30.521655887 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset20,20, subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "to_add.add(fromVal : subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:32.193649605 +0100\n+++ /tmp/tmp8epzjuva.java\t2023-03-24 11:34:32.193649605 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(fromVal : subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "to_add.add(ArrayList subset : rest_subsets);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:33.925643098 +0100\n+++ /tmp/tmpjuztesw_.java\t2023-03-24 11:34:33.925643098 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(ArrayList subset : rest_subsets);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "to_add.add(subset subset, restResponsesubsets);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:35.633636678 +0100\n+++ /tmp/tmpioqdy22s.java\t2023-03-24 11:34:35.637636664 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset subset, restResponsesubsets);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "to_add.add(subsetsubset : isArrayList;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:37.313630366 +0100\n+++ /tmp/tmp2uob6fm1.java\t2023-03-24 11:34:37.313630366 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subsetsubset : isArrayList;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "to_add.add(apply);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:39.101623643 +0100\n+++ /tmp/tmpv1sitj6z.java\t2023-03-24 11:34:39.105623629 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(apply);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "to_add.add(subset subset, rest_subsets));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:40.909616845 +0100\n+++ /tmp/tmp0jhs856e.java\t2023-03-24 11:34:40.909616845 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset subset, rest_subsets));\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "to_add.add(subset allArrayList subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:42.565610618 +0100\n+++ /tmp/tmpplx6hxm7.java\t2023-03-24 11:34:42.565610618 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset allArrayList subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "to_add.add(subset subset subset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:44.145604674 +0100\n+++ /tmp/tmpdcq2pfbx.java\t2023-03-24 11:34:44.145604674 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset subset subset;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "to_add.add(queue subset : restResponsesubsets;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:45.589599242 +0100\n+++ /tmp/tmpx0d4p92a.java\t2023-03-24 11:34:45.593599229 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(queue subset : restResponsesubsets;\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "to_add.add( Arrays_add);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:47.021593856 +0100\n+++ /tmp/tmp80qhopet.java\t2023-03-24 11:34:47.025593839 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add( Arrays_add);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "to_add.add(subset subset, to_subsets);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/powerset/java_programs/POWERSET.java\t2023-03-24 11:34:48.569588031 +0100\n+++ /tmp/tmpdvyzlo19.java\t2023-03-24 11:34:48.569588031 +0100\n@@ -18,17 +18,11 @@\n             ArrayList rest = arr;\n             ArrayList<ArrayList> rest_subsets = powerset(rest);\n \n             ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n             ArrayList to_add = new ArrayList(100);\n-            to_add.add(first);\n-            for (ArrayList subset : rest_subsets) {\n-                to_add.addAll(subset);\n-            }\n-            output.add(to_add);\n-\n-            return output;\n+to_add.add(subset subset, to_subsets);\n         } else {\n             ArrayList empty_set = new ArrayList<ArrayList>();\n             empty_set.add(new ArrayList());\n             return empty_set;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "for (ArrayList subset : rest_subsets) { ArrayList r = new ArrayList(); r.add(first); r.addAll(subset); to_add.add(r); } output.addAll(to_add); rest_subsets.addAll(output); return rest_subsets;"
    },
    "sqrt": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "while (Math.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:32:18.902146599 +0100\n+++ /tmp/tmpk5whdupi.java\t2023-03-24 11:32:18.982146303 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "while (Math.abs(x-approx) > epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:32:24.518125824 +0100\n+++ /tmp/tmpgnp5iho3.java\t2023-03-24 11:32:24.518125824 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) > epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "while (Math.abs(x-approx) < epsilon;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:32:47.602040270 +0100\n+++ /tmp/tmpe5mpm9w2.java\t2023-03-24 11:32:47.606040254 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) < epsilon;\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "while (Math.abs(x-approx) >= epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:32:49.410033556 +0100\n+++ /tmp/tmp7ru1feup.java\t2023-03-24 11:32:49.410033556 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) >= epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "while (x-approx) > epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:33:14.377940712 +0100\n+++ /tmp/tmpu3jnmykg.java\t2023-03-24 11:33:14.377940712 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (x-approx) > epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "while (Math.abs(x-approx)!= epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:33:16.057934456 +0100\n+++ /tmp/tmpvtanpfx9.java\t2023-03-24 11:33:16.057934456 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx)!= epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "while (x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:33:38.113852188 +0100\n+++ /tmp/tmpvchikne4.java\t2023-03-24 11:33:38.113852188 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "while (Math.abs(x-approx) <= epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:33:39.729846152 +0100\n+++ /tmp/tmp57xhqfp2.java\t2023-03-24 11:33:39.729846152 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) <= epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "while (Math.abs(x-approx) > epsilon;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:33:43.685831373 +0100\n+++ /tmp/tmpv8xxj1xb.java\t2023-03-24 11:33:43.693831343 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) > epsilon;\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "while (Math.abs(x-approx) == epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:33:45.317825274 +0100\n+++ /tmp/tmpu80icb_c.java\t2023-03-24 11:33:45.317825274 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) == epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "while (x-approx)!= epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:33:49.141810977 +0100\n+++ /tmp/tmpams8k0uz.java\t2023-03-24 11:33:49.141810977 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (x-approx)!= epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "while (Math.abs(x-approx) >= epsilon;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:33:50.797804783 +0100\n+++ /tmp/tmpq7ehek2p.java\t2023-03-24 11:33:50.797804783 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) >= epsilon;\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "while (Connection.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:33:52.497798425 +0100\n+++ /tmp/tmp1h2kwbcd.java\t2023-03-24 11:33:52.497798425 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Connection.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "while (13.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:33:54.253791855 +0100\n+++ /tmp/tmpfz33arlu.java\t2023-03-24 11:33:54.253791855 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (13.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "while (truetrue-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:33:55.933785569 +0100\n+++ /tmp/tmptzy9wlf4.java\t2023-03-24 11:33:55.933785569 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (truetrue-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "while (x-approx) < epsilon;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:33:57.629779221 +0100\n+++ /tmp/tmpejl5fgw0.java\t2023-03-24 11:33:57.629779221 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (x-approx) < epsilon;\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "while (Math.abs(x-approx)!= epsilon;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:33:59.329772858 +0100\n+++ /tmp/tmpxafyszng.java\t2023-03-24 11:33:59.329772858 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx)!= epsilon;\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "while (Math.abs(x-approx) <= epsilon;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:00.973766703 +0100\n+++ /tmp/tmpry7benya.java\t2023-03-24 11:34:00.973766703 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) <= epsilon;\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "while ( getProvider.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:02.561760756 +0100\n+++ /tmp/tmpd3qr95il.java\t2023-03-24 11:34:02.565760740 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while ( getProvider.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "while (Bit.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:04.345754074 +0100\n+++ /tmp/tmp5vx8zh9t.java\t2023-03-24 11:34:04.345754074 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Bit.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "while (Feature.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:06.061747645 +0100\n+++ /tmp/tmpx85zarmb.java\t2023-03-24 11:34:06.061747645 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Feature.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "while (13.abs(x-approx) > epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:07.845740962 +0100\n+++ /tmp/tmp7vf3pywr.java\t2023-03-24 11:34:07.845740962 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (13.abs(x-approx) > epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "while (Math.abs(x-approx) > x) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:09.505734740 +0100\n+++ /tmp/tmp_trlho9_.java\t2023-03-24 11:34:09.505734740 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) > x) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "while (false.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:13.381720209 +0100\n+++ /tmp/tmpxzn__2my.java\t2023-03-24 11:34:13.381720209 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (false.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "while (Connection.abs(x-approx) > epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:15.045713971 +0100\n+++ /tmp/tmp9isx531o.java\t2023-03-24 11:34:15.045713971 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Connection.abs(x-approx) > epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "while (double.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:16.733707640 +0100\n+++ /tmp/tmp7g6lec7j.java\t2023-03-24 11:34:16.733707640 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (double.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "while ( getProvider.abs(x-approx) > epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:18.389701427 +0100\n+++ /tmp/tmpxj24mbn2.java\t2023-03-24 11:34:18.393701414 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while ( getProvider.abs(x-approx) > epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "while (Feature.abs(x-approx) > epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:20.101695004 +0100\n+++ /tmp/tmpjczjp3_r.java\t2023-03-24 11:34:20.101695004 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Feature.abs(x-approx) > epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "while (true.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:21.853688431 +0100\n+++ /tmp/tmph2oi9lm3.java\t2023-03-24 11:34:21.857688415 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (true.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "while (Group.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:23.641681721 +0100\n+++ /tmp/tmp5fwfokvw.java\t2023-03-24 11:34:23.641681721 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Group.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "while (Space.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:25.329675383 +0100\n+++ /tmp/tmpjyflh0a1.java\t2023-03-24 11:34:25.329675383 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Space.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "while ( getProvider.abs(x-approx) >= epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:27.061668879 +0100\n+++ /tmp/tmpwxy3wnrr.java\t2023-03-24 11:34:27.061668879 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while ( getProvider.abs(x-approx) >= epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "while (x-approx) <= epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:28.833662225 +0100\n+++ /tmp/tmponofptcr.java\t2023-03-24 11:34:28.833662225 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (x-approx) <= epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "while (x-approx) >= epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:30.429656231 +0100\n+++ /tmp/tmp3q_jj9le.java\t2023-03-24 11:34:30.433656218 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (x-approx) >= epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "while (inet.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:32.161649726 +0100\n+++ /tmp/tmp6w2dh9b8.java\t2023-03-24 11:34:32.161649726 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (inet.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "while (13.abs(x-approx) >= epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:33.945643023 +0100\n+++ /tmp/tmprc1gnjlx.java\t2023-03-24 11:34:33.945643023 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (13.abs(x-approx) >= epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "while (Node.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:35.625636710 +0100\n+++ /tmp/tmpr870m9qd.java\t2023-03-24 11:34:35.625636710 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Node.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "while (Arrays.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:37.429629927 +0100\n+++ /tmp/tmp7dk9zmrn.java\t2023-03-24 11:34:37.429629927 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Arrays.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "while (Math.abs(x-approx) > 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:34:39.165623403 +0100\n+++ /tmp/tmpxvqxwb3k.java\t2023-03-24 11:34:39.165623403 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) > 0) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "while (DONE.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:04.237529025 +0100\n+++ /tmp/tmpn9z6ujy6.java\t2023-03-24 11:35:04.241529009 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (DONE.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "while (Connection.abs(x-approx) >= epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:06.065522134 +0100\n+++ /tmp/tmpxc94mql0.java\t2023-03-24 11:35:06.065522134 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Connection.abs(x-approx) >= epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "while (NONE.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:07.773515695 +0100\n+++ /tmp/tmprn18clx_.java\t2023-03-24 11:35:07.793515620 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (NONE.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "while (double.abs(x-approx) > epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:09.377509646 +0100\n+++ /tmp/tmp89m6a2_q.java\t2023-03-24 11:35:09.377509646 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (double.abs(x-approx) > epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "while (Stats.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:11.013503477 +0100\n+++ /tmp/tmpl4v0sfom.java\t2023-03-24 11:35:11.013503477 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Stats.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "while (Bit.abs(x-approx) > epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:12.705497096 +0100\n+++ /tmp/tmp4gngqqr8.java\t2023-03-24 11:35:12.705497096 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Bit.abs(x-approx) > epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "while (13.abs(x-approx) < epsilon;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:14.349490893 +0100\n+++ /tmp/tmpftatvrst.java\t2023-03-24 11:35:14.353490879 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (13.abs(x-approx) < epsilon;\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "while (Space.abs(x-approx) > epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:15.925484948 +0100\n+++ /tmp/tmpxdavld18.java\t2023-03-24 11:35:15.925484948 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Space.abs(x-approx) > epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "while ( is.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:17.677478338 +0100\n+++ /tmp/tmpjrox70n_.java\t2023-03-24 11:35:17.677478338 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while ( is.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "while (Value.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:19.485471513 +0100\n+++ /tmp/tmpqf5hkit6.java\t2023-03-24 11:35:19.485471513 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Value.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "while (Math.abs(x-approx) > y) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:21.149465231 +0100\n+++ /tmp/tmpypm47_j4.java\t2023-03-24 11:35:21.153465218 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) > y) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "while (Feature.abs(x-approx) >= epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:22.925458526 +0100\n+++ /tmp/tmpxo0k64ou.java\t2023-03-24 11:35:22.925458526 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Feature.abs(x-approx) >= epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "while (source.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:24.665451956 +0100\n+++ /tmp/tmp7_xlxq2t.java\t2023-03-24 11:35:24.665451956 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (source.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "while (inet.abs(x-approx) >= epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:26.433445281 +0100\n+++ /tmp/tmpc4rd0eqn.java\t2023-03-24 11:35:26.433445281 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (inet.abs(x-approx) >= epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "while (ldap.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:28.165438739 +0100\n+++ /tmp/tmpe621iy5e.java\t2023-03-24 11:35:28.169438722 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (ldap.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "while ( direct.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:29.877432271 +0100\n+++ /tmp/tmpi7ueaq9f.java\t2023-03-24 11:35:29.877432271 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while ( direct.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "while (Math.abs(x-approx) > v) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:31.589425803 +0100\n+++ /tmp/tmpkmqch66b.java\t2023-03-24 11:35:31.589425803 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) > v) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "while (Math.abs(x-approx) > messageType) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:33.257419498 +0100\n+++ /tmp/tmpjoqo5x3b.java\t2023-03-24 11:35:33.257419498 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) > messageType) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "while (Math.abs(x-approx) > q) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:34.925413193 +0100\n+++ /tmp/tmpc2ywykmc.java\t2023-03-24 11:35:34.925413193 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) > q) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "while (Math.abs(x-approx) + epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:36.601406860 +0100\n+++ /tmp/tmpbmphhldo.java\t2023-03-24 11:35:36.601406860 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) + epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "while (Math.abs(x-approx) > eps) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:38.321400355 +0100\n+++ /tmp/tmp7w6ufjil.java\t2023-03-24 11:35:38.321400355 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) > eps) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "while (Ref.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:40.069393747 +0100\n+++ /tmp/tmplb1csy0m.java\t2023-03-24 11:35:40.069393747 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Ref.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "while (safe.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:41.713387528 +0100\n+++ /tmp/tmpdwg3_7ib.java\t2023-03-24 11:35:41.717387515 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (safe.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "while (Connection.abs(x-approx) < epsilon;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:43.445380977 +0100\n+++ /tmp/tmpumy8929b.java\t2023-03-24 11:35:43.445380977 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Connection.abs(x-approx) < epsilon;\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "while ( Preconditions.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:45.069374833 +0100\n+++ /tmp/tmpy5jlahmo.java\t2023-03-24 11:35:45.069374833 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while ( Preconditions.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "while (Group.abs(x-approx) >= epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:46.761368433 +0100\n+++ /tmp/tmpt3zu1nq1.java\t2023-03-24 11:35:46.761368433 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Group.abs(x-approx) >= epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "while (ies.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:48.429362120 +0100\n+++ /tmp/tmpc5d93w_t.java\t2023-03-24 11:35:48.429362120 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (ies.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "while ( bit.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:50.181355490 +0100\n+++ /tmp/tmpki7j_nk3.java\t2023-03-24 11:35:50.181355490 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while ( bit.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "while (ClassName.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:51.901348979 +0100\n+++ /tmp/tmp6tr1e1gi.java\t2023-03-24 11:35:51.901348979 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (ClassName.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "while (Metadata.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:53.629342436 +0100\n+++ /tmp/tmpaj7gnmg7.java\t2023-03-24 11:35:53.629342436 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Metadata.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "while (false.abs(x-approx) > epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:55.401335728 +0100\n+++ /tmp/tmpvlrhuuaz.java\t2023-03-24 11:35:55.401335728 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (false.abs(x-approx) > epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "while (x-approx) x > epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:57.097329304 +0100\n+++ /tmp/tmpgbga6bbo.java\t2023-03-24 11:35:57.097329304 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (x-approx) x > epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "while (Node.abs(x-approx) > epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:35:58.749323047 +0100\n+++ /tmp/tmp5zygr7n9.java\t2023-03-24 11:35:58.749323047 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Node.abs(x-approx) > epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "while (Symbol.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:00.605316018 +0100\n+++ /tmp/tmp0htrnm_9.java\t2023-03-24 11:36:00.605316018 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Symbol.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "while (ALLOWED.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:02.357309379 +0100\n+++ /tmp/tmpuh5_0u_0.java\t2023-03-24 11:36:02.357309379 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (ALLOWED.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "while (Math.abs(x-approx) > delta) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:04.153302574 +0100\n+++ /tmp/tmpq8hew079.java\t2023-03-24 11:36:04.153302574 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) > delta) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "while (TYPE.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:05.881296024 +0100\n+++ /tmp/tmpbc5cggze.java\t2023-03-24 11:36:05.881296024 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (TYPE.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "while (Space.abs(x-approx) >= epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:07.653289309 +0100\n+++ /tmp/tmpuumw7b1d.java\t2023-03-24 11:36:07.657289293 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Space.abs(x-approx) >= epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "while (K.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:09.389282728 +0100\n+++ /tmp/tmpxq778jky.java\t2023-03-24 11:36:09.389282728 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (K.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "while (candidates.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:11.057276404 +0100\n+++ /tmp/tmpdvekfoao.java\t2023-03-24 11:36:11.057276404 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (candidates.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "while (sin.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:12.777269881 +0100\n+++ /tmp/tmpmtc63cdc.java\t2023-03-24 11:36:12.777269881 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (sin.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "while (EOF.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:14.465263478 +0100\n+++ /tmp/tmpacpp0wqf.java\t2023-03-24 11:36:14.465263478 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (EOF.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "while (Descriptor.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:16.309256484 +0100\n+++ /tmp/tmp4v0ybsxx.java\t2023-03-24 11:36:16.309256484 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Descriptor.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "while (truetrue-approx) < epsilon;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:18.093249715 +0100\n+++ /tmp/tmp_pqtrmv0.java\t2023-03-24 11:36:18.093249715 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (truetrue-approx) < epsilon;\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "while (block.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:19.841243084 +0100\n+++ /tmp/tmpd6_819d_.java\t2023-03-24 11:36:19.841243084 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (block.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "while (Bit.abs(x-approx) >= epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:21.753235829 +0100\n+++ /tmp/tmpuwlm9jba.java\t2023-03-24 11:36:21.753235829 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Bit.abs(x-approx) >= epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "while (Stats.abs(x-approx) > epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:23.601228813 +0100\n+++ /tmp/tmp1xpij_ox.java\t2023-03-24 11:36:23.601228813 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Stats.abs(x-approx) > epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "while (true.abs(x-approx) >= epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:25.353222164 +0100\n+++ /tmp/tmpf97fximw.java\t2023-03-24 11:36:25.353222164 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (true.abs(x-approx) >= epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "while (Arrays.abs(x-approx) > epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:27.113215482 +0100\n+++ /tmp/tmpuhzvklya.java\t2023-03-24 11:36:27.113215482 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Arrays.abs(x-approx) > epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "while (ycles.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:28.865208828 +0100\n+++ /tmp/tmpv7ic4uti.java\t2023-03-24 11:36:28.865208828 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (ycles.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "while (x-approx) == epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:30.613202192 +0100\n+++ /tmp/tmphsvl0u89.java\t2023-03-24 11:36:30.613202192 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (x-approx) == epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "while (Math.abs(x-approx) + epsilon;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:32.305195764 +0100\n+++ /tmp/tmpud8dkqzc.java\t2023-03-24 11:36:32.309195748 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) + epsilon;\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "while (Node.abs(x-approx) >= epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:33.969189442 +0100\n+++ /tmp/tmp3mc98baj.java\t2023-03-24 11:36:33.969189442 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Node.abs(x-approx) >= epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "while (Math.abs(x-approx) > operand) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:35.769182603 +0100\n+++ /tmp/tmpm08m7m4i.java\t2023-03-24 11:36:35.769182603 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(x-approx) > operand) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "while (cos.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:37.489176068 +0100\n+++ /tmp/tmp8dw1fn8y.java\t2023-03-24 11:36:37.493176054 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (cos.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "while (U.abs(x-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:39.205169548 +0100\n+++ /tmp/tmpbyo0h5v6.java\t2023-03-24 11:36:39.205169548 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (U.abs(x-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "while (true-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:40.881163177 +0100\n+++ /tmp/tmp79238mnk.java\t2023-03-24 11:36:40.881163177 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (true-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "while (18dx-approx) < epsilon) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:42.605156624 +0100\n+++ /tmp/tmp83ysn0yt.java\t2023-03-24 11:36:42.605156624 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (18dx-approx) < epsilon) {\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "while (Feature.abs(x-approx) < epsilon;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:44.273150283 +0100\n+++ /tmp/tmpiauduxct.java\t2023-03-24 11:36:44.273150283 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Feature.abs(x-approx) < epsilon;\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "while ( getProvider.abs(x-approx) < epsilon;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:45.993143741 +0100\n+++ /tmp/tmplyqjj2yd.java\t2023-03-24 11:36:45.993143741 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while ( getProvider.abs(x-approx) < epsilon;\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "while (Math.abs(xx-approx) < epsilon;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sqrt/java_programs/SQRT.java\t2023-03-24 11:36:47.665137385 +0100\n+++ /tmp/tmpa00qld7r.java\t2023-03-24 11:36:47.665137385 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SQRT {\n     public static double sqrt(double x, double epsilon) {\n         double approx = x / 2d;\n-        while (Math.abs(x-approx) > epsilon) {\n+while (Math.abs(xx-approx) < epsilon;\n             approx = 0.5d * (approx + x / approx);\n         }\n         return approx;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "while (Math.abs(x-approx*approx) > epsilon) {"
    },
    "next_palindrome": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, count));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:34:52.397573623 +0100\n+++ /tmp/tmpr3dutyn5.java\t2023-03-24 11:34:52.461573382 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, count));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:34:54.053567387 +0100\n+++ /tmp/tmpnd_xmr8r.java\t2023-03-24 11:34:54.053567387 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 1;\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:34:55.701561183 +0100\n+++ /tmp/tmpnyb10fuh.java\t2023-03-24 11:34:55.701561183 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, 1));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, count);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:34:57.513554359 +0100\n+++ /tmp/tmpslfvuux8.java\t2023-03-24 11:34:57.513554359 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, count);\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, byteIndex));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:34:59.161548151 +0100\n+++ /tmp/tmpwpu5rpx5.java\t2023-03-24 11:34:59.161548151 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, byteIndex));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, byteLength));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:01.217540404 +0100\n+++ /tmp/tmpd165affx.java\t2023-03-24 11:35:01.221540391 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, byteLength));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, byteLength);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:03.261532703 +0100\n+++ /tmp/tmpu7gsl9si.java\t2023-03-24 11:35:03.261532703 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, byteLength);\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:05.025526054 +0100\n+++ /tmp/tmpxr27antv.java\t2023-03-24 11:35:05.025526054 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, byteLen));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:06.813519314 +0100\n+++ /tmp/tmpc5pmpeym.java\t2023-03-24 11:35:06.813519314 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, byteLen));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, byteCount));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:08.569512692 +0100\n+++ /tmp/tmpmc_ysgz4.java\t2023-03-24 11:35:08.569512692 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, byteCount));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, AUTO.length));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:10.349505980 +0100\n+++ /tmp/tmpli0nzjve.java\t2023-03-24 11:35:10.349505980 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, AUTO.length));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 4,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:12.145499207 +0100\n+++ /tmp/tmpgbxs4ecy.java\t2023-03-24 11:35:12.145499207 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 4,\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:13.825492872 +0100\n+++ /tmp/tmpeosar30f.java\t2023-03-24 11:35:13.825492872 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 1));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list.length, 0));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:15.661485944 +0100\n+++ /tmp/tmplcp_h813.java\t2023-03-24 11:35:15.661485944 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, byteLength)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:19.781470396 +0100\n+++ /tmp/tmpb_elh7lz.java\t2023-03-24 11:35:19.781470396 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, byteLength)\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list.length, 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:21.445464115 +0100\n+++ /tmp/tmpjw66mkbo.java\t2023-03-24 11:35:21.445464115 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list.length, 1));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 4));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:25.509448770 +0100\n+++ /tmp/tmpb5org8ks.java\t2023-03-24 11:35:25.521448725 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 4));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, count count));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:27.297442018 +0100\n+++ /tmp/tmplggzxbtq.java\t2023-03-24 11:35:27.297442018 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, count count));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, 0));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:28.965435717 +0100\n+++ /tmp/tmpxv56t9cm.java\t2023-03-24 11:35:28.965435717 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, 0));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, context.length));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:30.753428961 +0100\n+++ /tmp/tmpj23i00tc.java\t2023-03-24 11:35:30.753428961 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, context.length));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, next));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:32.565422114 +0100\n+++ /tmp/tmpphnsx5pm.java\t2023-03-24 11:35:32.565422114 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, next));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, count-1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:34.401415176 +0100\n+++ /tmp/tmpofviidbw.java\t2023-03-24 11:35:34.401415176 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, count-1));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "otherwise.addAll(Collections.length == 1){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:36.257408158 +0100\n+++ /tmp/tmpi87ag_ks.java\t2023-03-24 11:35:36.257408158 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length == 1){\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 1,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:38.081401265 +0100\n+++ /tmp/tmpol21wea9.java\t2023-03-24 11:35:38.085401249 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 1,\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "otherwise.addAll(Collections.length ==digit_list.length, 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:39.813394715 +0100\n+++ /tmp/tmp39oxyt5f.java\t2023-03-24 11:35:39.813394715 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length ==digit_list.length, 1;\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list.length, 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:41.489388375 +0100\n+++ /tmp/tmprh1unsmd.java\t2023-03-24 11:35:41.489388375 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list.length, 1;\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, count[0]));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:43.209381870 +0100\n+++ /tmp/tmp0gknpd2_.java\t2023-03-24 11:35:43.209381870 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, count[0]));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, count;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:44.957375257 +0100\n+++ /tmp/tmp5jtp5wxa.java\t2023-03-24 11:35:44.957375257 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, count;\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0. 0.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:46.601369037 +0100\n+++ /tmp/tmp4q78pmxu.java\t2023-03-24 11:35:46.601369037 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0. 0.\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, byteLen)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:48.313362560 +0100\n+++ /tmp/tmpg_vc_hv5.java\t2023-03-24 11:35:48.313362560 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, byteLen)\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, AUTO.length,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:50.025356080 +0100\n+++ /tmp/tmp6qiqx5oi.java\t2023-03-24 11:35:50.025356080 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, AUTO.length,\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, 20));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:51.749349555 +0100\n+++ /tmp/tmpqysgo80g.java\t2023-03-24 11:35:51.749349555 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, 20));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 16,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:53.509342892 +0100\n+++ /tmp/tmp0vi8ppq0.java\t2023-03-24 11:35:53.513342876 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 16,\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, jj));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:55.161336637 +0100\n+++ /tmp/tmpak8bzq5z.java\t2023-03-24 11:35:55.161336637 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, jj));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, deser));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:56.929329942 +0100\n+++ /tmp/tmpqqple5fk.java\t2023-03-24 11:35:56.929329942 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, deser));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:35:58.677323320 +0100\n+++ /tmp/tmpsdjx36t7.java\t2023-03-24 11:35:58.681323307 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 1);\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, AUTO.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:00.537316276 +0100\n+++ /tmp/tmph8ve5hmk.java\t2023-03-24 11:36:00.541316260 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, AUTO.length;\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, count)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:02.297309607 +0100\n+++ /tmp/tmp1nn71xfu.java\t2023-03-24 11:36:02.297309607 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, count)\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, MAX_VALUE));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:04.073302877 +0100\n+++ /tmp/tmp8be5w_3s.java\t2023-03-24 11:36:04.073302877 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, MAX_VALUE));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:05.837296193 +0100\n+++ /tmp/tmpwuh3dbm_.java\t2023-03-24 11:36:05.841296177 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0) {\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, true));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:07.637289370 +0100\n+++ /tmp/tmp32150az3.java\t2023-03-24 11:36:07.641289355 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, true));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 900,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:09.469282425 +0100\n+++ /tmp/tmpwb93l6qn.java\t2023-03-24 11:36:09.469282425 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 900,\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, byteOffset));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:11.201275858 +0100\n+++ /tmp/tmpyst3gd9e.java\t2023-03-24 11:36:11.201275858 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, byteOffset));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:12.997269048 +0100\n+++ /tmp/tmpytl7_5dg.java\t2023-03-24 11:36:12.997269048 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0;\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 8));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:14.649262782 +0100\n+++ /tmp/tmpjydu0kq9.java\t2023-03-24 11:36:14.649262782 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 8));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, status));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:16.365256272 +0100\n+++ /tmp/tmp2c9aszl3.java\t2023-03-24 11:36:16.369256256 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, status));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:18.165249442 +0100\n+++ /tmp/tmporb361fu.java\t2023-03-24 11:36:18.165249442 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0,\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, byteY));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:19.853243039 +0100\n+++ /tmp/tmpeu375zfb.java\t2023-03-24 11:36:19.853243039 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, byteY));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 80));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:21.693236057 +0100\n+++ /tmp/tmpjl6gjhdg.java\t2023-03-24 11:36:21.697236041 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 80));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "otherwise.addAll(Collections. trueCopies(digit_list, 0, 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:23.445229407 +0100\n+++ /tmp/tmpx4aw81pi.java\t2023-03-24 11:36:23.449229391 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections. trueCopies(digit_list, 0, 1));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, byteLen);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:25.313222314 +0100\n+++ /tmp/tmpkypymcox.java\t2023-03-24 11:36:25.313222314 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, byteLen);\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list,separatorChar));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:27.065215663 +0100\n+++ /tmp/tmpyf03cypq.java\t2023-03-24 11:36:27.065215663 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list,separatorChar));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 80 * 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:28.849208890 +0100\n+++ /tmp/tmpyvf9hbwn.java\t2023-03-24 11:36:28.849208890 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 80 * 1));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, ptr));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:30.709201825 +0100\n+++ /tmp/tmpb_awj7ls.java\t2023-03-24 11:36:30.713201812 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, ptr));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:32.481195096 +0100\n+++ /tmp/tmp23c6h1de.java\t2023-03-24 11:36:32.481195096 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 2);\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, cause;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:34.109188912 +0100\n+++ /tmp/tmpgc997sao.java\t2023-03-24 11:36:34.109188912 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, cause;\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "otherwise.addAll(Collections.xCopies(digit_list, 0, count));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:35.805182467 +0100\n+++ /tmp/tmp1y0ilr30.java\t2023-03-24 11:36:35.805182467 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.xCopies(digit_list, 0, count));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 10));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:37.525175931 +0100\n+++ /tmp/tmprvyjeua_.java\t2023-03-24 11:36:37.525175931 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 10));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 40));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:39.261169335 +0100\n+++ /tmp/tmpjx3jet98.java\t2023-03-24 11:36:39.261169335 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 40));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, context.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:41.033162600 +0100\n+++ /tmp/tmpfa4z8zt8.java\t2023-03-24 11:36:41.033162600 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, context.length;\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list,seedseed));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:42.709156229 +0100\n+++ /tmp/tmp9rhwxyne.java\t2023-03-24 11:36:42.709156229 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list,seedseed));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "otherwise.addAll(Collections.length,digit_list.length, 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:44.505149401 +0100\n+++ /tmp/tmpytktldu8.java\t2023-03-24 11:36:44.505149401 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length,digit_list.length, 1;\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "otherwise.addAll(Collections.length == == 1){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:46.093143362 +0100\n+++ /tmp/tmp84gvl3m9.java\t2023-03-24 11:36:46.093143362 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length == == 1){\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, UTF_8));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:47.773136974 +0100\n+++ /tmp/tmpuy6ejqso.java\t2023-03-24 11:36:47.773136974 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, UTF_8));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, status.length));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:49.521130326 +0100\n+++ /tmp/tmpmr_72367.java\t2023-03-24 11:36:49.525130310 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, status.length));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, modulus));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:51.729121925 +0100\n+++ /tmp/tmpcm3jy2c8.java\t2023-03-24 11:36:51.729121925 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, modulus));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, byteLength;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:53.673114530 +0100\n+++ /tmp/tmpcw1r8xkl.java\t2023-03-24 11:36:53.677114514 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, byteLength;\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 1, 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:55.357108122 +0100\n+++ /tmp/tmph9cjhgko.java\t2023-03-24 11:36:55.357108122 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 1, 1));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list.length, 4));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:36:57.153101287 +0100\n+++ /tmp/tmp4lpwnw7e.java\t2023-03-24 11:36:57.153101287 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list.length, 4));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:01.153086060 +0100\n+++ /tmp/tmplzgozwm5.java\t2023-03-24 11:37:01.153086060 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0){\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "otherwise.addAll(Collections.length - 1,digit_list.length, 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:02.849079604 +0100\n+++ /tmp/tmpq0x9h_0k.java\t2023-03-24 11:37:02.849079604 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length - 1,digit_list.length, 1;\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, byteLength",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:04.537073177 +0100\n+++ /tmp/tmpvne11pm1.java\t2023-03-24 11:37:04.541073160 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, byteLength\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0, C++",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:06.253066640 +0100\n+++ /tmp/tmpfc0yykro.java\t2023-03-24 11:37:06.253066640 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0, C++\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 63));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:07.945060198 +0100\n+++ /tmp/tmpuztr0pow.java\t2023-03-24 11:37:07.945060198 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 63));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "otherwise.addAll(Collections. trueCopies(digit_list, 0, count));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:09.697053524 +0100\n+++ /tmp/tmprky642uv.java\t2023-03-24 11:37:09.697053524 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections. trueCopies(digit_list, 0, count));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, successorIndex));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:11.461046803 +0100\n+++ /tmp/tmpxjpqz85b.java\t2023-03-24 11:37:11.461046803 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, successorIndex));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "otherwise.addAll(Collections.length == 1,digit_list.length, 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:13.301039792 +0100\n+++ /tmp/tmpm9537wn1.java\t2023-03-24 11:37:13.301039792 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length == 1,digit_list.length, 1;\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, 0.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:14.973033419 +0100\n+++ /tmp/tmprfm6fwak.java\t2023-03-24 11:37:14.973033419 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, 0.\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, ptr,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:16.677026926 +0100\n+++ /tmp/tmplq1s1a0e.java\t2023-03-24 11:37:16.677026926 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, ptr,\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "otherwise.addAll(Collections.length == == 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:18.317020675 +0100\n+++ /tmp/tmp4moeaem5.java\t2023-03-24 11:37:18.317020675 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length == == 1));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "otherwise.addAll(Collections.nCopies(digit_list, ZERO));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:19.905014621 +0100\n+++ /tmp/tmp_u6knzmc.java\t2023-03-24 11:37:19.905014621 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.nCopies(digit_list, ZERO));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "otherwise.addAll(Collections.length > 0, 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:21.681007848 +0100\n+++ /tmp/tmpsirrb5fs.java\t2023-03-24 11:37:21.681007848 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length > 0, 1));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "otherwise.addAll(Collections.length == 0, 3));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:23.337001535 +0100\n+++ /tmp/tmpvg8efef_.java\t2023-03-24 11:37:23.337001535 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length == 0, 3));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "otherwise.addAll(Collections.length > 0, 0));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:25.052994991 +0100\n+++ /tmp/tmpezdd4n8y.java\t2023-03-24 11:37:25.052994991 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length > 0, 0));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "otherwise.addAll(Collections.length == == 0));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:26.716988644 +0100\n+++ /tmp/tmp7z3kmsxh.java\t2023-03-24 11:37:26.716988644 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length == == 0));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "otherwise.addAll(Collections.length == 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:28.440982068 +0100\n+++ /tmp/tmpnoqw_c32.java\t2023-03-24 11:37:28.440982068 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length == 1));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "otherwise.addAll(Collections.length == 1)){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:30.004976101 +0100\n+++ /tmp/tmpy324ipzi.java\t2023-03-24 11:37:30.004976101 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length == 1)){\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "otherwise.addAll(Collections.length > 0, 3));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:31.644969844 +0100\n+++ /tmp/tmpkrossq4g.java\t2023-03-24 11:37:31.648969827 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length > 0, 3));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "otherwise.addAll(Collections.length == 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:33.304963510 +0100\n+++ /tmp/tmp5m_ucl8n.java\t2023-03-24 11:37:33.304963510 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length == 1) {\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "otherwise.addAll(Collections.length == 0, 0));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:34.880957495 +0100\n+++ /tmp/tmptrmg_ume.java\t2023-03-24 11:37:34.884957480 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length == 0, 0));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "otherwise.addAll(Collections.length > 0, 1];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:36.428951586 +0100\n+++ /tmp/tmp_1i2hkc8.java\t2023-03-24 11:37:36.432951572 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length > 0, 1];\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "otherwise.addAll(Collections.length == == == 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:37.972945693 +0100\n+++ /tmp/tmpu8xmh9ga.java\t2023-03-24 11:37:37.972945693 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length == == == 1));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "otherwise.addAll(Collections.length == 1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:39.556939646 +0100\n+++ /tmp/tmpasj4rr3_.java\t2023-03-24 11:37:39.556939646 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length == 1);\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "otherwise.addAll(Collections.length == 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:41.184933430 +0100\n+++ /tmp/tmp_ru3s5rx.java\t2023-03-24 11:37:41.184933430 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length == 0) {\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "otherwise.addAll(Collections.length == 1];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:42.796927274 +0100\n+++ /tmp/tmp2z3vqbgu.java\t2023-03-24 11:37:42.796927274 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length == 1];\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "otherwise.addAll(Collections.length == == 1 }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:44.400921150 +0100\n+++ /tmp/tmpqhclr5wv.java\t2023-03-24 11:37:44.400921150 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length == == 1 }\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "otherwise.addAll(Collections.length == 1, 3));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:46.004915024 +0100\n+++ /tmp/tmpxqffjeuq.java\t2023-03-24 11:37:46.008915008 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length == 1, 3));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "otherwise.addAll(Collections.length > 0, maxRetries;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:47.576909019 +0100\n+++ /tmp/tmpaf31wnzl.java\t2023-03-24 11:37:47.580909002 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length > 0, maxRetries;\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "otherwise.addAll(Collections.length == 0, 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:49.072903304 +0100\n+++ /tmp/tmpue7elpoj.java\t2023-03-24 11:37:49.072903304 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(Collections.length == 0, 1));\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "otherwise.addAll(digit_list.length, 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_palindrome/java_programs/NEXT_PALINDROME.java\t2023-03-24 11:37:50.680897160 +0100\n+++ /tmp/tmpzz_f_i_2.java\t2023-03-24 11:37:50.680897160 +0100\n@@ -30,11 +30,11 @@\n             }\n         }\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n         otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n+otherwise.addAll(digit_list.length, 1;\n         otherwise.add(1);\n \n         return String.valueOf(otherwise);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "otherwise.addAll(Collections.nCopies(digit_list.length-1, 0));"
    },
    "mergesort": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "if (arr.size() == 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:36:52.029120783 +0100\n+++ /tmp/tmpfqxd2_9t.java\t2023-03-24 11:36:52.049120709 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "if (arr.size() == 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:36:56.201104909 +0100\n+++ /tmp/tmpsjwqw4oc.java\t2023-03-24 11:36:56.201104909 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": true,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "if (arr.size() > 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:00.333089182 +0100\n+++ /tmp/tmp20tdks5s.java\t2023-03-24 11:37:00.337089168 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() > 0) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "if (arr.size()!= 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:04.465073451 +0100\n+++ /tmp/tmphjjkxdbu.java\t2023-03-24 11:37:04.465073451 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size()!= 0) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "if (arr.size() == 1 in correct version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:08.585057759 +0100\n+++ /tmp/tmpnu2kbban.java\t2023-03-24 11:37:08.589057743 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 1 in correct version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "if (arr.size() % 2 == 1 in correct version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:10.165051739 +0100\n+++ /tmp/tmpu3mb68sx.java\t2023-03-24 11:37:10.209051574 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() % 2 == 1 in correct version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "if (arr.size() < 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:11.789045552 +0100\n+++ /tmp/tmpxnbp7b0o.java\t2023-03-24 11:37:11.789045552 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() < 0) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "if (arr.size() == 2 {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:15.633030905 +0100\n+++ /tmp/tmpqqp20ixu.java\t2023-03-24 11:37:15.633030905 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 2 {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "if (arr.size() > 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:17.229024820 +0100\n+++ /tmp/tmpn62m0xxh.java\t2023-03-24 11:37:17.233024807 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() > 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "if (arr.size() % 2 == 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:21.193009710 +0100\n+++ /tmp/tmp7aou057u.java\t2023-03-24 11:37:21.197009693 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() % 2 == 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "if (arr.size() < 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:25.172994534 +0100\n+++ /tmp/tmpyihmatdx.java\t2023-03-24 11:37:25.172994534 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() < 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "if (arr.size() == 0) { // 2 bytes?",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:29.132979428 +0100\n+++ /tmp/tmpxa584tda.java\t2023-03-24 11:37:29.136979411 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0) { // 2 bytes?\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "if (arr.size() == 2 == 1 in correct version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:33.092964318 +0100\n+++ /tmp/tmp6y5_oue7.java\t2023-03-24 11:37:33.092964318 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 2 == 1 in correct version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "if (arr.size() == 2 && (1 == 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:34.700958181 +0100\n+++ /tmp/tmp4h0t_sfq.java\t2023-03-24 11:37:34.700958181 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 2 && (1 == 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "if (arr.size()!= 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:36.296952091 +0100\n+++ /tmp/tmpekzphg3k.java\t2023-03-24 11:37:36.300952074 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size()!= 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "if (arr.size() == 0) { // 2 position...",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:40.044937783 +0100\n+++ /tmp/tmp9s8hqmc2.java\t2023-03-24 11:37:40.044937783 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0) { // 2 position...\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "if (arr.size() < 2 == 1 in correct version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:43.792923472 +0100\n+++ /tmp/tmp9s3okx4w.java\t2023-03-24 11:37:43.792923472 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() < 2 == 1 in correct version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "if (arr.size() == 2 2 in correct version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:45.284917772 +0100\n+++ /tmp/tmp3b756xvo.java\t2023-03-24 11:37:45.288917759 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 2 2 in correct version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "if (arr.size() == 1 && arr < 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:46.840911830 +0100\n+++ /tmp/tmpnp1n1y7d.java\t2023-03-24 11:37:46.844911815 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 1 && arr < 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "if (arr.size() == 0) { // 2x...",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:48.484905550 +0100\n+++ /tmp/tmploxrvrou.java\t2023-03-24 11:37:48.484905550 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0) { // 2x...\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "if (arr.size() & 1) == 1 in correct version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:52.392890619 +0100\n+++ /tmp/tmpkw_uvwz2.java\t2023-03-24 11:37:52.392890619 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() & 1) == 1 in correct version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "if (arr.size() == 23) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:54.156883878 +0100\n+++ /tmp/tmprv2bb68n.java\t2023-03-24 11:37:54.156883878 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 23) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "if (arr.size() == 0) { // 2 bytes...",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:37:58.040869033 +0100\n+++ /tmp/tmps2p9ii2h.java\t2023-03-24 11:37:58.040869033 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0) { // 2 bytes...\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "if (arr.size() < 2 + 1 in correct version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:38:01.976853985 +0100\n+++ /tmp/tmpaidxkfr_.java\t2023-03-24 11:38:01.976853985 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() < 2 + 1 in correct version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "if (arr.size() == 1 && (1 == 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:38:03.704847377 +0100\n+++ /tmp/tmp_0ezds21.java\t2023-03-24 11:38:03.704847377 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 1 && (1 == 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "if (arr.size() == 0) { // 2",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:38:05.040842268 +0100\n+++ /tmp/tmpwaw9_s1k.java\t2023-03-24 11:38:05.040842268 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0) { // 2\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "if (arr.size == 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:38:08.356829585 +0100\n+++ /tmp/tmph8i6orp3.java\t2023-03-24 11:38:08.360829569 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size == 0) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "if (arr.size() == 2 + 1 in correct version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:38:09.740824290 +0100\n+++ /tmp/tmp_2c6vqii.java\t2023-03-24 11:38:09.740824290 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 2 + 1 in correct version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "if (arr.size() == 0) { // 1 is path",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:38:11.296818337 +0100\n+++ /tmp/tmpop95iuku.java\t2023-03-24 11:38:11.296818337 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0) { // 1 is path\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "if (arr.size() == 0) { // 1 is node",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:38:15.244803229 +0100\n+++ /tmp/tmp5rsakdhu.java\t2023-03-24 11:38:15.244803229 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0) { // 1 is node\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "if (arr.size() >= 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:38:19.048788669 +0100\n+++ /tmp/tmpgj2tjm5k.java\t2023-03-24 11:38:19.048788669 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() >= 0) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "if (arr.size() == 2 && 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:38:22.724774596 +0100\n+++ /tmp/tmpo72ib2ty.java\t2023-03-24 11:38:22.728774580 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 2 && 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "if (arr.size()== 2 == 1 in correct version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:38:24.328768454 +0100\n+++ /tmp/tmpa7unu8fr.java\t2023-03-24 11:38:24.328768454 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size()== 2 == 1 in correct version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "if (arr.size() == 0) { // 2 bytes total",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:38:25.948762250 +0100\n+++ /tmp/tmp6kukt02y.java\t2023-03-24 11:38:25.952762235 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0) { // 2 bytes total\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "if (arr.size() == 2 && 1 == 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:38:29.572748370 +0100\n+++ /tmp/tmpdpp4zqgn.java\t2023-03-24 11:38:29.572748370 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 2 && 1 == 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "if (arr.size() == 0x00) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:38:35.520725580 +0100\n+++ /tmp/tmp3luho_6d.java\t2023-03-24 11:38:35.520725580 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0x00) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "if (arr.size() == 0) { // 1 is needed",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:38:58.424637747 +0100\n+++ /tmp/tmp3rz72wgp.java\t2023-03-24 11:38:58.424637747 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0) { // 1 is needed\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "if (arr.size() ==[4 == 1 in correct version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:39:19.472556926 +0100\n+++ /tmp/tmpmshie9es.java\t2023-03-24 11:39:19.472556926 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() ==[4 == 1 in correct version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "if (arr.size() == 2 ) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:39:28.384522674 +0100\n+++ /tmp/tmprfubdwuu.java\t2023-03-24 11:39:28.384522674 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 2 ) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "if (arr.size() == 0) { // 2 bytes:",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:39:49.016443317 +0100\n+++ /tmp/tmp2suolg8i.java\t2023-03-24 11:39:49.016443317 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0) { // 2 bytes:\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "if (arr.size() 1 == 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:40:08.432368554 +0100\n+++ /tmp/tmp5q80pnvw.java\t2023-03-24 11:40:08.432368554 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() 1 == 0) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "if (arr.size() == 0) { // 1 is does",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:40:15.956339563 +0100\n+++ /tmp/tmp7azmvjmg.java\t2023-03-24 11:40:15.956339563 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0) { // 1 is does\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "if (arr.size() == 0) { // 1 is number",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:40:34.164269352 +0100\n+++ /tmp/tmpyjxp0sv_.java\t2023-03-24 11:40:34.164269352 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0) { // 1 is number\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "if (arr.size() == == 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:40:51.552202250 +0100\n+++ /tmp/tmp01fztx10.java\t2023-03-24 11:40:51.552202250 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == == 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "if (arr.size() == 0 in correct version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:40:57.632178771 +0100\n+++ /tmp/tmp2uudfe3w.java\t2023-03-24 11:40:57.632178771 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0 in correct version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "if (arr.size()== 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:41:03.408156463 +0100\n+++ /tmp/tmp5k_zkoq6.java\t2023-03-24 11:41:03.408156463 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size()== 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": true,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "if (arr.size() == 2 == 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:41:17.416102329 +0100\n+++ /tmp/tmpf2f8zwko.java\t2023-03-24 11:41:17.416102329 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 2 == 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "if (arr.size() == 0) { // 2 bits",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:41:23.084080418 +0100\n+++ /tmp/tmpkjlqe25i.java\t2023-03-24 11:41:23.084080418 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0) { // 2 bits\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "if (arr.size() == 1 && arr;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:41:37.196025834 +0100\n+++ /tmp/tmp37dfmm0k.java\t2023-03-24 11:41:37.196025834 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 1 && arr;\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "if (arr.size()== 2 == 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:41:42.724004445 +0100\n+++ /tmp/tmp85dk_bdg.java\t2023-03-24 11:41:42.724004445 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size()== 2 == 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "if (arr.size()> 2 == 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:41:48.515982029 +0100\n+++ /tmp/tmpl5u_81wo.java\t2023-03-24 11:41:48.515982029 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size()> 2 == 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "if (arr.size() == 1 ) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:41:53.951960984 +0100\n+++ /tmp/tmp9zsul8j9.java\t2023-03-24 11:41:53.951960984 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 1 ) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": true,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "if (arr.size() < 2 in correct version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:42:07.407908871 +0100\n+++ /tmp/tmpcrz8bv0a.java\t2023-03-24 11:42:07.407908871 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() < 2 in correct version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "if (arr.size() == 0) { // use source",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:42:12.291889947 +0100\n+++ /tmp/tmpgjl8pmrq.java\t2023-03-24 11:42:12.291889947 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0) { // use source\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "if (arr.size() > 2 in correct version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:42:22.363850915 +0100\n+++ /tmp/tmptsmgsnl5.java\t2023-03-24 11:42:22.363850915 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() > 2 in correct version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "if (arr.size() - 1 == 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:42:26.739833951 +0100\n+++ /tmp/tmpz4vy9zwp.java\t2023-03-24 11:42:26.743833935 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() - 1 == 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "if (arr.size() == 2 && closeCard version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:42:36.047797858 +0100\n+++ /tmp/tmpemgfdpgt.java\t2023-03-24 11:42:36.047797858 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 2 && closeCard version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "if (arr.size()() == 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:42:39.655783864 +0100\n+++ /tmp/tmpztw3jetg.java\t2023-03-24 11:42:39.655783864 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size()() == 0) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "if (arr.size() == 1 && && arr;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:42:43.007770861 +0100\n+++ /tmp/tmphmjz5cw_.java\t2023-03-24 11:42:43.007770861 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 1 && && arr;\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "if (arr.size() == 2 in correct version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:42:46.675756630 +0100\n+++ /tmp/tmpkrbttroy.java\t2023-03-24 11:42:46.675756630 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 2 in correct version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "if (arr.size()== 2 in correct version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:42:49.879744198 +0100\n+++ /tmp/tmpoeruczzw.java\t2023-03-24 11:42:49.883744182 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size()== 2 in correct version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "if (arr.size() == 0x05) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:42:52.851732664 +0100\n+++ /tmp/tmp8_t8rw02.java\t2023-03-24 11:42:52.851732664 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0x05) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "if (arr.size() == 2 && (right;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:42:59.639706318 +0100\n+++ /tmp/tmpp7y0l5m_.java\t2023-03-24 11:42:59.643706303 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 2 && (right;\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "if (arr.size() == 0 ) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:01.851697731 +0100\n+++ /tmp/tmpa0tr81qw.java\t2023-03-24 11:43:01.851697731 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0 ) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "if (arr.size() == 2 - 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:07.191676998 +0100\n+++ /tmp/tmplzy34dzd.java\t2023-03-24 11:43:07.191676998 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 2 - 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": true,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "if (arr.size() > 1 in correct version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:11.791659135 +0100\n+++ /tmp/tmpq9dy0ivf.java\t2023-03-24 11:43:11.795659120 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() > 1 in correct version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "if (arr.size() == 0) { // 28)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:13.663651865 +0100\n+++ /tmp/tmpvq0wm1l9.java\t2023-03-24 11:43:13.663651865 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 0) { // 28)\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "if (arr.size() == 1 &&! version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:18.431633345 +0100\n+++ /tmp/tmpuv0avsf_.java\t2023-03-24 11:43:18.435633329 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 1 &&! version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "if (arr.size() == 2]) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:20.371625808 +0100\n+++ /tmp/tmp_ovdy8gj.java\t2023-03-24 11:43:20.375625793 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 2]) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "if (arr.size() == 2 &&! version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:22.307618288 +0100\n+++ /tmp/tmpnegjiksh.java\t2023-03-24 11:43:22.307618288 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 2 &&! version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "if (arr.size() == 1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:24.315610487 +0100\n+++ /tmp/tmpo0q9mek5.java\t2023-03-24 11:43:24.315610487 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 1)) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "if (arr.size() == 1 && 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:26.087603602 +0100\n+++ /tmp/tmpwmrl2bxf.java\t2023-03-24 11:43:26.087603602 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 1 && 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "if (arr.size() - 1 == 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:28.087595828 +0100\n+++ /tmp/tmpuzmfm9tc.java\t2023-03-24 11:43:28.087595828 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() - 1 == 0) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": true,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "if (augment.size() == 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:32.791577550 +0100\n+++ /tmp/tmpjp3b9hk1.java\t2023-03-24 11:43:32.791577550 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (augment.size() == 0) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "if (arr.size() < 2 == 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:34.807569714 +0100\n+++ /tmp/tmplgz626ik.java\t2023-03-24 11:43:34.807569714 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() < 2 == 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "if (arr.size() == 1 == 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:36.503563122 +0100\n+++ /tmp/tmp38qusk6k.java\t2023-03-24 11:43:36.503563122 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 1 == 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "if (arr.size() == 1]) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:38.239556372 +0100\n+++ /tmp/tmpavk90m8h.java\t2023-03-24 11:43:38.239556372 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 1]) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "if (arr.size() == byteLen) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:39.871550029 +0100\n+++ /tmp/tmpr7z5mtqc.java\t2023-03-24 11:43:39.875550012 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == byteLen) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "if (arr.size() < 2 - 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:41.659543079 +0100\n+++ /tmp/tmphqjz_vcb.java\t2023-03-24 11:43:41.659543079 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() < 2 - 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "if (arr.size() == 2 && arr;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:46.215525366 +0100\n+++ /tmp/tmpybt6c439.java\t2023-03-24 11:43:46.215525366 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 2 && arr;\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "if (arr.size() == 2) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:47.927518708 +0100\n+++ /tmp/tmp_vggf7cj.java\t2023-03-24 11:43:47.927518708 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 2) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "if (arr.size()== 23) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:52.527500820 +0100\n+++ /tmp/tmp82hhz9jh.java\t2023-03-24 11:43:52.527500820 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size()== 23) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "if (arr.size()0 == 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:57.007483395 +0100\n+++ /tmp/tmp581emxuj.java\t2023-03-24 11:43:57.007483395 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size()0 == 0) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "if (arr.size() == 1 means {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:43:58.707476783 +0100\n+++ /tmp/tmp92254ym7.java\t2023-03-24 11:43:58.711476768 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 1 means {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "if (arr.size() == 13) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:44:00.471469921 +0100\n+++ /tmp/tmp7iyrbrl5.java\t2023-03-24 11:44:00.471469921 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 13) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "if (arr.size()== 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:44:04.971452414 +0100\n+++ /tmp/tmpljlw616j.java\t2023-03-24 11:44:04.971452414 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size()== 0) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "if (arr.size == 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:44:09.131436227 +0100\n+++ /tmp/tmp0_3wh2xf.java\t2023-03-24 11:44:09.131436227 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size == 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "if (arr.size() == 2 \\\" version",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:44:10.875429442 +0100\n+++ /tmp/tmplmbc4h8q.java\t2023-03-24 11:44:10.879429426 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 2 \\\" version\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "if (infoinfo.size() == 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:44:12.591422764 +0100\n+++ /tmp/tmpdzhb6678.java\t2023-03-24 11:44:12.639422576 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (infoinfo.size() == 0) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "if (arr.size() < 23) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:44:14.367415852 +0100\n+++ /tmp/tmp1atu8keu.java\t2023-03-24 11:44:14.367415852 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() < 23) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "if (arr.size() == date) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:44:18.267400673 +0100\n+++ /tmp/tmp5e9qygaz.java\t2023-03-24 11:44:18.267400673 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == date) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "if (arr.size() == 1){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:44:19.695395115 +0100\n+++ /tmp/tmpe80vhf_5.java\t2023-03-24 11:44:19.695395115 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 1){\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": true,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "if (arr.size() > 2 ) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:44:23.743379357 +0100\n+++ /tmp/tmpz8x0h305.java\t2023-03-24 11:44:23.743379357 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() > 2 ) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "if (arr.size() == 1 {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:44:27.731363831 +0100\n+++ /tmp/tmp80u07nzj.java\t2023-03-24 11:44:27.731363831 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 1 {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "if (arr.size() == 21) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:44:29.343357551 +0100\n+++ /tmp/tmpaaotbsxs.java\t2023-03-24 11:44:29.343357551 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 21) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "if (multi version.size() == 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:44:33.423341664 +0100\n+++ /tmp/tmp8l73cvuf.java\t2023-03-24 11:44:33.423341664 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (multi version.size() == 0) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "if (arr.size() == 31) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:44:35.139334984 +0100\n+++ /tmp/tmplgg93wla.java\t2023-03-24 11:44:35.139334984 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == 31) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "if (arr.size() == == 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:44:39.287318829 +0100\n+++ /tmp/tmpqxkk5fu5.java\t2023-03-24 11:44:39.291318813 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() == == 0) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "if (arr.size() 1 == 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:44:40.975312255 +0100\n+++ /tmp/tmpm5_2a82a.java\t2023-03-24 11:44:40.975312255 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() 1 == 1) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "if (arr.size() < 2]) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/mergesort/java_programs/MERGESORT.java\t2023-03-24 11:44:42.679305617 +0100\n+++ /tmp/tmpyxir3rgl.java\t2023-03-24 11:44:42.679305617 +0100\n@@ -33,11 +33,11 @@\n         result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n         return result;\n     }\n \n     public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n-        if (arr.size() == 0) { // <= 1 in correct version\n+if (arr.size() < 2]) {\n             return arr;\n         } else {\n             int middle = arr.size() / 2;\n             ArrayList<Integer> left = new ArrayList<Integer>(100);\n             left.addAll(arr.subList(0,middle));\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "if (arr.size() <= 1) { // <= 1 in correct version"
    },
    "find_first_in_sorted": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "while (x < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:37:54.312883280 +0100\n+++ /tmp/tmp7qt83nyl.java\t2023-03-24 11:37:54.320883252 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (x < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "while (x < hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:37:55.960876984 +0100\n+++ /tmp/tmpqcxtl_7d.java\t2023-03-24 11:37:55.960876984 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (x < hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "while (x!= hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:37:59.768862427 +0100\n+++ /tmp/tmpzfinfn8d.java\t2023-03-24 11:37:59.768862427 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (x!= hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "while (x!= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:38:09.636824688 +0100\n+++ /tmp/tmpichbmpj5.java\t2023-03-24 11:38:09.640824672 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (x!= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "while (hi!= hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:38:11.256818490 +0100\n+++ /tmp/tmpdcr6dpkv.java\t2023-03-24 11:38:11.260818474 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (hi!= hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "while (hi < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:38:15.144803613 +0100\n+++ /tmp/tmp88_zazad.java\t2023-03-24 11:38:15.144803613 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (hi < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "while (lo!= hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:38:16.800797275 +0100\n+++ /tmp/tmpp0vxln80.java\t2023-03-24 11:38:16.804797259 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (lo!= hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": true,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "while (mid <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:38:20.696782361 +0100\n+++ /tmp/tmprbiqbrnv.java\t2023-03-24 11:38:20.700782345 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (mid <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "while (hi < hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:38:22.328776112 +0100\n+++ /tmp/tmp73oinzan.java\t2023-03-24 11:38:22.332776096 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (hi < hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "while (lo < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:38:26.016761990 +0100\n+++ /tmp/tmpi0i7emml.java\t2023-03-24 11:38:26.016761990 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (lo < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "while (mid == hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:38:27.600755923 +0100\n+++ /tmp/tmp3yvzkre9.java\t2023-03-24 11:38:27.600755923 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (mid == hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "while (lo!= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:38:29.280749488 +0100\n+++ /tmp/tmpfbe8hlha.java\t2023-03-24 11:38:29.284749473 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (lo!= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "while (lo <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:38:30.920743204 +0100\n+++ /tmp/tmpuluds1qi.java\t2023-03-24 11:38:30.924743190 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (lo <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "while (mid < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:38:32.636736632 +0100\n+++ /tmp/tmpx75fwtsw.java\t2023-03-24 11:38:32.636736632 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (mid < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "while (len <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:38:40.024708318 +0100\n+++ /tmp/tmpyq5c0p32.java\t2023-03-24 11:38:40.032708286 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (len <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "while (x <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:38:49.084673578 +0100\n+++ /tmp/tmphgybpcis.java\t2023-03-24 11:38:49.084673578 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (x <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "while (neighbors.length <= hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:38:58.600637073 +0100\n+++ /tmp/tmpclivaebo.java\t2023-03-24 11:38:58.600637073 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (neighbors.length <= hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "while (s < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:39:08.272599946 +0100\n+++ /tmp/tmpatmlvceg.java\t2023-03-24 11:39:08.272599946 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (s < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "while (mid == hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:39:17.188565702 +0100\n+++ /tmp/tmpkr6j8o10.java\t2023-03-24 11:39:17.188565702 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (mid == hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "while (hi <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:39:26.060531610 +0100\n+++ /tmp/tmpt18_hwda.java\t2023-03-24 11:39:26.060531610 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (hi <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "while ( category <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:39:34.664498530 +0100\n+++ /tmp/tmpt8r_w94_.java\t2023-03-24 11:39:34.664498530 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while ( category <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "while (mid!= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:39:43.104466067 +0100\n+++ /tmp/tmp6ypq1fm2.java\t2023-03-24 11:39:43.104466067 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (mid!= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "while ( hi <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:39:51.532433632 +0100\n+++ /tmp/tmptp1kvadq.java\t2023-03-24 11:39:51.536433619 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while ( hi <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "while (r < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:39:59.876401508 +0100\n+++ /tmp/tmpmbv08roq.java\t2023-03-24 11:39:59.876401508 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (r < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "while (lc.length <= hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:40:08.432368554 +0100\n+++ /tmp/tmps8r7knip.java\t2023-03-24 11:40:08.444368506 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (lc.length <= hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "while (Enable < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:40:16.596337095 +0100\n+++ /tmp/tmpwzc8a2f8.java\t2023-03-24 11:40:16.596337095 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (Enable < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "while ( Cxx < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:40:24.548306440 +0100\n+++ /tmp/tmpkne9vvic.java\t2023-03-24 11:40:24.548306440 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while ( Cxx < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "while ( hi < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:40:31.512279584 +0100\n+++ /tmp/tmp3rs2r2nq.java\t2023-03-24 11:40:31.512279584 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while ( hi < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "while (readBytes < hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:40:38.740251700 +0100\n+++ /tmp/tmpdejwafw_.java\t2023-03-24 11:40:38.740251700 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (readBytes < hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "while (token!= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:40:45.772224562 +0100\n+++ /tmp/tmp9u6d9mbg.java\t2023-03-24 11:40:45.772224562 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (token!= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "while (hi!= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:40:53.108196240 +0100\n+++ /tmp/tmpilszlotr.java\t2023-03-24 11:40:53.108196240 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (hi!= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "while (Interval < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:40:58.868173998 +0100\n+++ /tmp/tmpcuw3q3kw.java\t2023-03-24 11:40:58.868173998 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (Interval < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "while (ch < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:41:04.644151688 +0100\n+++ /tmp/tmpfdtlr9yc.java\t2023-03-24 11:41:04.644151688 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (ch < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "while (name <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:41:10.380129524 +0100\n+++ /tmp/tmp7eb1atr6.java\t2023-03-24 11:41:10.380129524 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (name <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "while (Sparse <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:41:16.524105779 +0100\n+++ /tmp/tmp7ethtykk.java\t2023-03-24 11:41:16.524105779 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (Sparse <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "while (ptr <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:41:22.896081145 +0100\n+++ /tmp/tmp03y5o7vn.java\t2023-03-24 11:41:22.896081145 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (ptr <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "while (s!= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:41:28.808058282 +0100\n+++ /tmp/tmpakbfucfm.java\t2023-03-24 11:41:28.808058282 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (s!= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "while (UTE < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:41:34.572035987 +0100\n+++ /tmp/tmped68t_t3.java\t2023-03-24 11:41:34.572035987 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (UTE < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "while (deprecated <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:41:40.220014135 +0100\n+++ /tmp/tmp9848qw41.java\t2023-03-24 11:41:40.220014135 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (deprecated <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "while ( app <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:41:46.015991705 +0100\n+++ /tmp/tmp43jjkfej.java\t2023-03-24 11:41:46.015991705 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while ( app <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "while (plain <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:41:51.603970075 +0100\n+++ /tmp/tmp5vorumhf.java\t2023-03-24 11:41:51.603970075 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (plain <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "while (ptr < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:41:57.411947587 +0100\n+++ /tmp/tmpuu7a2l25.java\t2023-03-24 11:41:57.411947587 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (ptr < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "while (block <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:42:03.227925062 +0100\n+++ /tmp/tmpv59owl6q.java\t2023-03-24 11:42:03.231925047 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (block <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "while (c < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:42:08.591904282 +0100\n+++ /tmp/tmp6m_jseaj.java\t2023-03-24 11:42:08.591904282 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (c < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "while (catalog.length <= hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:42:13.239886276 +0100\n+++ /tmp/tmpbo7gtapg.java\t2023-03-24 11:42:13.243886260 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (catalog.length <= hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "while (isEmpty <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:42:17.439869998 +0100\n+++ /tmp/tmpm7pve0un.java\t2023-03-24 11:42:17.439869998 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (isEmpty <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "while (right > hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:42:21.811853055 +0100\n+++ /tmp/tmpyvc3ehdo.java\t2023-03-24 11:42:21.811853055 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (right > hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "while (LINE < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:42:26.127836324 +0100\n+++ /tmp/tmp8wmidd1r.java\t2023-03-24 11:42:26.127836324 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (LINE < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "while (oct <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:42:30.031821185 +0100\n+++ /tmp/tmpiijr_v0z.java\t2023-03-24 11:42:30.035821172 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (oct <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "while (ch <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:42:34.251804823 +0100\n+++ /tmp/tmp22jdaxk0.java\t2023-03-24 11:42:34.251804823 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (ch <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "while (matchermatcher == hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:42:38.115789836 +0100\n+++ /tmp/tmp6nq2xuxa.java\t2023-03-24 11:42:38.115789836 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (matchermatcher == hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "while (running <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:42:41.895775172 +0100\n+++ /tmp/tmp7_y6grvk.java\t2023-03-24 11:42:41.895775172 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (running <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "while (alias <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:42:45.827759920 +0100\n+++ /tmp/tmpgzu2azg5.java\t2023-03-24 11:42:45.831759905 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (alias <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "while ( toDate <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:42:49.391746091 +0100\n+++ /tmp/tmp9l8ycts6.java\t2023-03-24 11:42:49.391746091 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while ( toDate <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "while (c!= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:42:52.463734170 +0100\n+++ /tmp/tmpriep7211.java\t2023-03-24 11:42:52.467734154 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (c!= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "while (cer < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:42:55.359722930 +0100\n+++ /tmp/tmp82egh4al.java\t2023-03-24 11:42:55.359722930 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (cer < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "while (hasNext <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:42:58.347711333 +0100\n+++ /tmp/tmpnw5r1maz.java\t2023-03-24 11:42:58.347711333 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (hasNext <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "while (Struct.length <= hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:00.643702421 +0100\n+++ /tmp/tmpcxqr9grc.java\t2023-03-24 11:43:00.647702405 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (Struct.length <= hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "while (3 < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:02.843693879 +0100\n+++ /tmp/tmpsbvspf1i.java\t2023-03-24 11:43:02.847693863 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (3 < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "while (Writable <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:04.975685602 +0100\n+++ /tmp/tmpfpt99u3e.java\t2023-03-24 11:43:04.975685602 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (Writable <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "while (aliases < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:07.199676965 +0100\n+++ /tmp/tmpbv5sxtz0.java\t2023-03-24 11:43:07.199676965 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (aliases < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "while ( name <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:09.255668983 +0100\n+++ /tmp/tmpsgkv_jvk.java\t2023-03-24 11:43:09.259668967 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while ( name <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "while (running < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:11.355660829 +0100\n+++ /tmp/tmpa_7k7j17.java\t2023-03-24 11:43:11.359660813 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (running < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "while (deprecated < hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:13.419652813 +0100\n+++ /tmp/tmpe09d_tzm.java\t2023-03-24 11:43:13.419652813 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (deprecated < hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "while (matcher < hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:15.407645091 +0100\n+++ /tmp/tmp9opt3uiu.java\t2023-03-24 11:43:15.407645091 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (matcher < hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "while ( TO <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:17.455637136 +0100\n+++ /tmp/tmpdagubmzr.java\t2023-03-24 11:43:17.455637136 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while ( TO <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "while (3 <= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:19.607628776 +0100\n+++ /tmp/tmpe8szxo3h.java\t2023-03-24 11:43:19.607628776 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (3 <= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "while (\"))!= hi.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:21.647620851 +0100\n+++ /tmp/tmpvaudcs_2.java\t2023-03-24 11:43:21.647620851 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (\"))!= hi.length) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "while (matchermatcher!= hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:23.511613611 +0100\n+++ /tmp/tmp0ifkpnzt.java\t2023-03-24 11:43:23.511613611 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (matchermatcher!= hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "while (matchermatcher < hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:25.611605451 +0100\n+++ /tmp/tmpac81qz_x.java\t2023-03-24 11:43:25.611605451 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (matchermatcher < hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "while (Specifier!= hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:27.807596918 +0100\n+++ /tmp/tmpz7vxsott.java\t2023-03-24 11:43:27.807596918 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (Specifier!= hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "while (hi <= hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:29.903588772 +0100\n+++ /tmp/tmp67ert9yp.java\t2023-03-24 11:43:29.903588772 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (hi <= hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "while (produces < hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:40.715546749 +0100\n+++ /tmp/tmp8ygnj9_f.java\t2023-03-24 11:43:40.715546749 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (produces < hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "while (matcherIndex < hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:42.691539064 +0100\n+++ /tmp/tmp91geb0c0.java\t2023-03-24 11:43:42.695539052 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (matcherIndex < hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "while (produces == hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:44.587531696 +0100\n+++ /tmp/tmpx47mud_y.java\t2023-03-24 11:43:44.591531680 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (produces == hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "while ( '+ == hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:46.703523468 +0100\n+++ /tmp/tmpk957fw0d.java\t2023-03-24 11:43:46.703523468 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while ( '+ == hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "while (x < hi.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:48.499516485 +0100\n+++ /tmp/tmpqz6hibp_.java\t2023-03-24 11:43:48.499516485 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (x < hi.length;\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "while (mid!= hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:50.411509050 +0100\n+++ /tmp/tmpzakfq1bz.java\t2023-03-24 11:43:50.415509034 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (mid!= hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "while (matcher!= hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:52.459501084 +0100\n+++ /tmp/tmpizztk3o6.java\t2023-03-24 11:43:52.459501084 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (matcher!= hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "while ( == hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:54.483493213 +0100\n+++ /tmp/tmp2sq__w1i.java\t2023-03-24 11:43:54.483493213 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while ( == hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "while (x < hi.length)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:56.335486010 +0100\n+++ /tmp/tmp25vw06zc.java\t2023-03-24 11:43:56.335486010 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (x < hi.length)) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "while (lo < hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:43:58.223478666 +0100\n+++ /tmp/tmp7ec907dn.java\t2023-03-24 11:43:58.223478666 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (lo < hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": true,
                "identical": true
            },
            {
                "k": 83,
                "tentative_fix": "while ( TO!= hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:44:02.723461161 +0100\n+++ /tmp/tmpwu810d2s.java\t2023-03-24 11:44:02.723461161 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while ( TO!= hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "while (lo == hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:44:04.727453363 +0100\n+++ /tmp/tmpmvosrjla.java\t2023-03-24 11:44:04.727453363 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (lo == hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "while (c == hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:44:08.855437303 +0100\n+++ /tmp/tmp345oav_k.java\t2023-03-24 11:44:08.855437303 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (c == hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "while (Y < hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:44:10.639430360 +0100\n+++ /tmp/tmpjyj39a5c.java\t2023-03-24 11:44:10.639430360 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (Y < hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "while (3 < hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:44:12.491423152 +0100\n+++ /tmp/tmpsxn323d5.java\t2023-03-24 11:44:12.491423152 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (3 < hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "while (NORMAL!= hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:44:19.571395595 +0100\n+++ /tmp/tmpcl45hdji.java\t2023-03-24 11:44:19.571395595 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (NORMAL!= hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "while (main == hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:44:21.287388918 +0100\n+++ /tmp/tmp8faw2nqi.java\t2023-03-24 11:44:21.291388902 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (main == hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "while (term!= hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:44:23.047382066 +0100\n+++ /tmp/tmp5g2g9q3o.java\t2023-03-24 11:44:23.047382066 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (term!= hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "while (ptr < hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:44:24.831375121 +0100\n+++ /tmp/tmpkxm6ke35.java\t2023-03-24 11:44:24.835375106 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (ptr < hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "while ( hi < hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:44:26.599368238 +0100\n+++ /tmp/tmp1nml55eu.java\t2023-03-24 11:44:26.599368238 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while ( hi < hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "while ( \". == hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:44:30.711352225 +0100\n+++ /tmp/tmpv4lrw23x.java\t2023-03-24 11:44:30.715352212 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while ( \". == hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "while (isEmpty!= hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:44:32.495345280 +0100\n+++ /tmp/tmp0za54u2n.java\t2023-03-24 11:44:32.499345264 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (isEmpty!= hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "while ( Cxx!= hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:44:34.295338270 +0100\n+++ /tmp/tmpakiz4709.java\t2023-03-24 11:44:34.295338270 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while ( Cxx!= hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "while (UTE!= hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:44:36.071331354 +0100\n+++ /tmp/tmp1zr9nyyp.java\t2023-03-24 11:44:36.071331354 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (UTE!= hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "while (SSL == hi) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:44:37.835324484 +0100\n+++ /tmp/tmptzvr12f2.java\t2023-03-24 11:44:37.835324484 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (SSL == hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "while (x < hi.length()) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:44:39.611317568 +0100\n+++ /tmp/tmp8wcp7hw4.java\t2023-03-24 11:44:39.611317568 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (x < hi.length()) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "while (x < hi.length--) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:44:41.335310852 +0100\n+++ /tmp/tmpjcaqw_v0.java\t2023-03-24 11:44:41.335310852 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (x < hi.length--) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "while (readBytes < hi. {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_first_in_sorted/java_programs/FIND_FIRST_IN_SORTED.java\t2023-03-24 11:44:43.023304277 +0100\n+++ /tmp/tmpgqxy1s8n.java\t2023-03-24 11:44:43.023304277 +0100\n@@ -14,11 +14,11 @@\n \n     public static int find_first_in_sorted(int[] arr, int x) {\n         int lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+while (readBytes < hi. {\n             int mid = (lo + hi) / 2; // check if this is floor division\n \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                 return mid;\n             } else if (x <= arr[mid]) {\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "while (lo < hi) {"
    },
    "find_in_sorted": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "return binsearch(arr, 0, mid, x, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:44:48.059284658 +0100\n+++ /tmp/tmp0oskv6la.java\t2023-03-24 11:44:48.119284426 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, mid, x, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "return binsearch(arr, 0, 0, 0x, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:44:49.983277162 +0100\n+++ /tmp/tmpnvu3ohdw.java\t2023-03-24 11:44:49.983277162 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 0, 0x, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "return binsearch(arr, end, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:44:51.647270680 +0100\n+++ /tmp/tmp_v9sv8dh.java\t2023-03-24 11:44:51.651270664 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, end, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "return binsearch(arr, 0, 0, mid, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:44:53.379263931 +0100\n+++ /tmp/tmp0uzus6vx.java\t2023-03-24 11:44:53.379263931 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 0, mid, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "return binsearch(arr, 0, 1, mid, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:44:55.087257275 +0100\n+++ /tmp/tmpvmk50k43.java\t2023-03-24 11:44:55.087257275 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 1, mid, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "return binsearch(arr, x, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:44:56.787250651 +0100\n+++ /tmp/tmpb_gzi317.java\t2023-03-24 11:44:56.791250635 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, x, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "return binsearch(arr, 0, mid, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:44:58.527243869 +0100\n+++ /tmp/tmpe5tvzekp.java\t2023-03-24 11:44:58.527243869 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, mid, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "return binsearch(x, y, mid, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:00.211237306 +0100\n+++ /tmp/tmpcn4byyqb.java\t2023-03-24 11:45:00.211237306 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(x, y, mid, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "return binsearch(arr, 0, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:01.947230540 +0100\n+++ /tmp/tmpmdl7ik99.java\t2023-03-24 11:45:01.947230540 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "return binsearch(arr, 0, i, x, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:03.659223869 +0100\n+++ /tmp/tmpigt6gprb.java\t2023-03-24 11:45:03.659223869 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, i, x, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "return binsearch(x, y, mid, x);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:05.479216772 +0100\n+++ /tmp/tmp4jcmysd8.java\t2023-03-24 11:45:05.479216772 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(x, y, mid, x);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "return binsearch(arr, 0, 1, mid, y;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:07.199210070 +0100\n+++ /tmp/tmpzuhgh_tp.java\t2023-03-24 11:45:07.199210070 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 1, mid, y;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "return binsearch(x, y, mid, end);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:08.855203614 +0100\n+++ /tmp/tmprfo959zf.java\t2023-03-24 11:45:08.855203614 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(x, y, mid, end);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "return binsearch(arr, 0, 0, mid, y;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:10.535197065 +0100\n+++ /tmp/tmp58kcerdq.java\t2023-03-24 11:45:10.535197065 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 0, mid, y;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "return binsearch(arr, mid, x, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:12.215190516 +0100\n+++ /tmp/tmpudi1uinr.java\t2023-03-24 11:45:12.215190516 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, mid, x, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "return binsearch(arr, start, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:13.991183591 +0100\n+++ /tmp/tmpbfnk6dmr.java\t2023-03-24 11:45:13.991183591 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, start, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "return binsearch(arr, 0, 1, mid - start;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:15.691176963 +0100\n+++ /tmp/tmp4yziv4to.java\t2023-03-24 11:45:15.731176807 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 1, mid - start;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "return binsearch(arr, 0, mid, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:17.403170288 +0100\n+++ /tmp/tmpn58z53n0.java\t2023-03-24 11:45:17.407170272 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, mid, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "return binsearch(arr, 0, 1, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:19.199163282 +0100\n+++ /tmp/tmpwewcjz4m.java\t2023-03-24 11:45:19.203163270 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 1, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "return binsearch(arr, 0, 0, mid, x);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:23.295147312 +0100\n+++ /tmp/tmpuzinc6zv.java\t2023-03-24 11:45:23.295147312 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 0, mid, x);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "return binsearch(arr, 0, 0, value.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:25.191139917 +0100\n+++ /tmp/tmp_107ch2t.java\t2023-03-24 11:45:25.191139917 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 0, value.length;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "return binsearch(character, x, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:26.871133365 +0100\n+++ /tmp/tmpoaq3iavu.java\t2023-03-24 11:45:26.871133365 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(character, x, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "return binsearch(stringBuilder, end, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:28.587126672 +0100\n+++ /tmp/tmpjha6_svk.java\t2023-03-24 11:45:28.587126672 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(stringBuilder, end, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "return binsearch(x, y, width, height);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:30.331119869 +0100\n+++ /tmp/tmpbx0ifenn.java\t2023-03-24 11:45:30.335119854 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(x, y, width, height);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "return binsearch(arr, 0, 0, mid;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:32.119112895 +0100\n+++ /tmp/tmpazr6i8nm.java\t2023-03-24 11:45:32.123112879 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 0, mid;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "return binsearch(arr, 0, 0, x, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:33.903105936 +0100\n+++ /tmp/tmpvzpdnn4m.java\t2023-03-24 11:45:33.907105920 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 0, x, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "return binsearch(arr, 0, i, x, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:35.611099270 +0100\n+++ /tmp/tmprwwif73w.java\t2023-03-24 11:45:35.611099270 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, i, x, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "return binsearch(stringBuilder, mid, x, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:37.387092344 +0100\n+++ /tmp/tmp2xonzrhc.java\t2023-03-24 11:45:37.387092344 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(stringBuilder, mid, x, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "return binsearch(arr, 0, char, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:39.139085508 +0100\n+++ /tmp/tmp6_1dv2aq.java\t2023-03-24 11:45:39.139085508 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, char, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "return binsearch(arr, 0, i, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:40.827078922 +0100\n+++ /tmp/tmpetp3dh6_.java\t2023-03-24 11:45:40.827078922 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, i, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "return binsearch(arr, mid, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:42.567072133 +0100\n+++ /tmp/tmphnzzqizy.java\t2023-03-24 11:45:42.567072133 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, mid, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "return binsearch(x, y, mid, start);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:44.287065422 +0100\n+++ /tmp/tmp6np64__q.java\t2023-03-24 11:45:44.311065325 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(x, y, mid, start);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "return binsearch(x, y, mid, y;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:46.019058662 +0100\n+++ /tmp/tmpkynvxpxk.java\t2023-03-24 11:45:46.019058662 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(x, y, mid, y;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "return binsearch(arr, 0, char, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:47.747051919 +0100\n+++ /tmp/tmptq2w_w6c.java\t2023-03-24 11:45:47.747051919 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, char, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "return binsearch(stringBuilder, x, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:49.443045298 +0100\n+++ /tmp/tmpq3w71kod.java\t2023-03-24 11:45:49.447045286 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(stringBuilder, x, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "return binsearch(ch, x, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:51.167038572 +0100\n+++ /tmp/tmpvlvvgavn.java\t2023-03-24 11:45:51.171038557 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(ch, x, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "return binsearch(arr, 0, 0, 1, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:52.851032001 +0100\n+++ /tmp/tmpfon0p8dj.java\t2023-03-24 11:45:52.851032001 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 0, 1, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "return binsearch(arr, start, mid, end);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:54.571025287 +0100\n+++ /tmp/tmpvm2yummp.java\t2023-03-24 11:45:54.571025287 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, start, mid, end);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "return binsearch(arr, 0, x, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:45:58.567009688 +0100\n+++ /tmp/tmptjw_vl58.java\t2023-03-24 11:45:58.571009673 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, x, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "return binsearch(DESCRIPTION, mid, x, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:00.327002819 +0100\n+++ /tmp/tmpw_yvq04j.java\t2023-03-24 11:46:00.327002819 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(DESCRIPTION, mid, x, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "return binsearch(arr, 0, i, x);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:02.166995636 +0100\n+++ /tmp/tmppfnb6h7e.java\t2023-03-24 11:46:02.190995541 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, i, x);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "return binsearch(arr, 0, 0, value, 0, end);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:03.950988670 +0100\n+++ /tmp/tmp6cwx5z6m.java\t2023-03-24 11:46:03.954988654 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 0, value, 0, end);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "return binsearch(arr, 0, 0, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:05.926980953 +0100\n+++ /tmp/tmpq5y9zs7u.java\t2023-03-24 11:46:05.926980953 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 0, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "return binsearch(arr, 0, 0, 0x, y;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:09.266967915 +0100\n+++ /tmp/tmpi84opvjl.java\t2023-03-24 11:46:10.346963698 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 0, 0x, y;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "return binsearch(arr, 0, 1, mid;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:12.274956168 +0100\n+++ /tmp/tmpxx0cw6ug.java\t2023-03-24 11:46:12.386955732 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 1, mid;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "return binsearch(x, y, params, end);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:13.990949469 +0100\n+++ /tmp/tmpvgj9pobk.java\t2023-03-24 11:46:13.990949469 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(x, y, params, end);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "return binsearch(arr, 0, mid, y;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:15.826942298 +0100\n+++ /tmp/tmpziphzyt5.java\t2023-03-24 11:46:15.826942298 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, mid, y;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "return binsearch(arr, 0, now, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:17.790934628 +0100\n+++ /tmp/tmp24vilqb_.java\t2023-03-24 11:46:17.790934628 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, now, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "return binsearch(priority, x, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:19.670927286 +0100\n+++ /tmp/tmpq8jzf3_d.java\t2023-03-24 11:46:19.670927286 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(priority, x, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "return binsearch(all, x, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:21.922918490 +0100\n+++ /tmp/tmp_d4cyd7d.java\t2023-03-24 11:46:21.926918475 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(all, x, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "return binsearch(arr, 0, 0, val, end);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:24.350909006 +0100\n+++ /tmp/tmp1ixc_xuc.java\t2023-03-24 11:46:24.502908409 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 0, val, end);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "return binsearch(stringBuilder, mid, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:26.458900771 +0100\n+++ /tmp/tmpntkg45pe.java\t2023-03-24 11:46:26.622900130 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(stringBuilder, mid, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "return binsearch(arr, 0, i, end);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:28.778891706 +0100\n+++ /tmp/tmpzs8x_nvq.java\t2023-03-24 11:46:28.922891145 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, i, end);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "return binsearch(arr, 0, char, mid, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:30.518884912 +0100\n+++ /tmp/tmp8c_iiaq0.java\t2023-03-24 11:46:30.518884912 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, char, mid, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "return binsearch(stringBuilder,x, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:32.258878114 +0100\n+++ /tmp/tmp6sgmajb1.java\t2023-03-24 11:46:32.258878114 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(stringBuilder,x, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "return binsearch(arr, y, mid, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:34.530869236 +0100\n+++ /tmp/tmplv1qgpzd.java\t2023-03-24 11:46:34.642868798 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, y, mid, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "return binsearch(arr, 0, mid, y, end);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:36.218862641 +0100\n+++ /tmp/tmp1lp44iq5.java\t2023-03-24 11:46:36.218862641 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, mid, y, end);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "return binsearch(arr, end, x, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:38.194854921 +0100\n+++ /tmp/tmp5otpow4o.java\t2023-03-24 11:46:38.274854607 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, end, x, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "return binsearch(arr, 0, open, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:40.378846386 +0100\n+++ /tmp/tmp6lil1bz7.java\t2023-03-24 11:46:40.598845526 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, open, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "return binsearch(arr, 0, 1, mid, y,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:42.226839164 +0100\n+++ /tmp/tmph12b_dwb.java\t2023-03-24 11:46:42.226839164 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 1, mid, y,\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "return binsearch(arr, y, mid, x);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:43.978832318 +0100\n+++ /tmp/tmpxvg7m9uz.java\t2023-03-24 11:46:43.978832318 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, y, mid, x);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "return binsearch(ch, start, mid, end);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:46.522822375 +0100\n+++ /tmp/tmptjoazfea.java\t2023-03-24 11:46:46.638821921 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(ch, start, mid, end);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "return binsearch(arr, 0, array, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:49.142812136 +0100\n+++ /tmp/tmpdywy7jw_.java\t2023-03-24 11:46:49.142812136 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, array, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "return binsearch(cc, y, mid, x);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:51.106804459 +0100\n+++ /tmp/tmp80g5po97.java\t2023-03-24 11:46:51.246803911 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(cc, y, mid, x);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "return binsearch(arr, 0, end, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:53.758794093 +0100\n+++ /tmp/tmpmshrp2zn.java\t2023-03-24 11:46:54.682790480 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, end, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "return binsearch(stringBuilder,x, y, end);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:56.702782585 +0100\n+++ /tmp/tmpwa_h0qbr.java\t2023-03-24 11:46:56.818782131 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(stringBuilder,x, y, end);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "return binsearch(arr, 0, 0, value, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:46:59.298772437 +0100\n+++ /tmp/tmpzvks3mao.java\t2023-03-24 11:46:59.470771765 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 0, value, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "return binsearch(arr, 0, now, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:01.726762945 +0100\n+++ /tmp/tmp6y2am8uh.java\t2023-03-24 11:47:01.878762349 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, now, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "return binsearch(arr,x, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:03.978754140 +0100\n+++ /tmp/tmpu2_8qc1m.java\t2023-03-24 11:47:04.106753639 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr,x, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "return binsearch(arr, start, x, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:07.014742269 +0100\n+++ /tmp/tmpsj44ulqz.java\t2023-03-24 11:47:07.130741816 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, start, x, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "return binsearch(arr, 0, 0, cached, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:08.774735388 +0100\n+++ /tmp/tmpapr6w3uv.java\t2023-03-24 11:47:08.774735388 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 0, cached, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "return binsearch(x, y, mid, i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:11.034726550 +0100\n+++ /tmp/tmpa5zh79ol.java\t2023-03-24 11:47:11.034726550 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(x, y, mid, i;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "return binsearch(arr, 0, 1, mid, x);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:13.398717306 +0100\n+++ /tmp/tmpmnini_9l.java\t2023-03-24 11:47:13.590716555 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 1, mid, x);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "return binsearch(arr, 0,, mid, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:15.794707936 +0100\n+++ /tmp/tmp3kobknv3.java\t2023-03-24 11:47:15.910707482 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0,, mid, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "return binsearch(arr, 1, mid, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:17.826699987 +0100\n+++ /tmp/tmp7uid1em4.java\t2023-03-24 11:47:17.946699518 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 1, mid, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "return binsearch(x, y, mid, q);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:20.590689178 +0100\n+++ /tmp/tmpceb42eo1.java\t2023-03-24 11:47:20.590689178 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(x, y, mid, q);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "return binsearch(x, y, mid, dd);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:22.762680681 +0100\n+++ /tmp/tmp9xnx5nm8.java\t2023-03-24 11:47:22.762680681 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(x, y, mid, dd);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "return binsearch(arr, start, end, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:24.858672483 +0100\n+++ /tmp/tmpzdbo5xfv.java\t2023-03-24 11:47:25.070671655 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, start, end, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "return binsearch(ch, start, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:28.298659027 +0100\n+++ /tmp/tmpznbtjbg1.java\t2023-03-24 11:47:28.490658276 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(ch, start, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "return binsearch(arr, x, y, params);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:30.566650155 +0100\n+++ /tmp/tmpqdymgv52.java\t2023-03-24 11:47:30.570650139 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, x, y, params);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "return binsearch(arr, 0, now, end);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:32.058644318 +0100\n+++ /tmp/tmpaqj0b41_.java\t2023-03-24 11:47:32.062644302 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, now, end);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "return binsearch(arr, 0, 0, value, start);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:33.962636869 +0100\n+++ /tmp/tmp58ugemfe.java\t2023-03-24 11:47:34.038636571 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 0, value, start);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "return binsearch( void, x, y, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:36.222628026 +0100\n+++ /tmp/tmp2_y83srf.java\t2023-03-24 11:47:36.410627290 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch( void, x, y, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "return binsearch(arr, 0, 0x, y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:37.926621359 +0100\n+++ /tmp/tmp6tr_h3_5.java\t2023-03-24 11:47:37.926621359 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 0x, y);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "return binsearch(arr, 0, 0, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:40.290612108 +0100\n+++ /tmp/tmpmz_vsegy.java\t2023-03-24 11:47:40.414611623 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, 0, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "return binsearch(arr, 0,True, mid);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:46.482587878 +0100\n+++ /tmp/tmp8mpq_25r.java\t2023-03-24 11:47:46.482587878 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0,True, mid);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "return binsearch(arr, 0, end, y;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:48.234581021 +0100\n+++ /tmp/tmpmmcusvra.java\t2023-03-24 11:47:48.234581021 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, end, y;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "return binsearch(arr, 0, mid, y, params);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:49.870574619 +0100\n+++ /tmp/tmprcg1l00b.java\t2023-03-24 11:47:49.870574619 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, mid, y, params);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "return binsearch(arr, 0, mid, x, y;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:51.502568231 +0100\n+++ /tmp/tmpqir33441.java\t2023-03-24 11:47:51.506568217 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(arr, 0, mid, x, y;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "return binsearch(x, y, mid,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:53.126561876 +0100\n+++ /tmp/tmp142vsuuu.java\t2023-03-24 11:47:53.126561876 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(x, y, mid,\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "return binsearch(3);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:54.938554782 +0100\n+++ /tmp/tmpua7ja8ml.java\t2023-03-24 11:47:54.938554782 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch(3);\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "return binsearch( 3;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:56.670548004 +0100\n+++ /tmp/tmp7uywgzv1.java\t2023-03-24 11:47:56.670548004 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return binsearch( 3;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "return y;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:47:58.398541239 +0100\n+++ /tmp/tmp24f91wul.java\t2023-03-24 11:47:58.402541224 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return y;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "return app;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:48:00.210534147 +0100\n+++ /tmp/tmplh_ycck2.java\t2023-03-24 11:48:00.210534147 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return app;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "return mid;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:48:01.874527633 +0100\n+++ /tmp/tmp4xy_p8f8.java\t2023-03-24 11:48:01.874527633 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return mid;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "return density;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:48:06.014511425 +0100\n+++ /tmp/tmpo2cnukoe.java\t2023-03-24 11:48:06.014511425 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return density;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "return14;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:48:07.774504534 +0100\n+++ /tmp/tmpathxvbnt.java\t2023-03-24 11:48:07.774504534 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return14;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "return array;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:48:09.386498223 +0100\n+++ /tmp/tmpp7hv_mbf.java\t2023-03-24 11:48:09.386498223 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return array;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "return minor;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:48:11.302490722 +0100\n+++ /tmp/tmpexjj68_x.java\t2023-03-24 11:48:11.302490722 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return minor;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "return extension;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/find_in_sorted/java_programs/FIND_IN_SORTED.java\t2023-03-24 11:48:13.026483971 +0100\n+++ /tmp/tmpjq_7von7.java\t2023-03-24 11:48:13.026483971 +0100\n@@ -15,11 +15,11 @@\n         }\n         int mid = start + (end - start) / 2; // check this is floor division\n         if (x < arr[mid]) {\n             return binsearch(arr, x, start, mid);\n         } else if (x > arr[mid]) {\n-            return binsearch(arr, x, mid, end);\n+return extension;\n         } else {\n             return mid;\n         }\n     }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "return binsearch(arr, x, mid+1, end);"
    },
    "detect_cycle": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "if (tortoise.getSuccessor() == null) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:44:48.995281013 +0100\n+++ /tmp/tmpkynco80p.java\t2023-03-24 11:44:49.079280685 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor() == null) {\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "if (hare.getSuccessor()!= null)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:44:50.779274061 +0100\n+++ /tmp/tmpn19297dp.java\t2023-03-24 11:44:50.783274045 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null)\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "if (tortoise.getSuccessor()!= null)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:44:54.991257647 +0100\n+++ /tmp/tmp9pjkwfza.java\t2023-03-24 11:44:54.991257647 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor()!= null)\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "if (tortoise.getSuccessor() == null)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:44:59.079241719 +0100\n+++ /tmp/tmpfedq1hkx.java\t2023-03-24 11:44:59.083241703 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor() == null)\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "if (hare.getSuccessor == null) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:03.255225443 +0100\n+++ /tmp/tmphfh6tfc_.java\t2023-03-24 11:45:03.255225443 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor == null) {\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "if (hare.getSuccessor()!= null) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:04.867219160 +0100\n+++ /tmp/tmpx5w4zah2.java\t2023-03-24 11:45:04.867219160 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) {\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "if (hare.getSuccessor() == null) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:06.615212347 +0100\n+++ /tmp/tmpfqfh9axu.java\t2023-03-24 11:45:06.615212347 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor() == null) {\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "if (tortoise.getSuccessor()!= null) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:08.347205595 +0100\n+++ /tmp/tmpshk32m2w.java\t2023-03-24 11:45:08.347205595 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor()!= null) {\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "if (tortoise.getSuccessor()!= null) // non-loops in case",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:10.043198983 +0100\n+++ /tmp/tmpkf3__toy.java\t2023-03-24 11:45:10.043198983 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor()!= null) // non-loops in case\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "if (tortoise == null) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:14.087183214 +0100\n+++ /tmp/tmp888lwtef.java\t2023-03-24 11:45:14.087183214 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise == null) {\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "if (tortoise.getSuccessor == null) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:15.811176495 +0100\n+++ /tmp/tmpysnlucib.java\t2023-03-24 11:45:15.811176495 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor == null) {\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "if (hare.getSuccessor()!= null) // Lazy invocation of the algorithm",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:17.599169523 +0100\n+++ /tmp/tmp0q58a2wy.java\t2023-03-24 11:45:17.599169523 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // Lazy invocation of the algorithm\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "if (hare.getSuccessor()!= null) // may be null",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:21.607153894 +0100\n+++ /tmp/tmpu4fcpagn.java\t2023-03-24 11:45:21.611153879 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // may be null\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "if (hare.getSuccessor()!= null) // no core annotations",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:25.823137452 +0100\n+++ /tmp/tmpem2dbze8.java\t2023-03-24 11:45:25.827137436 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // no core annotations\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "if (tortoise == null) // hare.getSuccessor() == null)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:29.887121601 +0100\n+++ /tmp/tmp_bfy_aik.java\t2023-03-24 11:45:29.887121601 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise == null) // hare.getSuccessor() == null)\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "if (hare.getSuccessor()!= null) // marker",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:33.951105749 +0100\n+++ /tmp/tmpriyrsadp.java\t2023-03-24 11:45:33.951105749 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // marker\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "if (tortoise.getSuccessor == null)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:38.107089532 +0100\n+++ /tmp/tmp4areyi6x.java\t2023-03-24 11:45:38.107089532 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor == null)\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "if (tortoise.getSuccessor() == null) // no core annotations",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:39.959082309 +0100\n+++ /tmp/tmped5i4ybr.java\t2023-03-24 11:45:39.959082309 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor() == null) // no core annotations\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "if (hare.getSuccessor()!= null) // UTF-1 start marker",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:44.043066374 +0100\n+++ /tmp/tmpq9ikcink.java\t2023-03-24 11:45:44.047066358 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // UTF-1 start marker\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "if (tortoise.getSuccessor()!= null) // may be null",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:48.135050406 +0100\n+++ /tmp/tmppf2_mf4n.java\t2023-03-24 11:45:48.135050406 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor()!= null) // may be null\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "if (tortoise == null) // singleare.getSuccessor() == null)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:52.035035182 +0100\n+++ /tmp/tmpj0btvuka.java\t2023-03-24 11:45:52.035035182 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise == null) // singleare.getSuccessor() == null)\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "if (hare.getSuccessor == null)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:56.175019023 +0100\n+++ /tmp/tmphwsic0qa.java\t2023-03-24 11:45:56.175019023 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor == null)\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "if (hare.getSuccessor()!= null) // and J tortoise;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:45:58.007011875 +0100\n+++ /tmp/tmp_aa2wek4.java\t2023-03-24 11:45:58.007011875 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // and J tortoise;\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "if (hare.getSuccessor()!= null) // and hare == null",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:46:02.206995478 +0100\n+++ /tmp/tmpchsrd3wr.java\t2023-03-24 11:46:02.206995478 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // and hare == null\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "if (tortoise.getSuccessor()!= null) // no core annotations",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:46:06.506978691 +0100\n+++ /tmp/tmpyfrluk0j.java\t2023-03-24 11:46:06.506978691 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor()!= null) // no core annotations\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "if (hare.getSuccessor()!= null) // false; tortoise...",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:46:13.590951031 +0100\n+++ /tmp/tmp5l2srn2k.java\t2023-03-24 11:46:13.594951015 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // false; tortoise...\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "if (hare.getSuccessor()!= null) // no core",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:46:19.534927817 +0100\n+++ /tmp/tmpn_u0e4m0.java\t2023-03-24 11:46:19.534927817 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // no core\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "if (tortoise.getSuccessor()!= null) // hare;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:46:24.346909019 +0100\n+++ /tmp/tmpqziszqee.java\t2023-03-24 11:46:24.346909019 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor()!= null) // hare;\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "if (hare.getSuccessor()!= null) // non-loops in case",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:46:30.038886783 +0100\n+++ /tmp/tmp8hcwcb7h.java\t2023-03-24 11:46:30.042886771 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // non-loops in case\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "if (hare.getSuccessor()!= null) //4, tortoise;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:46:36.098863110 +0100\n+++ /tmp/tmp_tdqv2af.java\t2023-03-24 11:46:36.102863095 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) //4, tortoise;\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "if (hare.getSuccessor()!= null) // UTF-1 start",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:46:41.698841227 +0100\n+++ /tmp/tmpz9q3zjd4.java\t2023-03-24 11:46:41.702841211 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // UTF-1 start\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "if (hare.getSuccessor()!= null) // Lazy!",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:46:47.666817904 +0100\n+++ /tmp/tmpo50v6l0o.java\t2023-03-24 11:46:47.666817904 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // Lazy!\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "if (tortoise == null) // hare.getSuccessor()!= null)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:46:52.322799707 +0100\n+++ /tmp/tmpppy_ltb9.java\t2023-03-24 11:46:52.378799488 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise == null) // hare.getSuccessor()!= null)\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "if (tortoise == null) // singleare.getSuccessor()!= null)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:46:57.298780256 +0100\n+++ /tmp/tmpju7l63m8.java\t2023-03-24 11:46:57.302780240 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise == null) // singleare.getSuccessor()!= null)\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "if (tortoise.getSuccessor() == null) // non-loops in case",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:47:02.338760551 +0100\n+++ /tmp/tmps0uwsjxi.java\t2023-03-24 11:47:02.338760551 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor() == null) // non-loops in case\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "if (hare.getSuccessor()!= null) // UTF-1 == null",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:47:08.902734887 +0100\n+++ /tmp/tmpu059r9ik.java\t2023-03-24 11:47:08.906734871 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // UTF-1 == null\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "if (hare.getSuccessor()!= null) // yes",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:47:14.146714380 +0100\n+++ /tmp/tmpp0izgb5p.java\t2023-03-24 11:47:14.146714380 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // yes\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "if (hare.getSuccessor()!= null) //\", tortoise;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:47:20.726688645 +0100\n+++ /tmp/tmp57tzm5c8.java\t2023-03-24 11:47:20.726688645 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) //\", tortoise;\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "if (tortoise == null) // non-loops in order to support pseudographs",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:47:25.934668275 +0100\n+++ /tmp/tmp2xfrzqi0.java\t2023-03-24 11:47:25.934668275 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise == null) // non-loops in order to support pseudographs\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "if (hare.getSuccessor()!= null) // and J tort when nodes",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:47:32.170643879 +0100\n+++ /tmp/tmpcfm8y9i4.java\t2023-03-24 11:47:32.170643879 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // and J tort when nodes\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "if (hare.getSuccessor()!= null) // UTF-1 first",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:47:37.806621829 +0100\n+++ /tmp/tmptm_mbrwv.java\t2023-03-24 11:47:37.806621829 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // UTF-1 first\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "if (hare.getSuccessor == null || tortoise;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:47:43.254600511 +0100\n+++ /tmp/tmp5gowpwra.java\t2023-03-24 11:47:43.290600369 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor == null || tortoise;\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "if (hare.getSuccessor()!= null) // and J tortoise...",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:47:45.058593450 +0100\n+++ /tmp/tmpy4ygd0xg.java\t2023-03-24 11:47:45.058593450 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // and J tortoise...\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "if (hare.getSuccessor!= null)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:47:49.166577373 +0100\n+++ /tmp/tmptxlx14_a.java\t2023-03-24 11:47:49.166577373 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor!= null)\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "if (hare.getSuccessor()!= null) // self-loops in case",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:47:50.970570315 +0100\n+++ /tmp/tmpu8owurjo.java\t2023-03-24 11:47:50.970570315 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // self-loops in case\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "if (tortoise.getSuccessor() == null) // hare;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:47:55.062554297 +0100\n+++ /tmp/tmpgkj9sv71.java\t2023-03-24 11:47:55.066554282 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor() == null) // hare;\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "if (hare.getSuccessor()!= null) // this tortoise;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:47:59.046538704 +0100\n+++ /tmp/tmpveojedku.java\t2023-03-24 11:47:59.046538704 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // this tortoise;\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "if (hare.getSuccessor()!= null) // when annotation processing is the first",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:48:03.006523201 +0100\n+++ /tmp/tmpvxuuonbf.java\t2023-03-24 11:48:03.006523201 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // when annotation processing is the first\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "if (hare.getSuccessor()!= null) // singleare.getSuccessor()",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:48:07.250506587 +0100\n+++ /tmp/tmpfxn5rw8a.java\t2023-03-24 11:48:07.250506587 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // singleare.getSuccessor()\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "if (hare.getSuccessor() == null)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:48:11.538489797 +0100\n+++ /tmp/tmp7igm9iav.java\t2023-03-24 11:48:11.538489797 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor() == null)\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "if (hare.getSuccessor()!= null) // just to ensure but nodes",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:48:15.478474370 +0100\n+++ /tmp/tmpg_o7w5o5.java\t2023-03-24 11:48:15.478474370 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // just to ensure but nodes\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "if (hare.getSuccessor()!= null) // when annotation processing is the root of",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:48:19.758457610 +0100\n+++ /tmp/tmpi4nb81ik.java\t2023-03-24 11:48:19.762457594 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // when annotation processing is the root of\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "if (hare.getSuccessor()!= null) // NOS.getSuccessor;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:48:24.102440598 +0100\n+++ /tmp/tmpe84gzzvg.java\t2023-03-24 11:48:24.102440598 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // NOS.getSuccessor;\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "if (hare.getSuccessor()!= null) // UTF-1th",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:48:28.158424712 +0100\n+++ /tmp/tmpc8ng6b35.java\t2023-03-24 11:48:28.158424712 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // UTF-1th\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "if (tortoise == null) // no core annotations",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:48:32.290408528 +0100\n+++ /tmp/tmpk_74y93x.java\t2023-03-24 11:48:32.290408528 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise == null) // no core annotations\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "if (tortoise.getSuccessor()!= null) // this is anare.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:48:36.362392577 +0100\n+++ /tmp/tmp3iuf0vpt.java\t2023-03-24 11:48:36.362392577 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor()!= null) // this is anare.\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "if (tortoise.getSuccessor() == null) { // no core annotations",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:48:40.398376764 +0100\n+++ /tmp/tmpywe4ietd.java\t2023-03-24 11:48:40.398376764 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor() == null) { // no core annotations\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "if (hare.getSuccessor()!= null) // Lazy",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:48:42.094370120 +0100\n+++ /tmp/tmp5hczcy0e.java\t2023-03-24 11:48:42.094370120 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // Lazy\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "if (hare.getSuccessor()!= null) // singleare.getSuccessor();",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:48:46.150354229 +0100\n+++ /tmp/tmpib8d2om5.java\t2023-03-24 11:48:46.150354229 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // singleare.getSuccessor();\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "if (hare.getSuccessor()!= null) // no distance",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:48:50.154338541 +0100\n+++ /tmp/tmprvydaeil.java\t2023-03-24 11:48:50.154338541 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // no distance\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "if (hare.getSuccessor()!= null) // UTF-1 start h",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:48:54.198322695 +0100\n+++ /tmp/tmpa7ndyuis.java\t2023-03-24 11:48:54.202322679 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // UTF-1 start h\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "if (tortoise.getSuccessor()!= null) // hare; but...",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:48:58.294306642 +0100\n+++ /tmp/tmpzhrievyg.java\t2023-03-24 11:48:58.298306627 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor()!= null) // hare; but...\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "if (hare.getSuccessor()!= null) // UTF-1 just",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:49:02.282291014 +0100\n+++ /tmp/tmpeb6rab67.java\t2023-03-24 11:49:02.286290998 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // UTF-1 just\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "if (hare.getSuccessor()!= null) // term in case",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:49:06.410274835 +0100\n+++ /tmp/tmp4edcmt1h.java\t2023-03-24 11:49:06.410274835 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // term in case\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "if (hare.getSuccessor()!= null) // UTF-8 codepoint",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:49:10.530258684 +0100\n+++ /tmp/tmplp0qskr7.java\t2023-03-24 11:49:10.530258684 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // UTF-8 codepoint\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "if (hare.getSuccessor()!= null) // false; tortoise!",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:49:14.666242472 +0100\n+++ /tmp/tmphfo9a3xc.java\t2023-03-24 11:49:14.666242472 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // false; tortoise!\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "if (hare.getSuccessor()!= null) // NOS.getSuccessor();",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:49:19.298224313 +0100\n+++ /tmp/tmpkezi1hai.java\t2023-03-24 11:49:19.302224298 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // NOS.getSuccessor();\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "if (hare.getSuccessor()!= null) // token",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:49:23.334208490 +0100\n+++ /tmp/tmpvr95db07.java\t2023-03-24 11:49:23.338208474 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // token\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "if (hare.getSuccessor()!= null) // UTF8",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:49:28.782187128 +0100\n+++ /tmp/tmpt7zapi2p.java\t2023-03-24 11:49:28.782187128 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // UTF8\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "if (tortoise == null) // non-loops in case",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:49:33.302169405 +0100\n+++ /tmp/tmp700pwqg_.java\t2023-03-24 11:49:33.302169405 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise == null) // non-loops in case\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "if (tortoise.getSuccessor()!= null) // hare == null",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:49:39.090146707 +0100\n+++ /tmp/tmpvgv27has.java\t2023-03-24 11:49:39.090146707 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor()!= null) // hare == null\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "if (tortoise.getSuccessor()!= null) // and hare, null",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:49:44.730124586 +0100\n+++ /tmp/tmp0awcu1g3.java\t2023-03-24 11:49:44.734124571 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor()!= null) // and hare, null\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "if (tortoise.getSuccessor() == null) // no distance",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:49:50.474102058 +0100\n+++ /tmp/tmppp3bxvrh.java\t2023-03-24 11:49:50.474102058 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor() == null) // no distance\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "if (hare.getSuccessor()!= null) // special case",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:49:55.326083025 +0100\n+++ /tmp/tmp9fx6lpla.java\t2023-03-24 11:49:55.330083009 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // special case\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "if (hare.getSuccessor()!= null) // UTF-16,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:49:59.650066062 +0100\n+++ /tmp/tmpsi2ipg0g.java\t2023-03-24 11:49:59.654066046 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // UTF-16,\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "if (hare.getSuccessor()!= null) // skip first",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:50:04.850045661 +0100\n+++ /tmp/tmpbpfrlywt.java\t2023-03-24 11:50:04.850045661 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // skip first\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "if (hare.getSuccessor()!= null) // term tortoise;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:50:10.786022371 +0100\n+++ /tmp/tmp4znqqsrw.java\t2023-03-24 11:50:10.786022371 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // term tortoise;\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "if (tortoise.getSuccessor()!= null) // no distance",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:50:16.406000317 +0100\n+++ /tmp/tmpuahqiz_0.java\t2023-03-24 11:50:16.406000317 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor()!= null) // no distance\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "if (hare.getSuccessor()!= null) // UTF-1123 anyway",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:50:21.169981622 +0100\n+++ /tmp/tmpfgyaggxj.java\t2023-03-24 11:50:21.169981622 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // UTF-1123 anyway\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "if (tortoise.getSuccessor() == null) { // special case",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:50:27.005958719 +0100\n+++ /tmp/tmpj4_4l3qp.java\t2023-03-24 11:50:27.005958719 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor() == null) { // special case\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "if (hare.getSuccessor()!= null) // LazyPointsPoints",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:50:29.069950618 +0100\n+++ /tmp/tmpr8o8x6_0.java\t2023-03-24 11:50:29.069950618 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // LazyPointsPoints\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "if (tortoise.getSuccessor!= null)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:50:33.885931715 +0100\n+++ /tmp/tmpkbdjb4xx.java\t2023-03-24 11:50:33.885931715 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor!= null)\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "if (hare.getSuccessor()!= null) //",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:50:35.721924507 +0100\n+++ /tmp/tmply6m5rwd.java\t2023-03-24 11:50:35.721924507 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) //\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "if (tortoise.getSuccessor()!= null) //\", null",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:50:40.405906122 +0100\n+++ /tmp/tmpq1jkck05.java\t2023-03-24 11:50:40.405906122 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise.getSuccessor()!= null) //\", null\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "if (hare.getSuccessor()!= null) //!",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:50:45.833884812 +0100\n+++ /tmp/tmp7lmi0pkz.java\t2023-03-24 11:50:45.833884812 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) //!\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "if (hare.getSuccessor()!= null) //Layout",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:50:50.261867426 +0100\n+++ /tmp/tmpwznwh9yc.java\t2023-03-24 11:50:50.261867426 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) //Layout\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "if (hare.getSuccessor()!= null) //ian",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:50:56.197844121 +0100\n+++ /tmp/tmpbt4927u_.java\t2023-03-24 11:50:56.317843650 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) //ian\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "if (tortoise == null) // may be null",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:51:00.585826891 +0100\n+++ /tmp/tmpcitq6o4b.java\t2023-03-24 11:51:00.585826891 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise == null) // may be null\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "if (hare.getSuccessor()!= null) // return false;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:51:04.581811199 +0100\n+++ /tmp/tmp5qutc5pd.java\t2023-03-24 11:51:04.585811184 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // return false;\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "if (hare.getSuccessor()!= null) // users",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:51:08.749794831 +0100\n+++ /tmp/tmpxpiw8cgl.java\t2023-03-24 11:51:08.749794831 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null) // users\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "if (tortoise == null)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:51:12.649779514 +0100\n+++ /tmp/tmp5hufrs5p.java\t2023-03-24 11:51:12.649779514 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise == null)\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "if (tortoise == null) // no distance",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:51:16.749763412 +0100\n+++ /tmp/tmpd7n1t8js.java\t2023-03-24 11:51:16.749763412 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise == null) // no distance\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "if (hare.getSuccessor()!= null;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:51:20.773747606 +0100\n+++ /tmp/tmpw5xjlum6.java\t2023-03-24 11:51:20.773747606 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null;\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "if (hare.getSuccessor!= null) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:51:22.505740803 +0100\n+++ /tmp/tmppe4wd8nv.java\t2023-03-24 11:51:22.505740803 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor!= null) {\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "if (tort.getSuccessor()!= null)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:51:24.265733892 +0100\n+++ /tmp/tmpk7r8h8bc.java\t2023-03-24 11:51:24.265733892 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tort.getSuccessor()!= null)\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "if (hare.getSuccessor(\"!= null)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:51:26.365725642 +0100\n+++ /tmp/tmpf7ul82ah.java\t2023-03-24 11:51:26.365725642 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor(\"!= null)\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "if (mare.getSuccessor()!= null)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:51:28.025719121 +0100\n+++ /tmp/tmpcfglprlo.java\t2023-03-24 11:51:28.025719121 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (mare.getSuccessor()!= null)\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "if (hare.getSuccessor()!= null){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:51:29.941711594 +0100\n+++ /tmp/tmpov6l9qul.java\t2023-03-24 11:51:29.941711594 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null){\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "if (hare.getSuccessor()!= null &&",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:51:31.745704507 +0100\n+++ /tmp/tmpyaddqyp_.java\t2023-03-24 11:51:31.745704507 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (hare.getSuccessor()!= null &&\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "if (tortoise!= null)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/detect_cycle/java_programs/DETECT_CYCLE.java\t2023-03-24 11:51:33.525697515 +0100\n+++ /tmp/tmpm3gbv0ul.java\t2023-03-24 11:51:33.525697515 +0100\n@@ -13,11 +13,11 @@\n     public static boolean detect_cycle(Node node) {\n         Node hare = node;\n         Node tortoise = node;\n \n         while (true) {\n-            if (hare.getSuccessor() == null)\n+if (tortoise!= null)\n                 return false;\n \n             tortoise = tortoise.getSuccessor();\n             hare = hare.getSuccessor().getSuccessor();\n \n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "if (null==hare ||hare.getSuccessor() == null)"
    },
    "kheapsort": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "for (Integer x : arr.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:16.942468636 +0100\n+++ /tmp/tmpcmiszwj8.java\t2023-03-24 11:48:17.010468370 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.length;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "for (Integer x : arr.parent;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:18.762461509 +0100\n+++ /tmp/tmpozf90ie8.java\t2023-03-24 11:48:18.762461509 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.parent;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "for (Integer x : arr.next;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:20.430454978 +0100\n+++ /tmp/tmpktghord6.java\t2023-03-24 11:48:20.430454978 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.next;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "for (Integer x : arr.start(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:22.086448493 +0100\n+++ /tmp/tmpzghf2939.java\t2023-03-24 11:48:22.090448478 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.start(1);\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "for (Integer x : arr.parent) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:23.806441757 +0100\n+++ /tmp/tmpa163e8eq.java\t2023-03-24 11:48:23.806441757 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.parent) {\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "for (Integer x : arr.start(1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:25.514435068 +0100\n+++ /tmp/tmp1zwohyq3.java\t2023-03-24 11:48:25.514435068 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.start(1) {\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "for (Integer x : arr.left;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:27.218428394 +0100\n+++ /tmp/tmpcby9maes.java\t2023-03-24 11:48:27.218428394 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.left;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "for (Integer x : arr.result;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:29.010421374 +0100\n+++ /tmp/tmpbu9rcd_e.java\t2023-03-24 11:48:29.010421374 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.result;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "for (Integer x : child.parent;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:30.626415045 +0100\n+++ /tmp/tmp9_v_bsog.java\t2023-03-24 11:48:30.626415045 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : child.parent;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "for (Integer x : arr.size;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:32.402408088 +0100\n+++ /tmp/tmp11z5cxxu.java\t2023-03-24 11:48:32.402408088 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.size;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "for (Integer x : arr.start;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:34.126401336 +0100\n+++ /tmp/tmpcfajfzn8.java\t2023-03-24 11:48:34.126401336 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.start;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "for (Integer x : arr.enc;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:35.854394566 +0100\n+++ /tmp/tmp54wrt7l3.java\t2023-03-24 11:48:35.854394566 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.enc;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "for (Integer x : arr.readBytes;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:37.570387844 +0100\n+++ /tmp/tmp_9_7o97b.java\t2023-03-24 11:48:37.574387828 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.readBytes;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "for (Integer x : arr.input;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:39.286381121 +0100\n+++ /tmp/tmpgynun4zq.java\t2023-03-24 11:48:39.286381121 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.input;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "for (Integer x : arr.TEXT;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:40.962374556 +0100\n+++ /tmp/tmp1tme4z9r.java\t2023-03-24 11:48:40.962374556 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.TEXT;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "for (Integer x : arr.values;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:42.642367974 +0100\n+++ /tmp/tmp7j0xps4g.java\t2023-03-24 11:48:42.646367958 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.values;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "for (Integer x : lastName;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:44.334361344 +0100\n+++ /tmp/tmpbnjmwqgi.java\t2023-03-24 11:48:44.334361344 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : lastName;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "for (Integer x : arr.base;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:46.130354308 +0100\n+++ /tmp/tmpgs4xfb4u.java\t2023-03-24 11:48:46.130354308 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.base;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "for (Integer x : arr.a;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:47.810347725 +0100\n+++ /tmp/tmp7_120z09.java\t2023-03-24 11:48:47.810347725 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.a;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "for (Integer x : arr.separatorChar;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:49.550340908 +0100\n+++ /tmp/tmp2p00mrrk.java\t2023-03-24 11:48:49.550340908 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.separatorChar;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "for (Integer x : arr.subList;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:51.198334450 +0100\n+++ /tmp/tmp0vb0z1pt.java\t2023-03-24 11:48:51.198334450 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.subList;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "for (Integer x : endpoint.parent;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:52.910327742 +0100\n+++ /tmp/tmph6i6l2jc.java\t2023-03-24 11:48:52.910327742 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : endpoint.parent;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "for (Integer x : arr.api;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:54.666320860 +0100\n+++ /tmp/tmp_3uyz3yb.java\t2023-03-24 11:48:54.670320844 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.api;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "for (Integer x : arr.trace;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:56.254314638 +0100\n+++ /tmp/tmprhdisp0p.java\t2023-03-24 11:48:56.258314622 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.trace;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "for (Integer x : arr.right;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:57.962307943 +0100\n+++ /tmp/tmpbwckbogu.java\t2023-03-24 11:48:57.962307943 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.right;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "for (Integer x : arr.SIZE;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:48:59.562301672 +0100\n+++ /tmp/tmpiwpgnk_f.java\t2023-03-24 11:48:59.562301672 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.SIZE;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "for (Integer x : arr.children;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:01.234295120 +0100\n+++ /tmp/tmpcosw_4h7.java\t2023-03-24 11:49:01.234295120 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.children;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "for (Integer x : arr.query;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:02.978288285 +0100\n+++ /tmp/tmp5d3xpou3.java\t2023-03-24 11:49:02.978288285 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.query;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "for (Integer x : graph.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:04.670281654 +0100\n+++ /tmp/tmpzsvmhgs7.java\t2023-03-24 11:49:04.670281654 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : graph.length;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "for (Integer x : arr.seq;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:06.378274959 +0100\n+++ /tmp/tmpxlu_83aj.java\t2023-03-24 11:49:06.378274959 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.seq;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "for (Integer x : arr.order) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:08.082268281 +0100\n+++ /tmp/tmpnatzll2r.java\t2023-03-24 11:49:08.082268281 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.order) {\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "for (Integer x : arr.query) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:09.854261336 +0100\n+++ /tmp/tmph80q42v2.java\t2023-03-24 11:49:09.854261336 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.query) {\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "for (Integer x : arr.readString;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:11.598254499 +0100\n+++ /tmp/tmp6rjd_s_x.java\t2023-03-24 11:49:11.598254499 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.readString;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "for (Integer x : arr.traceId;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:13.306247803 +0100\n+++ /tmp/tmpun1hct2l.java\t2023-03-24 11:49:13.306247803 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.traceId;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "for (Integer x : arr.traceNumber;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:14.926241453 +0100\n+++ /tmp/tmprfhd947_.java\t2023-03-24 11:49:14.926241453 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.traceNumber;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "for (Integer x : arr.writeNumber;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:16.558235055 +0100\n+++ /tmp/tmper9xi67o.java\t2023-03-24 11:49:16.558235055 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.writeNumber;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "for (Integer x : value.parent;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:18.306228203 +0100\n+++ /tmp/tmpgu_kj8_j.java\t2023-03-24 11:49:18.306228203 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : value.parent;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "for (Integer x : arr.startNode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:20.606219186 +0100\n+++ /tmp/tmpe8qyrdb3.java\t2023-03-24 11:49:20.606219186 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.startNode;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "for (Integer x : arr.parenthesis;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:22.470211877 +0100\n+++ /tmp/tmpy5m_wcev.java\t2023-03-24 11:49:22.470211877 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.parenthesis;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "for (Integer x : arr.count;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:24.946202170 +0100\n+++ /tmp/tmpf_zw25ci.java\t2023-03-24 11:49:25.010201918 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.count;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "for (Integer x : arr.tableRoutes;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:27.170193450 +0100\n+++ /tmp/tmpm0149m6h.java\t2023-03-24 11:49:27.326192839 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.tableRoutes;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "for (Integer x : gpped.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:28.842186893 +0100\n+++ /tmp/tmpjnqzt6p9.java\t2023-03-24 11:49:28.842186893 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : gpped.length;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "for (Integer x : arr.US;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:30.842179052 +0100\n+++ /tmp/tmp8wmmx8fc.java\t2023-03-24 11:49:30.842179052 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.US;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "for (Integer x : arr.excess;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:32.730171648 +0100\n+++ /tmp/tmpbvi7caaj.java\t2023-03-24 11:49:32.910170942 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.excess;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "for (Integer x : arr.startIndex;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:34.878163225 +0100\n+++ /tmp/tmpk_kk8jpb.java\t2023-03-24 11:49:34.878163225 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.startIndex;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "for (Integer x : uri;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:36.822155601 +0100\n+++ /tmp/tmpfoo36s7l.java\t2023-03-24 11:49:37.046154723 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : uri;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "for (Integer x : arr.value;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:39.262146033 +0100\n+++ /tmp/tmp4_yffmsa.java\t2023-03-24 11:49:39.262146033 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.value;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "for (Integer x : arr.id;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:41.134138690 +0100\n+++ /tmp/tmp4wiuymo_.java\t2023-03-24 11:49:41.194138455 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.id;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "for (Integer x : arr.cacheKey;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:43.234130455 +0100\n+++ /tmp/tmp9r879wa8.java\t2023-03-24 11:49:43.374129905 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.cacheKey;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "for (Integer x : arr.writeString;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:44.942123756 +0100\n+++ /tmp/tmpx8q6h6s_.java\t2023-03-24 11:49:44.946123741 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.writeString;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "for (Integer x : arr.vertexList;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:46.726116759 +0100\n+++ /tmp/tmpwke5idsb.java\t2023-03-24 11:49:46.786116523 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.vertexList;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "for (Integer x : arr.weight;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:48.462109949 +0100\n+++ /tmp/tmppybs_g5y.java\t2023-03-24 11:49:48.602109401 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.weight;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "for (Integer x : v.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:50.386102403 +0100\n+++ /tmp/tmpc946avlk.java\t2023-03-24 11:49:50.390102387 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : v.length;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "for (Integer x : arr.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:52.554093898 +0100\n+++ /tmp/tmp6_wkq_eo.java\t2023-03-24 11:49:52.666093458 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.length) {\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "for (Integer x : arr.apiException;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:54.870084813 +0100\n+++ /tmp/tmpjt0tpns9.java\t2023-03-24 11:49:54.898084702 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.apiException;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "for (Integer y : arr.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:56.886076905 +0100\n+++ /tmp/tmp88xms7_a.java\t2023-03-24 11:49:56.886076905 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer y : arr.length;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "for (Integer x : arr.parentText;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:49:59.074068321 +0100\n+++ /tmp/tmpcb8mhkfm.java\t2023-03-24 11:49:59.222067741 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.parentText;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "for (Integer x : arr.key) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:01.290059628 +0100\n+++ /tmp/tmpfl8ik1pz.java\t2023-03-24 11:50:01.290059628 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.key) {\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "for (Integer x : endpoint.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:03.598050573 +0100\n+++ /tmp/tmp1q4rwlwf.java\t2023-03-24 11:50:03.598050573 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : endpoint.length;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "for (Integer x : arr.variableCount;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:05.110044640 +0100\n+++ /tmp/tmpxb3kyyhs.java\t2023-03-24 11:50:05.110044640 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.variableCount;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "for (Integer x : arr. 23) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:06.862037767 +0100\n+++ /tmp/tmpxrla75ym.java\t2023-03-24 11:50:06.862037767 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr. 23) {\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "for (Integer x : arr.vertex;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:09.014029323 +0100\n+++ /tmp/tmp6wluhs_p.java\t2023-03-24 11:50:09.014029323 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.vertex;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "for (Integer x : arr.data;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:10.578023187 +0100\n+++ /tmp/tmpbdfxt_rt.java\t2023-03-24 11:50:10.630022982 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.data;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "for (Integer x : arr.mapper;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:12.598015260 +0100\n+++ /tmp/tmp3_szv130.java\t2023-03-24 11:50:12.598015260 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.mapper;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "for (Integer x : arr.Tail;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:15.530003755 +0100\n+++ /tmp/tmpjrdzs691.java\t2023-03-24 11:50:15.694003112 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.Tail;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "for (int x : arr.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:17.761994995 +0100\n+++ /tmp/tmpe8q210o2.java\t2023-03-24 11:50:17.761994995 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (int x : arr.length;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "for (Integer x : arr.model;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:19.909986567 +0100\n+++ /tmp/tmppz6_px2z.java\t2023-03-24 11:50:20.045986033 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.model;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "for (Integer x : arr.UTF_8;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:21.605979911 +0100\n+++ /tmp/tmpo5jv24qy.java\t2023-03-24 11:50:21.605979911 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.UTF_8;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "for (Integer x : arr.RESOURCE;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:23.617972015 +0100\n+++ /tmp/tmpy_qu2_65.java\t2023-03-24 11:50:23.617972015 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.RESOURCE;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "for (Integer x : arr.msg;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:25.445964841 +0100\n+++ /tmp/tmp810fa3vt.java\t2023-03-24 11:50:25.449964825 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.msg;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "for (Integer x : arr. Order;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:27.045958561 +0100\n+++ /tmp/tmpx26t5fmk.java\t2023-03-24 11:50:27.045958561 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr. Order;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "for (Integer x : arr.offset;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:29.065950634 +0100\n+++ /tmp/tmpnv1hdjbp.java\t2023-03-24 11:50:29.065950634 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.offset;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "for (Integer x : arr.next;;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:30.885943489 +0100\n+++ /tmp/tmpq7ogt5vt.java\t2023-03-24 11:50:31.013942987 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.next;;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "for (Integer x : gpped;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:33.069934918 +0100\n+++ /tmp/tmp8qcrs_94.java\t2023-03-24 11:50:33.073934902 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : gpped;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "for (Integer x : tags.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:35.385925827 +0100\n+++ /tmp/tmpwispohfl.java\t2023-03-24 11:50:35.513925325 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : tags.length;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "for (Integer x : endDate.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:37.565917270 +0100\n+++ /tmp/tmpbcaczfei.java\t2023-03-24 11:50:37.673916846 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : endDate.length;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "for (Integer x : arr.duration;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:39.789908538 +0100\n+++ /tmp/tmpfts04_zd.java\t2023-03-24 11:50:39.793908523 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.duration;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "for (Integer x : arr. TH;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:41.421902133 +0100\n+++ /tmp/tmp4mstu_5c.java\t2023-03-24 11:50:41.421902133 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr. TH;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "for (Integer x : order.parent;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:42.973896040 +0100\n+++ /tmp/tmpsyt5hwxm.java\t2023-03-24 11:50:42.973896040 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : order.parent;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "for (Integer x : y;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:45.517886052 +0100\n+++ /tmp/tmpk2avjbh2.java\t2023-03-24 11:50:45.517886052 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : y;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "for (Integer x : arr.status;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:47.497878279 +0100\n+++ /tmp/tmp4k38nyyr.java\t2023-03-24 11:50:47.497878279 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.status;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "for (Integer x : arr.attributes;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:49.617869955 +0100\n+++ /tmp/tmp0swz7bnm.java\t2023-03-24 11:50:49.677869721 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.attributes;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "for (Integer x : arr.reader;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:52.237859669 +0100\n+++ /tmp/tmptcw3wze9.java\t2023-03-24 11:50:52.237859669 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.reader;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "for (Integer x : dir;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:54.257851738 +0100\n+++ /tmp/tmp49zvokw6.java\t2023-03-24 11:50:54.341851409 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : dir;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "for (Integer x : arr.long;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:56.181844184 +0100\n+++ /tmp/tmpwvg4cqqh.java\t2023-03-24 11:50:56.317843650 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.long;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "for (Integer x : 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:50:58.245836080 +0100\n+++ /tmp/tmpdbsgth7d.java\t2023-03-24 11:50:58.245836080 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : 1;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "for (Integer x : arr.4,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:51:00.009829152 +0100\n+++ /tmp/tmpq84238tr.java\t2023-03-24 11:51:00.009829152 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.4,\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "for (Integer x : arr.ClassName;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:51:01.649822713 +0100\n+++ /tmp/tmpfd24u7uo.java\t2023-03-24 11:51:01.649822713 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.ClassName;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "for (Integer x : arr.start);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:51:03.381815912 +0100\n+++ /tmp/tmpy5yvqc63.java\t2023-03-24 11:51:03.381815912 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.start);\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "for (Integer x : arr.timeout;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:51:05.057809331 +0100\n+++ /tmp/tmpjvih2md4.java\t2023-03-24 11:51:05.057809331 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.timeout;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "for (Integer x : span;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:51:06.677802969 +0100\n+++ /tmp/tmpwdz5u0vs.java\t2023-03-24 11:51:06.677802969 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : span;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "for (Integer x : value.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:51:08.393796229 +0100\n+++ /tmp/tmpthdvtk2x.java\t2023-03-24 11:51:08.397796213 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : value.length;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "for (Integer x : arr. missing;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:51:10.105789506 +0100\n+++ /tmp/tmpc83x49om.java\t2023-03-24 11:51:10.105789506 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr. missing;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "for (Integer x : arr.component;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:51:11.709783207 +0100\n+++ /tmp/tmpcfnvfe7f.java\t2023-03-24 11:51:11.709783207 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.component;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "for (Integer x : arr.child;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:51:13.409776530 +0100\n+++ /tmp/tmp01lftav_.java\t2023-03-24 11:51:13.409776530 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.child;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "for (Integer x : arr.head;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:51:15.077769979 +0100\n+++ /tmp/tmpovk4ucxv.java\t2023-03-24 11:51:15.081769963 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.head;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "for (Integer x : arr.Util;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:51:16.793763239 +0100\n+++ /tmp/tmpv0a4jt9j.java\t2023-03-24 11:51:16.837763067 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.Util;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "for (Integer x : g;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:51:18.529756422 +0100\n+++ /tmp/tmpgi1mi5en.java\t2023-03-24 11:51:18.529756422 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : g;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "for (Integer x : count;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:51:20.185749916 +0100\n+++ /tmp/tmpdeaa79qn.java\t2023-03-24 11:51:20.185749916 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : count;\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "for (Integer x : arr.UTF_8 {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kheapsort/java_programs/KHEAPSORT.java\t2023-03-24 11:51:21.741743805 +0100\n+++ /tmp/tmporj5iq59.java\t2023-03-24 11:51:21.741743805 +0100\n@@ -22,11 +22,11 @@\n         for (Integer v : arr.subList(0,k)) {\n             heap.add(v);\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-        for (Integer x : arr) {\n+for (Integer x : arr.UTF_8 {\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n         }\n \n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "for (Integer x : arr.subList(k, arr.size())) {"
    },
    "pascal": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "for (int c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:51:26.093726710 +0100\n+++ /tmp/tmph74260p6.java\t2023-03-24 11:51:26.149726489 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "for(int c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:51:30.261710337 +0100\n+++ /tmp/tmpzgj20_lj.java\t2023-03-24 11:51:30.261710337 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for(int c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "for (int c=1; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:51:34.073695363 +0100\n+++ /tmp/tmpkrow7s8v.java\t2023-03-24 11:51:34.073695363 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=1; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "for (int c = 0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:51:38.085679601 +0100\n+++ /tmp/tmp4fs56ysf.java\t2023-03-24 11:51:38.093679569 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c = 0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "for (int cct = 0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:51:42.241663271 +0100\n+++ /tmp/tmpm9hgwahg.java\t2023-03-24 11:51:42.241663271 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cct = 0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "for (char c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:51:44.029656247 +0100\n+++ /tmp/tmp0nmd0xw1.java\t2023-03-24 11:51:44.029656247 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (char c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "for ((int c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:51:48.117640184 +0100\n+++ /tmp/tmpdzydimns.java\t2023-03-24 11:51:48.125640152 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for ((int c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "for (int c0=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:51:49.849633379 +0100\n+++ /tmp/tmp47sjy3fx.java\t2023-03-24 11:51:49.849633379 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c0=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "for (_int c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:51:51.621626416 +0100\n+++ /tmp/tmpqnslomok.java\t2023-03-24 11:51:51.621626416 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (_int c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "for (int c=0; i<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:51:53.385619484 +0100\n+++ /tmp/tmp5sblu1pz.java\t2023-03-24 11:51:53.385619484 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0; i<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "for (int c=0; c<false; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:51:55.149612553 +0100\n+++ /tmp/tmp_u00e12v.java\t2023-03-24 11:51:55.149612553 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0; c<false; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "for (int cuck = 0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:51:56.909605636 +0100\n+++ /tmp/tmporo37px2.java\t2023-03-24 11:51:56.909605636 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cuck = 0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "if (int c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:51:58.681598673 +0100\n+++ /tmp/tmpi1bwo9e3.java\t2023-03-24 11:51:58.685598657 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+if (int c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "for (Integer c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:00.457591693 +0100\n+++ /tmp/tmpmdaufofo.java\t2023-03-24 11:52:00.457591693 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (Integer c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "for (int c3 c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:04.521575720 +0100\n+++ /tmp/tmp4wll4u2l.java\t2023-03-24 11:52:04.525575707 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c3 c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "for (int c4 = 0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:06.217569056 +0100\n+++ /tmp/tmp_8w788y5.java\t2023-03-24 11:52:06.217569056 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c4 = 0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "for (int cval=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:08.017561981 +0100\n+++ /tmp/tmpki7n9w0g.java\t2023-03-24 11:52:08.021561965 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cval=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "for (int c-1=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:09.781555048 +0100\n+++ /tmp/tmpwxvpng9y.java\t2023-03-24 11:52:09.785555032 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c-1=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "for (int c getR c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:11.553548084 +0100\n+++ /tmp/tmp1b0vu9uj.java\t2023-03-24 11:52:11.553548084 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c getR c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "for (int cFlush c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:13.289541260 +0100\n+++ /tmp/tmph6mu561q.java\t2023-03-24 11:52:13.293541244 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cFlush c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "for (int c Vert = 0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:14.981534610 +0100\n+++ /tmp/tmp4dxo5tm2.java\t2023-03-24 11:52:14.981534610 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c Vert = 0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "for (int ceval = 0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:16.653528038 +0100\n+++ /tmp/tmpjj433lib.java\t2023-03-24 11:52:16.653528038 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int ceval = 0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "for (int c interf = 0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:18.437521025 +0100\n+++ /tmp/tmp6tgxkt3k.java\t2023-03-24 11:52:18.437521025 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c interf = 0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "for (int c perm perm=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:20.145514311 +0100\n+++ /tmp/tmpz0ijjqpx.java\t2023-03-24 11:52:20.145514311 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c perm perm=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "for (int cRandom = 0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:21.805507786 +0100\n+++ /tmp/tmpgcd7yxfa.java\t2023-03-24 11:52:21.805507786 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cRandom = 0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "for (int cmisc = 0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:23.553500915 +0100\n+++ /tmp/tmpifyc881_.java\t2023-03-24 11:52:23.553500915 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cmisc = 0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "for (int cConversion = 0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:25.293494075 +0100\n+++ /tmp/tmpm22ad0ym.java\t2023-03-24 11:52:25.293494075 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cConversion = 0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "for (int c3 c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:27.069487093 +0100\n+++ /tmp/tmpiqglv071.java\t2023-03-24 11:52:27.073487077 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c3 c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "for (int c perm = 0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:28.725480582 +0100\n+++ /tmp/tmpddjladp5.java\t2023-03-24 11:52:28.729480566 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c perm = 0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "for (int cpd = 0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:30.441473837 +0100\n+++ /tmp/tmpgi5c2v2v.java\t2023-03-24 11:52:30.441473837 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cpd = 0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "for (int c performs = 0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:32.869464291 +0100\n+++ /tmp/tmp8jjbk_cp.java\t2023-03-24 11:52:32.869464291 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c performs = 0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "for (int c=' c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:35.405454320 +0100\n+++ /tmp/tmpmmuquxc4.java\t2023-03-24 11:52:35.405454320 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=' c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "for (int c0 = 0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:37.181447338 +0100\n+++ /tmp/tmpmoh5czkp.java\t2023-03-24 11:52:37.317446804 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c0 = 0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "for (int c9 = 0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:39.573437933 +0100\n+++ /tmp/tmp78016xqm.java\t2023-03-24 11:52:39.649437635 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c9 = 0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "for (int clied = 0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:41.765429315 +0100\n+++ /tmp/tmp5wq5zwl0.java\t2023-03-24 11:52:41.845429000 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int clied = 0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "for (int cByDefault = 0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:44.161419894 +0100\n+++ /tmp/tmp74efn7nj.java\t2023-03-24 11:52:44.201419736 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cByDefault = 0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "for (int ccapacity=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:46.169411998 +0100\n+++ /tmp/tmp8y8jd_sv.java\t2023-03-24 11:52:46.297411495 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int ccapacity=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "for (int c[0r=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:48.725401948 +0100\n+++ /tmp/tmpmyfe23iv.java\t2023-03-24 11:52:48.725401948 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c[0r=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "for (int c4=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:50.885393455 +0100\n+++ /tmp/tmp69ixo5o8.java\t2023-03-24 11:52:50.885393455 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c4=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "for (int cBounds=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:53.361383717 +0100\n+++ /tmp/tmp7k5cmwhm.java\t2023-03-24 11:52:53.361383717 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cBounds=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "for (int cPointers=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:55.937373588 +0100\n+++ /tmp/tmpmrao7gp3.java\t2023-03-24 11:52:56.001373336 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cPointers=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "for (int c nodeType=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:52:58.033365345 +0100\n+++ /tmp/tmpc4e2wfy1.java\t2023-03-24 11:52:58.033365345 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c nodeType=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "for (int cRedis = 0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:00.493355670 +0100\n+++ /tmp/tmp7vy9nm8r.java\t2023-03-24 11:53:00.517355576 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cRedis = 0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "for (int c; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:02.761346751 +0100\n+++ /tmp/tmpftp8kjik.java\t2023-03-24 11:53:02.901346200 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "for (int c=0; c<r; c<r++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:05.193337187 +0100\n+++ /tmp/tmp9rnmebq6.java\t2023-03-24 11:53:05.317336698 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0; c<r; c<r++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "for (int c]; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:07.405328487 +0100\n+++ /tmp/tmp1ok3f8k3.java\t2023-03-24 11:53:07.405328487 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c]; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "for((int c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:08.897322619 +0100\n+++ /tmp/tmp8m88vnh4.java\t2023-03-24 11:53:08.901322603 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for((int c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "for(int c=1; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:11.001314343 +0100\n+++ /tmp/tmpwxo_6em0.java\t2023-03-24 11:53:11.001314343 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for(int c=1; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "for (int cNum=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:16.405293087 +0100\n+++ /tmp/tmpcdzjdtux.java\t2023-03-24 11:53:16.405293087 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cNum=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "for (int c=0; c<50; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:19.061282640 +0100\n+++ /tmp/tmpvcf265ef.java\t2023-03-24 11:53:19.205282074 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0; c<50; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "for (int cptr=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:24.985259337 +0100\n+++ /tmp/tmpw0kzgd_j.java\t2023-03-24 11:53:24.985259337 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cptr=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "for (int c=0; r<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:27.209250588 +0100\n+++ /tmp/tmpwfyg0jzt.java\t2023-03-24 11:53:27.293250257 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0; r<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "for (int cDEFAULT; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:32.337230415 +0100\n+++ /tmp/tmppov7ohlb.java\t2023-03-24 11:53:32.341230399 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cDEFAULT; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "forint c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:34.233222955 +0100\n+++ /tmp/tmpvbx4divn.java\t2023-03-24 11:53:34.377222389 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+forint c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "for (int cbuf=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:35.817216722 +0100\n+++ /tmp/tmpw58cal1d.java\t2023-03-24 11:53:35.817216722 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cbuf=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "for (int c - 1; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:37.821208839 +0100\n+++ /tmp/tmpf4dd79g7.java\t2023-03-24 11:53:37.821208839 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c - 1; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "forBitint c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:39.757201221 +0100\n+++ /tmp/tmp1d29nqtn.java\t2023-03-24 11:53:39.917200592 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+forBitint c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "for (int c=0; c<r; c < r5) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:41.909192754 +0100\n+++ /tmp/tmp9ibkx7p9.java\t2023-03-24 11:53:41.909192754 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0; c<r; c < r5) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "for (int cB=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:44.877181077 +0100\n+++ /tmp/tmpe84cvzur.java\t2023-03-24 11:53:45.057180368 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cB=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "for (int c()=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:47.257171712 +0100\n+++ /tmp/tmplv5r0z9f.java\t2023-03-24 11:53:47.257171712 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c()=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "forerint c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:50.101160522 +0100\n+++ /tmp/tmpmj2leksq.java\t2023-03-24 11:53:50.201160128 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+forerint c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "for (int clat=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:52.477151173 +0100\n+++ /tmp/tmpkthnroj8.java\t2023-03-24 11:53:52.477151173 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int clat=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "for (int c=0; c<r; c < b++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:55.637138738 +0100\n+++ /tmp/tmp9ic_fo6t.java\t2023-03-24 11:53:55.737138345 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0; c<r; c < b++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "for (int cother=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:57.825130129 +0100\n+++ /tmp/tmpcxwp1__e.java\t2023-03-24 11:53:57.957129609 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cother=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "for (int c=0;c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:53:59.841122194 +0100\n+++ /tmp/tmp31vttij3.java\t2023-03-24 11:53:59.841122194 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0;c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "for (int cStart=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:05.245100928 +0100\n+++ /tmp/tmpu8xflb6e.java\t2023-03-24 11:54:05.245100928 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cStart=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "for (int c=0; current<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:07.233093104 +0100\n+++ /tmp/tmpkqrunqm3.java\t2023-03-24 11:54:07.305092820 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0; current<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "for (int c=0; c<r; c < i++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:09.345084793 +0100\n+++ /tmp/tmp99wft582.java\t2023-03-24 11:54:09.497084194 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0; c<r; c < i++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "for (int cRead=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:11.669075647 +0100\n+++ /tmp/tmp87pbqz4h.java\t2023-03-24 11:54:11.717075457 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cRead=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "for (int c=0; c<r; c--) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:13.533068309 +0100\n+++ /tmp/tmp42ion_wo.java\t2023-03-24 11:54:13.533068309 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0; c<r; c--) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "for (int c=0; c<r; c < r=1; {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:17.601052298 +0100\n+++ /tmp/tmp414tryta.java\t2023-03-24 11:54:17.601052298 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0; c<r; c < r=1; {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "for (int c2()=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:19.305045591 +0100\n+++ /tmp/tmpm3963_9a.java\t2023-03-24 11:54:19.313045560 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c2()=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "for (int cDescent=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:21.049038728 +0100\n+++ /tmp/tmprxcbzu0q.java\t2023-03-24 11:54:21.053038713 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cDescent=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "for (int c perm=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:22.853031627 +0100\n+++ /tmp/tmp74mn__og.java\t2023-03-24 11:54:22.857031612 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c perm=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "for(_int c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:24.529025029 +0100\n+++ /tmp/tmpvduj_z78.java\t2023-03-24 11:54:24.533025013 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for(_int c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "for (int c* c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:26.345017882 +0100\n+++ /tmp/tmp1ub96_j4.java\t2023-03-24 11:54:26.345017882 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c* c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "for width=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:27.997011379 +0100\n+++ /tmp/tmpyhco4mfz.java\t2023-03-24 11:54:27.997011379 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for width=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "for (int c=0; c < r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:29.673004782 +0100\n+++ /tmp/tmpl3_4awq6.java\t2023-03-24 11:54:29.673004782 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0; c < r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "forQueueint c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:33.560989477 +0100\n+++ /tmp/tmp_q5szr1k.java\t2023-03-24 11:54:33.560989477 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+forQueueint c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "for Astint c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:35.144983241 +0100\n+++ /tmp/tmpzn6f3du6.java\t2023-03-24 11:54:35.148983225 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for Astint c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "for int c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:36.892976360 +0100\n+++ /tmp/tmpcgizlf_d.java\t2023-03-24 11:54:36.892976360 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for int c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "for forint c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:38.572969746 +0100\n+++ /tmp/tmpvc42mdri.java\t2023-03-24 11:54:38.572969746 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for forint c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "forASint c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:40.308962911 +0100\n+++ /tmp/tmpzb79ipkt.java\t2023-03-24 11:54:40.312962896 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+forASint c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "for (\"int c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:41.956956425 +0100\n+++ /tmp/tmp3_wu8hoi.java\t2023-03-24 11:54:41.956956425 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (\"int c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "for fromint c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:43.684949622 +0100\n+++ /tmp/tmpp1nifyll.java\t2023-03-24 11:54:43.684949622 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for fromint c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "for (int c[0 c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:45.296943275 +0100\n+++ /tmp/tmpcu3g8a_0.java\t2023-03-24 11:54:45.296943275 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c[0 c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "for shardint c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:46.992936598 +0100\n+++ /tmp/tmpeqf_ik35.java\t2023-03-24 11:54:46.992936598 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for shardint c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "for (int c=0; c<2; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:48.744929700 +0100\n+++ /tmp/tmpsqxgl8uw.java\t2023-03-24 11:54:48.744929700 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0; c<2; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "for (int cGI c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:52.860913495 +0100\n+++ /tmp/tmp5_1iglmh.java\t2023-03-24 11:54:52.860913495 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int cGI c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "for (int c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:54.520906960 +0100\n+++ /tmp/tmpf8rodf7k.java\t2023-03-24 11:54:54.524906944 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "for(?int c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:56.224900249 +0100\n+++ /tmp/tmp7qbkg6mh.java\t2023-03-24 11:54:56.224900249 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for(?int c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "for (int c=0; c<r; c < r=1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:57.808894013 +0100\n+++ /tmp/tmp_nn9w34b.java\t2023-03-24 11:54:57.808894013 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0; c<r; c < r=1;\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "forcolumnint c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:54:59.544887178 +0100\n+++ /tmp/tmpey655vnr.java\t2023-03-24 11:54:59.544887178 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+forcolumnint c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "for (int c=0; c<r; c 180 {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:55:01.296880279 +0100\n+++ /tmp/tmpusuopwwo.java\t2023-03-24 11:55:01.300880263 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0; c<r; c 180 {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "for (int c-1; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:55:02.956873743 +0100\n+++ /tmp/tmpbpygv816.java\t2023-03-24 11:55:02.956873743 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c-1; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "for (int c=0; c<r; c < n++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:55:04.672866986 +0100\n+++ /tmp/tmpko5qo2j4.java\t2023-03-24 11:55:04.672866986 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0; c<r; c < n++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "for('/', c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:55:06.292860606 +0100\n+++ /tmp/tmp37y0g994.java\t2023-03-24 11:55:06.296860590 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for('/', c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "for (int c=0; c<r; c < b5) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:55:07.936854134 +0100\n+++ /tmp/tmp4m5s6v4u.java\t2023-03-24 11:55:07.936854134 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for (int c=0; c<r; c < b5) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "for >>> c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:55:09.648847392 +0100\n+++ /tmp/tmporncqlmu.java\t2023-03-24 11:55:09.648847392 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for >>> c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "for Sim c=0; c<r; c++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/pascal/java_programs/PASCAL.java\t2023-03-24 11:55:11.344840713 +0100\n+++ /tmp/tmpqx2gq125.java\t2023-03-24 11:55:11.344840713 +0100\n@@ -17,11 +17,11 @@\n         init.add(1);\n         rows.add(init);\n \n         for (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-            for (int c=0; c<r; c++) {\n+for Sim c=0; c<r; c++) {\n                 int upleft, upright;\n                 if (c > 0) {\n                     upleft = rows.get(r-1).get(c-1);\n                 } else {\n                     upleft = 0;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "for (int c=0; c<r+1; c++) {"
    },
    "possible_change": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "if (total < 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:51:39.649673456 +0100\n+++ /tmp/tmp7v6459pa.java\t2023-03-24 11:51:39.701673251 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "if (total < 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:51:43.893656781 +0100\n+++ /tmp/tmp64o7rufn.java\t2023-03-24 11:51:43.893656781 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 1) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "if (total >= 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:51:48.093640279 +0100\n+++ /tmp/tmpuxh33ek3.java\t2023-03-24 11:51:48.093640279 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total >= 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "if (total == 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:51:52.173624247 +0100\n+++ /tmp/tmpxey1pj0l.java\t2023-03-24 11:51:52.173624247 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total == 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "if (total <= 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:51:56.249608229 +0100\n+++ /tmp/tmpn73lk8ta.java\t2023-03-24 11:51:56.249608229 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total <= 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "if (total.length < 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:00.389591961 +0100\n+++ /tmp/tmpize9banw.java\t2023-03-24 11:52:00.389591961 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total.length < 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "if (total.length!= 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:02.201584839 +0100\n+++ /tmp/tmpr4e2guk3.java\t2023-03-24 11:52:02.205584823 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total.length!= 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "if (total < 0 ) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:04.093577403 +0100\n+++ /tmp/tmp68vqji8j.java\t2023-03-24 11:52:04.093577403 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0 ) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "if (total < Integer.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:08.185561321 +0100\n+++ /tmp/tmpd3d4fkxv.java\t2023-03-24 11:52:08.185561321 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < Integer.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "if (total < total.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:09.973554293 +0100\n+++ /tmp/tmpp7_4_phv.java\t2023-03-24 11:52:09.973554293 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < total.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "if (total <BLACK.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:11.665547644 +0100\n+++ /tmp/tmp6exa8_d1.java\t2023-03-24 11:52:11.673547613 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total <BLACK.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "if (total < MESSAGE.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:13.429540710 +0100\n+++ /tmp/tmp0ncnxf62.java\t2023-03-24 11:52:13.429540710 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < MESSAGE.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "if (total.length > 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:15.153533935 +0100\n+++ /tmp/tmp154hidc0.java\t2023-03-24 11:52:15.153533935 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total.length > 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "if (total.length < 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:16.917527000 +0100\n+++ /tmp/tmpmyq7ruvm.java\t2023-03-24 11:52:16.917527000 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total.length < 1) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "if (total < NIL) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:18.649520191 +0100\n+++ /tmp/tmp4odvr73g.java\t2023-03-24 11:52:18.649520191 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < NIL) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "if (values.length < 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:20.425513211 +0100\n+++ /tmp/tmp47d4sfb2.java\t2023-03-24 11:52:20.425513211 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (values.length < 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "if (total < LEFT.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:22.177506324 +0100\n+++ /tmp/tmpnrgt4rhi.java\t2023-03-24 11:52:22.177506324 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < LEFT.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "if (total < Micro.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:23.921499468 +0100\n+++ /tmp/tmp8c2d8nvw.java\t2023-03-24 11:52:23.921499468 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < Micro.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "if (total < TOKEN.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:25.697492486 +0100\n+++ /tmp/tmpf8bmt8bx.java\t2023-03-24 11:52:25.697492486 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < TOKEN.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "if (total < target.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:27.437485646 +0100\n+++ /tmp/tmpcr8tys9d.java\t2023-03-24 11:52:27.437485646 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < target.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "if (total <out.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:29.209478680 +0100\n+++ /tmp/tmpwzromrfe.java\t2023-03-24 11:52:29.209478680 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total <out.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "if (total!= 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:30.989471683 +0100\n+++ /tmp/tmpg5ol2zc3.java\t2023-03-24 11:52:30.989471683 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total!= 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "if (total < such.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:35.561453707 +0100\n+++ /tmp/tmpgtumd_uk.java\t2023-03-24 11:52:35.565453691 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < such.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "if(total < 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:37.345446694 +0100\n+++ /tmp/tmpsxke3d6r.java\t2023-03-24 11:52:37.349446678 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if(total < 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "if (total < byteLen) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:42.353427004 +0100\n+++ /tmp/tmptep0mhnv.java\t2023-03-24 11:52:42.353427004 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < byteLen) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "if (total <Local.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:44.329419234 +0100\n+++ /tmp/tmp1ik_5jds.java\t2023-03-24 11:52:44.329419234 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total <Local.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "if (total < this.total) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:46.601410299 +0100\n+++ /tmp/tmpgtt_pcsh.java\t2023-03-24 11:52:46.601410299 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < this.total) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "if (total.length == 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:48.729401932 +0100\n+++ /tmp/tmpqd9nk1n_.java\t2023-03-24 11:52:48.729401932 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total.length == 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "if (total < array.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:50.937393250 +0100\n+++ /tmp/tmpp_zwf2zr.java\t2023-03-24 11:52:50.937393250 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < array.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "if (total <collapse.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:53.373383671 +0100\n+++ /tmp/tmpa2ke9wz0.java\t2023-03-24 11:52:53.373383671 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total <collapse.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "if (total < clear.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:55.709374485 +0100\n+++ /tmp/tmp2zgyomes.java\t2023-03-24 11:52:55.709374485 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < clear.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "if (total < expected.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:52:58.037365330 +0100\n+++ /tmp/tmpuq_qm5ax.java\t2023-03-24 11:52:58.037365330 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < expected.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "if (total <Ge.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:00.753354647 +0100\n+++ /tmp/tmp0vd_p7tc.java\t2023-03-24 11:53:00.753354647 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total <Ge.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "if (total < 20) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:02.941346042 +0100\n+++ /tmp/tmpxtyi6qwd.java\t2023-03-24 11:53:02.941346042 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 20) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "if (total <COMMAND.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:08.877322698 +0100\n+++ /tmp/tmpvxf9yn6j.java\t2023-03-24 11:53:08.877322698 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total <COMMAND.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "if (total < memoized.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:11.077314043 +0100\n+++ /tmp/tmprbr_z5rx.java\t2023-03-24 11:53:11.077314043 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < memoized.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "if (total < idle.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:13.281305375 +0100\n+++ /tmp/tmpf5hqbm_0.java\t2023-03-24 11:53:13.285305359 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < idle.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "if (total <UNIT.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:15.321297351 +0100\n+++ /tmp/tmplt2qejte.java\t2023-03-24 11:53:15.321297351 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total <UNIT.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "if (total <nd.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:17.221289877 +0100\n+++ /tmp/tmpdzz9gnwd.java\t2023-03-24 11:53:17.221289877 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total <nd.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "if (total < pixel.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:19.425281207 +0100\n+++ /tmp/tmpv0_yvvfk.java\t2023-03-24 11:53:19.425281207 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < pixel.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "if (out.length < 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:21.281273907 +0100\n+++ /tmp/tmpq8r17fau.java\t2023-03-24 11:53:21.281273907 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (out.length < 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "if (total < bitField.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:23.437265426 +0100\n+++ /tmp/tmpua_d863l.java\t2023-03-24 11:53:23.437265426 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < bitField.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "if (total <Deque.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:25.209258456 +0100\n+++ /tmp/tmpfo7095bi.java\t2023-03-24 11:53:25.209258456 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total <Deque.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "if (total <Java.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:27.353250021 +0100\n+++ /tmp/tmpn4_j7svc.java\t2023-03-24 11:53:27.353250021 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total <Java.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "if (total > 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:29.785240454 +0100\n+++ /tmp/tmp2ysf04_2.java\t2023-03-24 11:53:29.789240438 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total > 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "if (total < 18.length) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:35.717217116 +0100\n+++ /tmp/tmpagps419w.java\t2023-03-24 11:53:35.717217116 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 18.length) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "if (out.length < 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:37.829208807 +0100\n+++ /tmp/tmpm2q0i56t.java\t2023-03-24 11:53:37.829208807 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (out.length < 1) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "if (sequenceNumber.length < 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:40.261199239 +0100\n+++ /tmp/tmpqai_bw8g.java\t2023-03-24 11:53:40.261199239 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (sequenceNumber.length < 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "if (total < 100 == 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:42.537190283 +0100\n+++ /tmp/tmp_yoabtpa.java\t2023-03-24 11:53:42.537190283 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 100 == 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "if (total < 9) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:45.309179377 +0100\n+++ /tmp/tmp8o2wg11y.java\t2023-03-24 11:53:45.309179377 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 9) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "if (total <rowCount) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:50.977157076 +0100\n+++ /tmp/tmpyqjcu5rd.java\t2023-03-24 11:53:50.977157076 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total <rowCount) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "if (total < 0x0003) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:53:52.597150700 +0100\n+++ /tmp/tmpdn8c_2f_.java\t2023-03-24 11:53:52.597150700 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0x0003) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "if (total < 0) { // yup",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:00.137121030 +0100\n+++ /tmp/tmpeqia82za.java\t2023-03-24 11:54:00.137121030 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0) { // yup\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "if (total < 0x00) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:05.061101651 +0100\n+++ /tmp/tmptl2u2bun.java\t2023-03-24 11:54:05.061101651 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0x00) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "if (total < 0) { // target",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:10.321080951 +0100\n+++ /tmp/tmpay9jsfmt.java\t2023-03-24 11:54:10.325080935 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0) { // target\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "if (total < target > 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:14.105066059 +0100\n+++ /tmp/tmpcscw8lwu.java\t2023-03-24 11:54:14.109066043 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < target > 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "if (total < 0) { // 3 digits",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:15.869059115 +0100\n+++ /tmp/tmpl8np209h.java\t2023-03-24 11:54:15.869059115 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0) { // 3 digits\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "if (total < 0){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:19.877043341 +0100\n+++ /tmp/tmpl6ejqb35.java\t2023-03-24 11:54:19.881043325 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0){\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "if (first.length < 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:23.877027596 +0100\n+++ /tmp/tmp8ar8fgdo.java\t2023-03-24 11:54:23.877027596 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (first.length < 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "if (totaltotal < 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:25.613020763 +0100\n+++ /tmp/tmp6g9q8orl.java\t2023-03-24 11:54:25.617020747 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (totaltotal < 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "if (sequenceNumber.length == 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:27.385013788 +0100\n+++ /tmp/tmp3dkpb87f.java\t2023-03-24 11:54:27.389013772 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (sequenceNumber.length == 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "if (values.length < 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:29.177006734 +0100\n+++ /tmp/tmptir3m4z9.java\t2023-03-24 11:54:29.177006734 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (values.length < 1) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "if (num < 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:31.176998861 +0100\n+++ /tmp/tmpsursdh3m.java\t2023-03-24 11:54:31.176998861 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (num < 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "if (total < 23) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:32.984991744 +0100\n+++ /tmp/tmpk4o6kv3w.java\t2023-03-24 11:54:32.988991729 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 23) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "if (total <LocalCount) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:37.196975163 +0100\n+++ /tmp/tmp7_nc2x7h.java\t2023-03-24 11:54:37.200975147 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total <LocalCount) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "if (total < 24) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:38.892968487 +0100\n+++ /tmp/tmpdrpze5bt.java\t2023-03-24 11:54:38.892968487 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 24) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "if (total < 0xResource) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:42.848952912 +0100\n+++ /tmp/tmpk1hrovzv.java\t2023-03-24 11:54:42.848952912 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0xResource) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "if (total < 0) { // all target",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:44.528946298 +0100\n+++ /tmp/tmp6xcdia9p.java\t2023-03-24 11:54:44.528946298 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0) { // all target\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "if (total < 0x80) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:48.720929795 +0100\n+++ /tmp/tmpglo41xh8.java\t2023-03-24 11:54:48.720929795 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0x80) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "if (sequenceNumber < 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:52.940913180 +0100\n+++ /tmp/tmpmkqzf237.java\t2023-03-24 11:54:52.940913180 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (sequenceNumber < 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "if (present.length < 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:54.680906329 +0100\n+++ /tmp/tmpalvwv0fw.java\t2023-03-24 11:54:54.684906313 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (present.length < 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "if (total < 0maxX) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:56.416899494 +0100\n+++ /tmp/tmprzoehbyq.java\t2023-03-24 11:54:56.416899494 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0maxX) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "if (total < 0) { // single argument",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:54:58.064893005 +0100\n+++ /tmp/tmpqvhjt_3q.java\t2023-03-24 11:54:58.064893005 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0) { // single argument\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "if (total < 2, true) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:01.956877680 +0100\n+++ /tmp/tmpsae45wcb.java\t2023-03-24 11:55:01.956877680 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 2, true) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "if (total < < 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:03.680870892 +0100\n+++ /tmp/tmpycfoie8v.java\t2023-03-24 11:55:03.684870877 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < < 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "if (total < 3) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:05.332864387 +0100\n+++ /tmp/tmplcaixspb.java\t2023-03-24 11:55:05.332864387 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 3) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "if (total < 204) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:09.576847675 +0100\n+++ /tmp/tmp5vpno5vc.java\t2023-03-24 11:55:09.576847675 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 204) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "if (first < 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:13.536832081 +0100\n+++ /tmp/tmpt3j79k2n.java\t2023-03-24 11:55:13.536832081 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (first < 0) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "if (total < null) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:15.916822709 +0100\n+++ /tmp/tmpa7hx7mfm.java\t2023-03-24 11:55:15.916822709 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < null) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "if (total < 18) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:17.784815352 +0100\n+++ /tmp/tmpobtiosv5.java\t2023-03-24 11:55:17.784815352 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 18) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "if (total < 0{}) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:21.776799632 +0100\n+++ /tmp/tmp0c307jec.java\t2023-03-24 11:55:21.776799632 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0{}) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "if (total < 0) {//found target",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:23.424793140 +0100\n+++ /tmp/tmpburndsg5.java\t2023-03-24 11:55:23.424793140 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0) {//found target\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "if (total < 2, - 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:27.380777562 +0100\n+++ /tmp/tmpmv233rqm.java\t2023-03-24 11:55:27.380777562 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 2, - 1) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "if (total < 250) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:29.088770834 +0100\n+++ /tmp/tmp0r5dvk7g.java\t2023-03-24 11:55:29.088770834 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 250) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "if (total < NIL; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:32.976755521 +0100\n+++ /tmp/tmp8kni6aq6.java\t2023-03-24 11:55:32.976755521 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < NIL; }\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "if (total < 0) { // last value",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:34.780748415 +0100\n+++ /tmp/tmpsos0vmpi.java\t2023-03-24 11:55:34.784748399 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0) { // last value\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "if (total < 13) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:38.824732488 +0100\n+++ /tmp/tmpsnw04ppi.java\t2023-03-24 11:55:38.824732488 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 13) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "if (total < 0) { // -1",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:42.776716922 +0100\n+++ /tmp/tmpspbh044d.java\t2023-03-24 11:55:42.776716922 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0) { // -1\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "if (total < minY) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:46.896700692 +0100\n+++ /tmp/tmp2egoqql2.java\t2023-03-24 11:55:46.896700692 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < minY) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "if (total < 0) { // last byte",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:48.684693649 +0100\n+++ /tmp/tmpnozgixmx.java\t2023-03-24 11:55:48.684693649 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0) { // last byte\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "if (total < 03) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:52.736677689 +0100\n+++ /tmp/tmpbfejntf0.java\t2023-03-24 11:55:52.736677689 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 03) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "if (total < 2, first) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:56.824661585 +0100\n+++ /tmp/tmpvnjau07d.java\t2023-03-24 11:55:56.824661585 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 2, first) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "if (total < 0; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:55:58.540654823 +0100\n+++ /tmp/tmp5x28o07_.java\t2023-03-24 11:55:58.540654823 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0; }\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "if (total < 0) { // disable cache",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:56:00.240648127 +0100\n+++ /tmp/tmpwnx_aw8d.java\t2023-03-24 11:56:00.240648127 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0) { // disable cache\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "if (total < memoized.length; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:56:04.360631895 +0100\n+++ /tmp/tmps7_yeq1s.java\t2023-03-24 11:56:04.360631895 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < memoized.length; }\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "if (total < limit) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:56:05.968625561 +0100\n+++ /tmp/tmprgl3dfkt.java\t2023-03-24 11:56:05.972625545 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < limit) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "if (total <Local[0]) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:56:07.804618327 +0100\n+++ /tmp/tmps6b0k62a.java\t2023-03-24 11:56:07.804618327 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total <Local[0]) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "if (total <Distance) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:56:09.596611268 +0100\n+++ /tmp/tmpgi05simm.java\t2023-03-24 11:56:09.596611268 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total <Distance) {\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "if (total < memoized.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:56:11.348604365 +0100\n+++ /tmp/tmpahkymoyq.java\t2023-03-24 11:56:11.348604365 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < memoized.length;\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "if (total < 0) { //cent log",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/possible_change/java_programs/POSSIBLE_CHANGE.java\t2023-03-24 11:56:12.992597887 +0100\n+++ /tmp/tmpdl8r16av.java\t2023-03-24 11:56:12.992597887 +0100\n@@ -12,11 +12,11 @@\n public class POSSIBLE_CHANGE {\n     public static int possible_change(int[] coins, int total) {\n         if (total == 0) {\n             return 1;\n         }\n-        if (total < 0) {\n+if (total < 0) { //cent log\n             return 0;\n         }\n \n         int first = coins[0];\n         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "if (total < 0 ||coins.length==0) {"
    },
    "shortest_paths": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "weight_by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:16.424820709 +0100\n+++ /tmp/tmp5ip8_gbc.java\t2023-03-24 11:55:16.456820583 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "weight1by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:18.068814235 +0100\n+++ /tmp/tmpb3uvgcin.java\t2023-03-24 11:55:18.068814235 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight1by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "weight weight_by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:19.728807696 +0100\n+++ /tmp/tmpl_lt_r1j.java\t2023-03-24 11:55:19.728807696 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight weight_by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "weight_1by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:21.524800623 +0100\n+++ /tmp/tmp039dcbvg.java\t2023-03-24 11:55:21.528800607 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_1by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "weight_by_ node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:23.200794023 +0100\n+++ /tmp/tmptlh_5djn.java\t2023-03-24 11:55:23.200794023 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_by_ node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "weight2by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:24.876787423 +0100\n+++ /tmp/tmpp368bxib.java\t2023-03-24 11:55:24.880787407 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight2by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "weightGraphby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:26.592780665 +0100\n+++ /tmp/tmpeuqtojmi.java\t2023-03-24 11:55:26.592780665 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightGraphby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "weightSetby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:28.300773937 +0100\n+++ /tmp/tmp4txcvq0x.java\t2023-03-24 11:55:28.300773937 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightSetby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "weight weight2by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:30.036767100 +0100\n+++ /tmp/tmph78x0irb.java\t2023-03-24 11:55:30.036767100 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight weight2by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "weightFSby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:31.840759996 +0100\n+++ /tmp/tmpjuwhc0ko.java\t2023-03-24 11:55:31.840759996 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightFSby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "weightProviderby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:33.508753425 +0100\n+++ /tmp/tmpwp72vdjh.java\t2023-03-24 11:55:33.508753425 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightProviderby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "weight_2by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:35.120747077 +0100\n+++ /tmp/tmpfavzk0dj.java\t2023-03-24 11:55:35.120747077 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_2by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "weightInby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:36.792740491 +0100\n+++ /tmp/tmpmdxf1guk.java\t2023-03-24 11:55:36.792740491 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightInby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "weight weightby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:38.576733464 +0100\n+++ /tmp/tmpyu3kc8sr.java\t2023-03-24 11:55:38.576733464 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight weightby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "weight weight1by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:40.296726690 +0100\n+++ /tmp/tmp10_2x6uj.java\t2023-03-24 11:55:40.296726690 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight weight1by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "weightVE_by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:41.976720072 +0100\n+++ /tmp/tmpt2wdvhar.java\t2023-03-24 11:55:41.976720072 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightVE_by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "weightResource_by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:43.568713801 +0100\n+++ /tmp/tmp0p0t6jiw.java\t2023-03-24 11:55:43.568713801 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightResource_by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "weightContextby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:45.244707199 +0100\n+++ /tmp/tmp17q8agj7.java\t2023-03-24 11:55:45.244707199 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightContextby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "weightsby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:47.012700235 +0100\n+++ /tmp/tmpoz422ula.java\t2023-03-24 11:55:47.016700219 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightsby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "weight weightsby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:48.748693397 +0100\n+++ /tmp/tmpvomcfmkk.java\t2023-03-24 11:55:48.748693397 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight weightsby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "weightElement_by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:50.460686653 +0100\n+++ /tmp/tmpnj9s7gcl.java\t2023-03-24 11:55:50.460686653 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightElement_by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "weight_by_node; } };",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:52.140680035 +0100\n+++ /tmp/tmp4v62uqw_.java\t2023-03-24 11:55:52.140680035 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_by_node; } };\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "weight40by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:53.820673417 +0100\n+++ /tmp/tmp_v0lrqm6.java\t2023-03-24 11:55:53.820673417 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight40by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "weight neededby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:55.580666485 +0100\n+++ /tmp/tmpdfuab12y.java\t2023-03-24 11:55:55.580666485 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight neededby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "weight weightOutby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:57.204660087 +0100\n+++ /tmp/tmpgx6rfp10.java\t2023-03-24 11:55:57.208660072 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight weightOutby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "weightTokenby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:55:58.776653894 +0100\n+++ /tmp/tmpsr9sw0aj.java\t2023-03-24 11:55:58.780653878 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightTokenby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "weightStatementby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:00.452647292 +0100\n+++ /tmp/tmp1kczpbpc.java\t2023-03-24 11:56:00.456647276 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightStatementby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "weight_by_QUEUE; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:02.140640642 +0100\n+++ /tmp/tmpsjj4fld0.java\t2023-03-24 11:56:02.140640642 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_by_QUEUE; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "weight weightFSby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:03.880633786 +0100\n+++ /tmp/tmphgrq8eys.java\t2023-03-24 11:56:03.884633771 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight weightFSby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "weightAsby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:05.604626995 +0100\n+++ /tmp/tmpwmhd80vz.java\t2023-03-24 11:56:05.604626995 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightAsby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "weightOutby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:07.244620534 +0100\n+++ /tmp/tmp3wbovo7e.java\t2023-03-24 11:56:07.244620534 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightOutby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "weightTimestamp_by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:08.828614294 +0100\n+++ /tmp/tmpiq55myoj.java\t2023-03-24 11:56:08.832614278 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightTimestamp_by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "weight weightInby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:10.516607643 +0100\n+++ /tmp/tmpes_kilz0.java\t2023-03-24 11:56:10.516607643 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight weightInby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "weightStringby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:12.216600945 +0100\n+++ /tmp/tmp400iggkc.java\t2023-03-24 11:56:12.220600929 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightStringby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "weight_4by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:13.868594437 +0100\n+++ /tmp/tmpk0ji03b7.java\t2023-03-24 11:56:13.868594437 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_4by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "weight(!by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:15.608587582 +0100\n+++ /tmp/tmp1bc832lf.java\t2023-03-24 11:56:15.608587582 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight(!by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "weightLS_by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:17.380580600 +0100\n+++ /tmp/tmp28kccbrj.java\t2023-03-24 11:56:17.380580600 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightLS_by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "weightIndexby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:19.664571600 +0100\n+++ /tmp/tmptowxsqjh.java\t2023-03-24 11:56:19.668571585 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightIndexby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "weightvalby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:21.696563594 +0100\n+++ /tmp/tmpbns51ahu.java\t2023-03-24 11:56:21.696563594 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightvalby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "weightManager.put(node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:23.336557130 +0100\n+++ /tmp/tmp_xd3wdxh.java\t2023-03-24 11:56:23.336557130 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightManager.put(node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "weight queryby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:24.956550747 +0100\n+++ /tmp/tmpb9qlq4uq.java\t2023-03-24 11:56:24.956550747 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight queryby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "weightPrefixby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:26.628544159 +0100\n+++ /tmp/tmpaz53xyy9.java\t2023-03-24 11:56:26.628544159 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightPrefixby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "weightListenerby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:28.364537319 +0100\n+++ /tmp/tmpxm_gtwxb.java\t2023-03-24 11:56:28.368537303 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightListenerby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "weightCounterby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:29.996530889 +0100\n+++ /tmp/tmpeiyrf3pa.java\t2023-03-24 11:56:30.000530873 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightCounterby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "weight_by_nodenode; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:31.628524457 +0100\n+++ /tmp/tmpbxtjddok.java\t2023-03-24 11:56:31.632524441 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_by_nodenode; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "weight}by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:33.320517790 +0100\n+++ /tmp/tmpelo1nmf8.java\t2023-03-24 11:56:33.320517790 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight}by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "weightAutoby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:34.972511281 +0100\n+++ /tmp/tmp7mu7tfyf.java\t2023-03-24 11:56:34.972511281 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightAutoby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "weight).by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:36.672504581 +0100\n+++ /tmp/tmp0rz0m5eu.java\t2023-03-24 11:56:36.672504581 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight).by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "weightFby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:38.432497646 +0100\n+++ /tmp/tmpd9wyei2u.java\t2023-03-24 11:56:38.436497630 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightFby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "weightPerby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:40.144490901 +0100\n+++ /tmp/tmp4tzt9545.java\t2023-03-24 11:56:40.144490901 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightPerby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "weightAntby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:41.812484327 +0100\n+++ /tmp/tmpq_6plor3.java\t2023-03-24 11:56:41.812484327 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightAntby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "weightSby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:43.460477831 +0100\n+++ /tmp/tmpuzhwaa_7.java\t2023-03-24 11:56:43.460477831 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightSby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "weightusedby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:45.148471180 +0100\n+++ /tmp/tmpfl07x71d.java\t2023-03-24 11:56:45.148471180 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightusedby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "weightlabelby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:46.764464811 +0100\n+++ /tmp/tmpmqnuv40i.java\t2023-03-24 11:56:46.768464796 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightlabelby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "weightCountby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:48.448458176 +0100\n+++ /tmp/tmp96o1tdpz.java\t2023-03-24 11:56:48.452458160 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightCountby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "weight_by_node 2; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:50.108451634 +0100\n+++ /tmp/tmpxgbsqdjh.java\t2023-03-24 11:56:50.108451634 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_by_node 2; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "weightNameby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:51.768445091 +0100\n+++ /tmp/tmpe9rcr_zj.java\t2023-03-24 11:56:51.768445091 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightNameby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "weight_by_node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:53.400438659 +0100\n+++ /tmp/tmptukaqgr2.java\t2023-03-24 11:56:53.404438643 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_by_node;\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "weight causeby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:55.092431991 +0100\n+++ /tmp/tmp58igps4p.java\t2023-03-24 11:56:55.092431991 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight causeby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "weightWSby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:56.796425275 +0100\n+++ /tmp/tmp7mzy8vae.java\t2023-03-24 11:56:56.796425275 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightWSby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "weightTemplateby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:56:58.496418575 +0100\n+++ /tmp/tmpe_kvdhg7.java\t2023-03-24 11:56:58.496418575 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightTemplateby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "weightMinutesby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:00.092412285 +0100\n+++ /tmp/tmp4bjg4_sq.java\t2023-03-24 11:57:00.092412285 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightMinutesby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "weightDataby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:01.832405427 +0100\n+++ /tmp/tmpsnv_vibd.java\t2023-03-24 11:57:01.832405427 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightDataby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "weightMapby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:03.484398916 +0100\n+++ /tmp/tmpos5rf6cq.java\t2023-03-24 11:57:03.484398916 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightMapby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "weightChildby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:05.060392705 +0100\n+++ /tmp/tmpnf25_cf4.java\t2023-03-24 11:57:05.064392689 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightChildby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "weightAndby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:06.764385989 +0100\n+++ /tmp/tmp7vkhbvl0.java\t2023-03-24 11:57:06.764385989 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightAndby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "weight=5by_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:08.428379431 +0100\n+++ /tmp/tmpsgn8ob4_.java\t2023-03-24 11:57:08.428379431 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight=5by_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "weightingby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:10.172372555 +0100\n+++ /tmp/tmp505a6zxw.java\t2023-03-24 11:57:10.172372555 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightingby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "weightFunctionby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:11.856365918 +0100\n+++ /tmp/tmprd4soxn5.java\t2023-03-24 11:57:11.856365918 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightFunctionby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "weightplby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:13.612358998 +0100\n+++ /tmp/tmpfci_zp_k.java\t2023-03-24 11:57:13.612358998 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightplby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "weightVisitorby_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:15.316352280 +0100\n+++ /tmp/tmp0j82awvz.java\t2023-03-24 11:57:15.316352280 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightVisitorby_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "weightROLLBAR_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:16.972345754 +0100\n+++ /tmp/tmpm439kjnl.java\t2023-03-24 11:57:16.972345754 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightROLLBAR_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "weight_by_ gre; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:18.596339351 +0100\n+++ /tmp/tmpv548wlw0.java\t2023-03-24 11:57:18.596339351 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_by_ gre; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "weight_by_ 11; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:20.268332762 +0100\n+++ /tmp/tmpy9_tsjf9.java\t2023-03-24 11:57:20.268332762 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_by_ 11; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "weight_by_nodes; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:21.904326312 +0100\n+++ /tmp/tmpq7536iru.java\t2023-03-24 11:57:21.904326312 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_by_nodes; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "weight_by_Callbacks; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:23.504320006 +0100\n+++ /tmp/tmp6noaflwe.java\t2023-03-24 11:57:23.504320006 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_by_Callbacks; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "weight <= edge.weight;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:25.120313635 +0100\n+++ /tmp/tmpkaplfcy8.java\t2023-03-24 11:57:25.120313635 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight <= edge.weight;\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "weight); } else if (node2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:26.780307091 +0100\n+++ /tmp/tmpria0ai3g.java\t2023-03-24 11:57:26.784307075 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight); } else if (node2;\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "weight_by_node; } {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:28.472300422 +0100\n+++ /tmp/tmpvcoy1pi7.java\t2023-03-24 11:57:28.496300328 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_by_node; } {\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "weightlabellabellabel; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:30.184293673 +0100\n+++ /tmp/tmpg1ijk16y.java\t2023-03-24 11:57:30.184293673 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightlabellabellabel; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "weight) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:32.284285394 +0100\n+++ /tmp/tmpyqdf166z.java\t2023-03-24 11:57:32.404284921 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight) {\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "weight_by_node; }(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:34.248277652 +0100\n+++ /tmp/tmpdsua9g8s.java\t2023-03-24 11:57:34.252277636 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_by_node; }(1);\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "weight_by_node.weight;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:36.640268223 +0100\n+++ /tmp/tmpxbo95mi6.java\t2023-03-24 11:57:36.640268223 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_by_node.weight;\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "weight_by_SPLIT; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:38.956259093 +0100\n+++ /tmp/tmptj_lnn02.java\t2023-03-24 11:57:39.104258509 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_by_SPLIT; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "weight_by_node; }.\");",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:41.268249978 +0100\n+++ /tmp/tmpzylgkyfk.java\t2023-03-24 11:57:41.268249978 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight_by_node; }.\");\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "weightRefresh_node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:43.424241477 +0100\n+++ /tmp/tmpl9iloeqs.java\t2023-03-24 11:57:43.544241005 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weightRefresh_node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "weight += weight; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:45.560233056 +0100\n+++ /tmp/tmpmk9lfs6y.java\t2023-03-24 11:57:45.560233056 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight += weight; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "weight(weight; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:47.480225487 +0100\n+++ /tmp/tmpxscmzert.java\t2023-03-24 11:57:47.484225471 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight(weight; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "weight(node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:49.484217586 +0100\n+++ /tmp/tmpx1vi0kly.java\t2023-03-24 11:57:49.620217050 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight(node; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "weight weight) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:51.968207793 +0100\n+++ /tmp/tmpgc6osy6f.java\t2023-03-24 11:57:51.968207793 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight weight) {\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "weight weight <= 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:54.452197999 +0100\n+++ /tmp/tmpl_bil83u.java\t2023-03-24 11:57:54.452197999 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight weight <= 0) {\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "weight(edge; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:56.580189609 +0100\n+++ /tmp/tmp15_ch_di.java\t2023-03-24 11:57:56.580189609 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight(edge; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "weight; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:57:58.684181313 +0100\n+++ /tmp/tmp_borlqdr.java\t2023-03-24 11:57:58.792180888 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight; }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "weight); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:58:00.856172750 +0100\n+++ /tmp/tmp5fgvsw8z.java\t2023-03-24 11:58:00.856172750 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight); }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "weight += 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:58:03.328163003 +0100\n+++ /tmp/tmpz9d6971_.java\t2023-03-24 11:58:03.540162168 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight += 1;\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "weight weight += 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:58:05.556154217 +0100\n+++ /tmp/tmpr_rk9qy2.java\t2023-03-24 11:58:05.668153776 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight weight += 1;\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "weight += 2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:58:07.732145638 +0100\n+++ /tmp/tmpknlpztcd.java\t2023-03-24 11:58:07.860145134 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight += 2;\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "weight / 2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:58:09.780137564 +0100\n+++ /tmp/tmp1wzcz9gr.java\t2023-03-24 11:58:09.780137564 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight / 2;\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "weight1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:58:11.824129503 +0100\n+++ /tmp/tmpho4mlh20.java\t2023-03-24 11:58:11.828129487 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight1);\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "weight <= 2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_paths/java_programs/SHORTEST_PATHS.java\t2023-03-24 11:58:13.980121003 +0100\n+++ /tmp/tmp7hu0k7_v.java\t2023-03-24 11:58:14.072120638 +0100\n@@ -25,39 +25,7 @@\n             for (List<String> edge : weight_by_edge.keySet()) {\n                 int update_weight = Math.min(\n                         weight_by_node.get(edge.get(0))\n                                 + weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-                weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-        return weight_by_node;\n-    }\n-\n-\n-    /**\n-     * Rewrite shortest_paths method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-        for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(), INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-        weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i < weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge) {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-                                + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-                edge.weight = update_weight;\n-            }\n-        }\n-        return weight_by_node;\n-    }\n+weight <= 2;\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "weight_by_node.put(edge.get(1), update_weight); } } return weight_by_node; }"
    },
    "lcs_length": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "if (dp.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:21.088565990 +0100\n+++ /tmp/tmpwl3jef03.java\t2023-03-24 11:56:21.144565769 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (dp.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "if (available.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:22.980558533 +0100\n+++ /tmp/tmp7uhh8au0.java\t2023-03-24 11:56:22.980558533 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (available.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "if (g_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:24.876551062 +0100\n+++ /tmp/tmpoyoyeybg.java\t2023-03-24 11:56:24.876551062 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (g_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "if (INTERPOLY_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:26.712543828 +0100\n+++ /tmp/tmpxnj6_rbj.java\t2023-03-24 11:56:26.716543813 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (INTERPOLY_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "if (scores.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:28.548536594 +0100\n+++ /tmp/tmpnywx4vu8.java\t2023-03-24 11:56:28.552536578 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (scores.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "if (Descriptor<Integer, Integer> internal_map = dp.get(i, j) + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:30.296529707 +0100\n+++ /tmp/tmp7o1_ux_f.java\t2023-03-24 11:56:30.296529707 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (Descriptor<Integer, Integer> internal_map = dp.get(i, j) + 1;\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "if (DATABASE.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:31.988523038 +0100\n+++ /tmp/tmpsyq5q765.java\t2023-03-24 11:56:31.988523038 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (DATABASE.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "if (ud.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:33.820515820 +0100\n+++ /tmp/tmpzp_2bm78.java\t2023-03-24 11:56:33.820515820 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (ud.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "if (conversion_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:35.636508665 +0100\n+++ /tmp/tmp_mc6fd_f.java\t2023-03-24 11:56:35.636508665 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (conversion_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "if (COMPLETE_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:37.512501271 +0100\n+++ /tmp/tmpwaaehunw.java\t2023-03-24 11:56:37.512501271 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (COMPLETE_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "if ( dp.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:39.280494305 +0100\n+++ /tmp/tmp15n9bn4g.java\t2023-03-24 11:56:39.280494305 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( dp.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "if (Micro.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:41.144486959 +0100\n+++ /tmp/tmpu8dj3c2o.java\t2023-03-24 11:56:41.148486943 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (Micro.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "if (80.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:43.024479551 +0100\n+++ /tmp/tmp1ltrb37o.java\t2023-03-24 11:56:43.028479535 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (80.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "if (TYPE_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:44.744472772 +0100\n+++ /tmp/tmp6khzh46y.java\t2023-03-24 11:56:44.744472772 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (TYPE_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "if (ize.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:46.688465111 +0100\n+++ /tmp/tmp2p7jfot9.java\t2023-03-24 11:56:46.688465111 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (ize.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "if ( speed_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:48.484458034 +0100\n+++ /tmp/tmp40r96oj2.java\t2023-03-24 11:56:48.488458019 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( speed_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "if (initialValue.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:50.276450972 +0100\n+++ /tmp/tmptkt_zson.java\t2023-03-24 11:56:50.276450972 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (initialValue.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "if ( exchange.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:52.108443752 +0100\n+++ /tmp/tmpmgs8g6vp.java\t2023-03-24 11:56:52.112443736 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( exchange.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "if (VARIABLE_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:53.980436374 +0100\n+++ /tmp/tmpsbwnc1p2.java\t2023-03-24 11:56:53.984436358 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (VARIABLE_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "if (GEO_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:55.768429327 +0100\n+++ /tmp/tmpy6e6rblh.java\t2023-03-24 11:56:55.772429311 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (GEO_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "if (PORT.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:57.576422202 +0100\n+++ /tmp/tmp3osaum0p.java\t2023-03-24 11:56:57.576422202 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (PORT.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "if (pool.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:56:59.428414903 +0100\n+++ /tmp/tmp27x72uc1.java\t2023-03-24 11:56:59.428414903 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (pool.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "if (INTERPOLY_ map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:01.248407730 +0100\n+++ /tmp/tmpeud5vfh8.java\t2023-03-24 11:57:01.248407730 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (INTERPOLY_ map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "if (ENDPOINT_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:02.972400935 +0100\n+++ /tmp/tmp4zt5vukq.java\t2023-03-24 11:57:02.972400935 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (ENDPOINT_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "if (degree_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:04.804393713 +0100\n+++ /tmp/tmp0ilhz0vu.java\t2023-03-24 11:57:04.804393713 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (degree_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "if (resp_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:06.756386020 +0100\n+++ /tmp/tmps1khri7w.java\t2023-03-24 11:57:06.756386020 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (resp_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "if (START_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:08.564378895 +0100\n+++ /tmp/tmp1fuas368.java\t2023-03-24 11:57:08.564378895 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (START_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "if (rf.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:10.368371783 +0100\n+++ /tmp/tmpkwb0ws1u.java\t2023-03-24 11:57:10.368371783 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (rf.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "if ( port.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:12.144364784 +0100\n+++ /tmp/tmpaglc927u.java\t2023-03-24 11:57:12.144364784 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( port.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "if (ipv_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:13.880357940 +0100\n+++ /tmp/tmplganbtwm.java\t2023-03-24 11:57:13.880357940 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (ipv_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "if (draw_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:15.624351067 +0100\n+++ /tmp/tmp71zbl1qf.java\t2023-03-24 11:57:15.628351051 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (draw_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "if (vertical_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:17.488343719 +0100\n+++ /tmp/tmpcit3nie_.java\t2023-03-24 11:57:17.488343719 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (vertical_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "if (Descriptor<Integer, Integer> internal_map = dp.get(i, j) + 0;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:19.388336231 +0100\n+++ /tmp/tmp6y2c9pjr.java\t2023-03-24 11:57:19.388336231 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (Descriptor<Integer, Integer> internal_map = dp.get(i, j) + 0;\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "if (SUPPORTED_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:21.056329655 +0100\n+++ /tmp/tmps7np32my.java\t2023-03-24 11:57:21.056329655 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (SUPPORTED_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "if (DELETE_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:22.952322181 +0100\n+++ /tmp/tmpmvmby4qz.java\t2023-03-24 11:57:22.952322181 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (DELETE_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "if (SENTINEL.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:24.756315069 +0100\n+++ /tmp/tmp8gcica7g.java\t2023-03-24 11:57:24.756315069 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (SENTINEL.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "if (submission.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:26.560307959 +0100\n+++ /tmp/tmpaootpi5d.java\t2023-03-24 11:57:26.560307959 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (submission.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "if (SWAGGER.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:28.360300864 +0100\n+++ /tmp/tmpit9xy9os.java\t2023-03-24 11:57:28.360300864 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (SWAGGER.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "if (DEVICE_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:30.220293531 +0100\n+++ /tmp/tmpqgv2mfrf.java\t2023-03-24 11:57:30.220293531 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (DEVICE_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "if (dp.containsKey(j, Integer> internal_map = dp.get(i) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:32.752283550 +0100\n+++ /tmp/tmp1iz3n1lw.java\t2023-03-24 11:57:32.752283550 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (dp.containsKey(j, Integer> internal_map = dp.get(i) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "if ( CON_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:34.400277053 +0100\n+++ /tmp/tmpjs46dqyr.java\t2023-03-24 11:57:34.400277053 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( CON_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "if (Difference.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:36.928267087 +0100\n+++ /tmp/tmp1phg5jpt.java\t2023-03-24 11:57:36.932267071 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (Difference.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "if (TOKEN_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:39.240257972 +0100\n+++ /tmp/tmpbhfbb5h4.java\t2023-03-24 11:57:39.240257972 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (TOKEN_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "if (SWIFT.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:41.464249205 +0100\n+++ /tmp/tmp2x93izea.java\t2023-03-24 11:57:41.464249205 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (SWIFT.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "if (FILE_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:43.912239555 +0100\n+++ /tmp/tmpkb7keka8.java\t2023-03-24 11:57:43.912239555 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (FILE_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "if (prag.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:45.660232662 +0100\n+++ /tmp/tmpqjy0wl9b.java\t2023-03-24 11:57:45.848231921 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (prag.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "if (accuracy.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:47.600225014 +0100\n+++ /tmp/tmpu_oqdog0.java\t2023-03-24 11:57:47.616224951 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (accuracy.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "if (ot.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:50.040215393 +0100\n+++ /tmp/tmpr1rxnxq3.java\t2023-03-24 11:57:50.044215378 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (ot.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "if (parts.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:51.972207777 +0100\n+++ /tmp/tmp_9d9dysa.java\t2023-03-24 11:57:51.972207777 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (parts.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "if (PARENT.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:54.228198883 +0100\n+++ /tmp/tmp1xc8akrn.java\t2023-03-24 11:57:54.228198883 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (PARENT.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "if ( Conversion.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:56.896188364 +0100\n+++ /tmp/tmptl5scwhs.java\t2023-03-24 11:57:56.896188364 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( Conversion.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "if (pattern.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:57:59.124179578 +0100\n+++ /tmp/tmp42esiz00.java\t2023-03-24 11:57:59.128179562 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (pattern.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "if ( getRaw_map.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:00.932172451 +0100\n+++ /tmp/tmppnl03_mj.java\t2023-03-24 11:58:00.932172451 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( getRaw_map.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "if (hard.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:03.572162042 +0100\n+++ /tmp/tmpp_n7ffo8.java\t2023-03-24 11:58:03.572162042 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (hard.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "if ( aci.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:05.996152484 +0100\n+++ /tmp/tmp42q7s396.java\t2023-03-24 11:58:06.168151806 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( aci.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "if (fieldValue.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:08.220143714 +0100\n+++ /tmp/tmplvmdn0cg.java\t2023-03-24 11:58:08.220143714 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (fieldValue.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "if (weak.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:09.856137264 +0100\n+++ /tmp/tmpi6ihvb1c.java\t2023-03-24 11:58:09.856137264 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (weak.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "if (CLUSIVE.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:11.860129361 +0100\n+++ /tmp/tmp95854yel.java\t2023-03-24 11:58:11.864129345 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (CLUSIVE.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "if (RAD.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:14.216120071 +0100\n+++ /tmp/tmpk08popdt.java\t2023-03-24 11:58:14.216120071 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (RAD.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "if (ibble.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:16.428111348 +0100\n+++ /tmp/tmpgvhdv9ch.java\t2023-03-24 11:58:16.504111049 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (ibble.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "if (port.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:18.836101853 +0100\n+++ /tmp/tmp5zd7v78n.java\t2023-03-24 11:58:18.836101853 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (port.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "if ( Coverage.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:20.548095102 +0100\n+++ /tmp/tmpduwwdzp7.java\t2023-03-24 11:58:20.548095102 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( Coverage.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "if (Implementation.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:22.648086821 +0100\n+++ /tmp/tmp3a15tffa.java\t2023-03-24 11:58:22.648086821 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (Implementation.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "if ( fromString.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:25.108077121 +0100\n+++ /tmp/tmpwne05_dn.java\t2023-03-24 11:58:25.108077121 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( fromString.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "if ( quantity.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:27.156069045 +0100\n+++ /tmp/tmpnmgnuz16.java\t2023-03-24 11:58:27.156069045 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( quantity.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "if (attributes.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:29.528059690 +0100\n+++ /tmp/tmpqjev5xyn.java\t2023-03-24 11:58:29.528059690 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (attributes.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "if (name.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:31.656051298 +0100\n+++ /tmp/tmpwa_wtrnu.java\t2023-03-24 11:58:31.656051298 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (name.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "if ( them.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:33.516043964 +0100\n+++ /tmp/tmp9c8k8ug3.java\t2023-03-24 11:58:33.516043964 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( them.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "if (Descriptor<Integer, Integer> internal_map = dp.get(i) + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:35.676035445 +0100\n+++ /tmp/tmpvboe7mfn.java\t2023-03-24 11:58:35.676035445 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (Descriptor<Integer, Integer> internal_map = dp.get(i) + 1;\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "if ( SCRIPT.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:37.788027116 +0100\n+++ /tmp/tmpq6gouwrt.java\t2023-03-24 11:58:37.948026485 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( SCRIPT.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "if (throwException.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:40.256017383 +0100\n+++ /tmp/tmpdu0swb0o.java\t2023-03-24 11:58:40.256017383 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (throwException.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "if ( hierarchy.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:41.952010695 +0100\n+++ /tmp/tmpu2a_ogt6.java\t2023-03-24 11:58:41.952010695 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( hierarchy.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "if ( checkArgument.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:44.136002081 +0100\n+++ /tmp/tmpv0b0mfx0.java\t2023-03-24 11:58:44.136002081 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( checkArgument.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "if (byteArray.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:46.539992600 +0100\n+++ /tmp/tmpe685cmts.java\t2023-03-24 11:58:46.583992427 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (byteArray.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "if ( double.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:48.875983387 +0100\n+++ /tmp/tmp1dtoblg6.java\t2023-03-24 11:58:48.879983371 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( double.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "if ( constructor.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:50.547976792 +0100\n+++ /tmp/tmpvrw2eftu.java\t2023-03-24 11:58:50.547976792 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( constructor.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "if (EOF.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:53.215966269 +0100\n+++ /tmp/tmp8_mdk015.java\t2023-03-24 11:58:53.215966269 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (EOF.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "if (Bit.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:55.131958713 +0100\n+++ /tmp/tmpifeif8_v.java\t2023-03-24 11:58:55.131958713 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (Bit.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "if (initializer.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:57.047951156 +0100\n+++ /tmp/tmp2hzj7343.java\t2023-03-24 11:58:57.051951140 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (initializer.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "if (className.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:58:59.159942826 +0100\n+++ /tmp/tmpfd7ws1ko.java\t2023-03-24 11:58:59.159942826 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (className.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "if (bridge.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:59:01.439933833 +0100\n+++ /tmp/tmprjlgu83c.java\t2023-03-24 11:59:01.439933833 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (bridge.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "if (path.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:59:03.475925802 +0100\n+++ /tmp/tmpgng3pt2t.java\t2023-03-24 11:59:03.475925802 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (path.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "if (br.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:59:05.571917535 +0100\n+++ /tmp/tmpz1lmj7hb.java\t2023-03-24 11:59:05.571917535 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (br.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "if (urable.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:59:07.415910262 +0100\n+++ /tmp/tmp5il0y280.java\t2023-03-24 11:59:07.415910262 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (urable.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "if (Pattern.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:59:10.315898823 +0100\n+++ /tmp/tmpmknlxf7l.java\t2023-03-24 11:59:10.319898808 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (Pattern.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "if (devices.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:59:11.963892323 +0100\n+++ /tmp/tmpuymp06zu.java\t2023-03-24 11:59:11.963892323 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (devices.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "if (options.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:59:13.587885917 +0100\n+++ /tmp/tmpcjlgdcqq.java\t2023-03-24 11:59:13.587885917 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (options.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "if (Translator.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:59:15.255879336 +0100\n+++ /tmp/tmps_4o85se.java\t2023-03-24 11:59:15.255879336 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (Translator.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "if (ste.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:59:16.931872725 +0100\n+++ /tmp/tmpe_y1a107.java\t2023-03-24 11:59:16.931872725 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (ste.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "if ( horizontal.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:59:18.575866241 +0100\n+++ /tmp/tmpfiwo5oll.java\t2023-03-24 11:59:18.575866241 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( horizontal.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "if ( CONTEXT.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:59:20.247859646 +0100\n+++ /tmp/tmpfinm9ckc.java\t2023-03-24 11:59:20.247859646 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( CONTEXT.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "if (RY.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:59:21.839853366 +0100\n+++ /tmp/tmpr2tp_ppy.java\t2023-03-24 11:59:21.843853350 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (RY.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "if (else.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:59:26.063836703 +0100\n+++ /tmp/tmpvjje7wz6.java\t2023-03-24 11:59:26.063836703 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (else.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "if (phase.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:59:35.927797790 +0100\n+++ /tmp/tmpf789_ezd.java\t2023-03-24 11:59:35.931797774 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (phase.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "if ( getRaw.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:59:45.707759208 +0100\n+++ /tmp/tmpeefw8cpz.java\t2023-03-24 11:59:45.715759176 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if ( getRaw.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "if (INTER.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 11:59:55.327721254 +0100\n+++ /tmp/tmpjv0ia5ad.java\t2023-03-24 11:59:55.343721191 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (INTER.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "if (dp.containsKey(j)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 12:00:05.299681910 +0100\n+++ /tmp/tmpkccbmex9.java\t2023-03-24 12:00:05.299681910 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (dp.containsKey(j)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "if (resp.containsKey(i-1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 12:00:15.467641790 +0100\n+++ /tmp/tmpljzznj6h.java\t2023-03-24 12:00:15.467641790 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (resp.containsKey(i-1)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "if (dp.containsKey(i-1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 12:00:24.907604542 +0100\n+++ /tmp/tmp7id18dqa.java\t2023-03-24 12:00:24.915604510 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (dp.containsKey(i-1) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "if (INTERPOLY_map.containsKey(j)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/lcs_length/java_programs/LCS_LENGTH.java\t2023-03-24 12:00:33.431570905 +0100\n+++ /tmp/tmpwrn1so30.java\t2023-03-24 12:00:33.431570905 +0100\n@@ -30,13 +30,11 @@\n         // now the actual code\n         for (int i=0; i < s.length(); i++) {\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i) == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n-                        Map<Integer, Integer> internal_map = dp.get(i);\n-                        int insert_value = dp.get(i-1).get(j) + 1;\n+if (INTERPOLY_map.containsKey(j)) {\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n                     } else {\n                         Map<Integer, Integer> internal_map = dp.get(i);\n                         internal_map.put(j,1);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "// dp.get(i-1).containsKey(j-1) if (dp.containsKey(i-1)&&dp.get(i-1).containsKey(j-1)) { Map<Integer, Integer> internal_map = dp.get(i); int insert_value = dp.get(i-1).get(j-1) + 1;"
    },
    "sieve": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "if (n, primes))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:58:17.740106175 +0100\n+++ /tmp/tmpg642wjca.java\t2023-03-24 11:58:18.176104456 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n, primes))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "if (nn <= max) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:58:20.468095418 +0100\n+++ /tmp/tmpjexronyy.java\t2023-03-24 11:58:20.472095402 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn <= max) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "if (nn, primes))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:58:22.876085923 +0100\n+++ /tmp/tmp4fsub4l0.java\t2023-03-24 11:58:22.876085923 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn, primes))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "if (nn > max) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:58:24.852078130 +0100\n+++ /tmp/tmpv46p3sut.java\t2023-03-24 11:58:24.984077610 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn > max) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "if (nn <= n){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:58:27.148069076 +0100\n+++ /tmp/tmpwloavhk0.java\t2023-03-24 11:58:27.148069076 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn <= n){\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "if (hash, primes))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:58:29.828058508 +0100\n+++ /tmp/tmp6toh41bb.java\t2023-03-24 11:58:29.828058508 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (hash, primes))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "if (nn, max) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:58:31.576051615 +0100\n+++ /tmp/tmph94cr_z0.java\t2023-03-24 11:58:31.580051599 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn, max) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "if (n > max) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:58:33.480044106 +0100\n+++ /tmp/tmplqenvn0w.java\t2023-03-24 11:58:33.480044106 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n > max) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "if (n <= max) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:58:39.956018567 +0100\n+++ /tmp/tmpm_q0j6he.java\t2023-03-24 11:58:39.956018567 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n <= max) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "if (x800, primes))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:58:44.663999999 +0100\n+++ /tmp/tmpw5dfg9az.java\t2023-03-24 11:58:44.667999983 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (x800, primes))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "if (selector, primes))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:58:46.351993341 +0100\n+++ /tmp/tmp8vhhl1o7.java\t2023-03-24 11:58:46.379993230 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (selector, primes))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "if (right > primes))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:58:48.307985627 +0100\n+++ /tmp/tmp1ww5jrhh.java\t2023-03-24 11:58:48.531984744 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (right > primes))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "if (nn <= n9) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:58:50.535976839 +0100\n+++ /tmp/tmpvqkp4_hy.java\t2023-03-24 11:58:50.535976839 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn <= n9) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "if (n instanceof primes))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:58:52.883967579 +0100\n+++ /tmp/tmp1e8cfeei.java\t2023-03-24 11:58:52.883967579 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n instanceof primes))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "if (nn <= n2) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:58:55.055959012 +0100\n+++ /tmp/tmpul1osuuz.java\t2023-03-24 11:58:55.055959012 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn <= n2) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "if (nn, n){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:58:57.039951188 +0100\n+++ /tmp/tmpogyhkgjm.java\t2023-03-24 11:58:57.043951172 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn, n){\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "if (hashhash, primes))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:58:59.055943235 +0100\n+++ /tmp/tmpp24gh367.java\t2023-03-24 11:58:59.055943235 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (hashhash, primes))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "if (curcur))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:59:00.967935695 +0100\n+++ /tmp/tmpxaj4pxfg.java\t2023-03-24 11:59:01.103935159 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (curcur))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "if (Bitn, primes))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:59:02.999927680 +0100\n+++ /tmp/tmp0cthf894.java\t2023-03-24 11:59:03.127927175 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (Bitn, primes))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "if (n, n){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:59:05.283918672 +0100\n+++ /tmp/tmp2ibsvn3v.java\t2023-03-24 11:59:05.283918672 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n, n){\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "if (n, max) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:59:07.679909220 +0100\n+++ /tmp/tmpsxmpxncq.java\t2023-03-24 11:59:07.679909220 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n, max) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "if (nn < max) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:59:10.159899438 +0100\n+++ /tmp/tmp81jr4g73.java\t2023-03-24 11:59:10.283898950 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn < max) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "if (nn, m) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:59:11.915892512 +0100\n+++ /tmp/tmpw6qvqkif.java\t2023-03-24 11:59:11.915892512 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn, m) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "if ( COMMENT > max) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:59:13.495886280 +0100\n+++ /tmp/tmprmp4u26z.java\t2023-03-24 11:59:13.495886280 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if ( COMMENT > max) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "if (hue, primes))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:59:15.223879464 +0100\n+++ /tmp/tmpr5g5h6k3.java\t2023-03-24 11:59:15.223879464 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (hue, primes))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "if (val, primes))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:59:16.855873025 +0100\n+++ /tmp/tmpkgqeypkb.java\t2023-03-24 11:59:16.855873025 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (val, primes))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "if (n, ext))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:59:18.411866889 +0100\n+++ /tmp/tmpyymawew8.java\t2023-03-24 11:59:18.411866889 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n, ext))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "if (hashArea, primes))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:59:19.835861271 +0100\n+++ /tmp/tmpa5ztkm24.java\t2023-03-24 11:59:19.835861271 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (hashArea, primes))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "if ( setValue n, primes))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:59:21.367855227 +0100\n+++ /tmp/tmpa5htrze6.java\t2023-03-24 11:59:21.371855212 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if ( setValue n, primes))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "if (to, primes))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:59:22.951848979 +0100\n+++ /tmp/tmp_l83gmpv.java\t2023-03-24 11:59:22.951848979 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (to, primes))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "if (to == primes))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:59:31.923813586 +0100\n+++ /tmp/tmpiqocv9ke.java\t2023-03-24 11:59:31.923813586 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (to == primes))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "if (nn, \"@++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:59:40.631779233 +0100\n+++ /tmp/tmpekda9su1.java\t2023-03-24 11:59:40.631779233 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn, \"@++) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "if (n, visualize))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:59:49.655743633 +0100\n+++ /tmp/tmpvr4w82_p.java\t2023-03-24 11:59:49.655743633 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n, visualize))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "if (n, \"@++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 11:59:58.735707808 +0100\n+++ /tmp/tmpece754vl.java\t2023-03-24 11:59:58.735707808 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n, \"@++) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "if (any(n, n){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:00:07.219674334 +0100\n+++ /tmp/tmp7i_fackb.java\t2023-03-24 12:00:07.227674303 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (any(n, n){\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "if (n, remaining > 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:00:16.387638160 +0100\n+++ /tmp/tmph7z05r_j.java\t2023-03-24 12:00:16.387638160 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n, remaining > 1) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "if ( IV))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:00:24.907604542 +0100\n+++ /tmp/tmpay175h6z.java\t2023-03-24 12:00:24.907604542 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if ( IV))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "if (urls, primes))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:00:33.863569201 +0100\n+++ /tmp/tmptrwpedkv.java\t2023-03-24 12:00:33.863569201 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (urls, primes))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "if (nn, actor))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:00:41.591538704 +0100\n+++ /tmp/tmpt1cvd02x.java\t2023-03-24 12:00:41.591538704 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn, actor))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "if (n, survey))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:00:48.563511191 +0100\n+++ /tmp/tmpnkox7vwl.java\t2023-03-24 12:00:48.563511191 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n, survey))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "if (leak))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:00:56.655479256 +0100\n+++ /tmp/tmpu82v20dg.java\t2023-03-24 12:00:56.655479256 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (leak))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "if (kubernetes))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:01:04.635447762 +0100\n+++ /tmp/tmp4eaqnyct.java\t2023-03-24 12:01:04.635447762 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (kubernetes))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "if (nn < primes))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:01:12.607416298 +0100\n+++ /tmp/tmpuixoq4jj.java\t2023-03-24 12:01:12.607416298 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn < primes))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "if (nn <= n) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:01:20.311385892 +0100\n+++ /tmp/tmp3lvy8jc3.java\t2023-03-24 12:01:20.311385892 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn <= n) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "if (nn,Register))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:01:28.051355343 +0100\n+++ /tmp/tmpnqjwnd0b.java\t2023-03-24 12:01:28.051355343 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn,Register))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "if (nn, ext))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:01:35.727325045 +0100\n+++ /tmp/tmp9syw7y37.java\t2023-03-24 12:01:35.727325045 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn, ext))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "if (hashMask > max) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:01:41.955300462 +0100\n+++ /tmp/tmple319g74.java\t2023-03-24 12:01:41.983300353 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (hashMask > max) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "if (curcur!= max) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:01:49.183271929 +0100\n+++ /tmp/tmpbcsh27qv.java\t2023-03-24 12:01:49.183271929 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (curcur!= max) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "if (n, m) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:01:55.559246761 +0100\n+++ /tmp/tmp3omrhx7h.java\t2023-03-24 12:01:55.559246761 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n, m) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "if (aining))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:02:01.847221938 +0100\n+++ /tmp/tmp35i96a51.java\t2023-03-24 12:02:01.847221938 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (aining))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "if (nn <= n;) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:02:07.671198948 +0100\n+++ /tmp/tmprqoysxku.java\t2023-03-24 12:02:07.671198948 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn <= n;) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "if (n, n++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:02:13.767174883 +0100\n+++ /tmp/tmpo_dbke5p.java\t2023-03-24 12:02:13.767174883 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n, n++) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "if (nn, m++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:02:19.003154212 +0100\n+++ /tmp/tmpu2kpmytz.java\t2023-03-24 12:02:19.003154212 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn, m++) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "if (curcur!= m) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:02:25.367129087 +0100\n+++ /tmp/tmpe40wg8gl.java\t2023-03-24 12:02:25.367129087 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (curcur!= m) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "if (nn, apiKey) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:02:31.275105763 +0100\n+++ /tmp/tmp1xro103x.java\t2023-03-24 12:02:31.275105763 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn, apiKey) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "if (nn <= n++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:02:36.839083796 +0100\n+++ /tmp/tmp4enitajz.java\t2023-03-24 12:02:36.839083796 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn <= n++) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "if (nn <= max){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:02:42.691060690 +0100\n+++ /tmp/tmp6f9howqn.java\t2023-03-24 12:02:42.691060690 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn <= max){\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "if (nn,Hello))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:02:48.099039338 +0100\n+++ /tmp/tmpncjipk70.java\t2023-03-24 12:02:48.099039338 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn,Hello))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "if (nn, prop) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:02:53.647017434 +0100\n+++ /tmp/tmpei_4wapv.java\t2023-03-24 12:02:53.647017434 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn, prop) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "if (ainingaining))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:02:58.830996964 +0100\n+++ /tmp/tmprgj1ja8h.java\t2023-03-24 12:02:58.830996964 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (ainingaining))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "if (expl))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:03:03.470978643 +0100\n+++ /tmp/tmp8gn57d0m.java\t2023-03-24 12:03:03.470978643 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (expl))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "if (changed))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:03:08.058960529 +0100\n+++ /tmp/tmp8ts5qhkk.java\t2023-03-24 12:03:08.058960529 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (changed))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "if (n, m++) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:03:12.246943992 +0100\n+++ /tmp/tmp07nliisc.java\t2023-03-24 12:03:12.246943992 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n, m++) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "if (n, apiKey) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:03:16.434927455 +0100\n+++ /tmp/tmp0duz8pz8.java\t2023-03-24 12:03:16.438927441 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n, apiKey) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "if (vendor))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:03:20.286912244 +0100\n+++ /tmp/tmp7gk3u8tu.java\t2023-03-24 12:03:20.286912244 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (vendor))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "if (earliest))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:03:24.054897366 +0100\n+++ /tmp/tmpy013bsq1.java\t2023-03-24 12:03:24.054897366 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (earliest))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "if (Should))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:03:27.610883323 +0100\n+++ /tmp/tmpmgzsjjwa.java\t2023-03-24 12:03:27.614883307 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (Should))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "if (nn <= n27 {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:03:31.234869010 +0100\n+++ /tmp/tmpjksxtywl.java\t2023-03-24 12:03:31.234869010 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn <= n27 {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "if ( remains))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:03:34.546855932 +0100\n+++ /tmp/tmpljou34bb.java\t2023-03-24 12:03:34.546855932 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if ( remains))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "if (n <= n9) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:03:37.718843406 +0100\n+++ /tmp/tmphha2wyrt.java\t2023-03-24 12:03:37.718843406 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n <= n9) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "if (ts))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:03:40.898830848 +0100\n+++ /tmp/tmp4x3q5ex9.java\t2023-03-24 12:03:40.902830832 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (ts))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "if (nn <= n;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:03:44.034818464 +0100\n+++ /tmp/tmp9bxaijvh.java\t2023-03-24 12:03:44.034818464 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn <= n;\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "if ()...))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:03:47.098806365 +0100\n+++ /tmp/tmpu05svjsd.java\t2023-03-24 12:03:47.098806365 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if ()...))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "if (nn <= n)){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:03:49.654796271 +0100\n+++ /tmp/tmp1wmv45jl.java\t2023-03-24 12:03:49.658796255 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn <= n)){\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "if (n, \"@))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:03:52.126786509 +0100\n+++ /tmp/tmpcti82gr6.java\t2023-03-24 12:03:52.126786509 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n, \"@))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "if (ches))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:03:54.438777379 +0100\n+++ /tmp/tmp82pousv0.java\t2023-03-24 12:03:54.438777379 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (ches))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "if (\u2578))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:03:56.494769258 +0100\n+++ /tmp/tmp0v66gsat.java\t2023-03-24 12:03:56.494769258 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (\u2578))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "if ( simulate))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:03:58.522761250 +0100\n+++ /tmp/tmp49mhsnby.java\t2023-03-24 12:03:58.522761250 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if ( simulate))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "if (nn,++){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:00.626752940 +0100\n+++ /tmp/tmpo03pqzqf.java\t2023-03-24 12:04:00.630752925 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn,++){\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "if (valid) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:02.546746091 +0100\n+++ /tmp/tmpw0qxmd0c.java\t2023-03-24 12:04:02.546746091 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (valid) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "if (n <= n){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:04.558740750 +0100\n+++ /tmp/tmp1t2r9xpk.java\t2023-03-24 12:04:04.558740750 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n <= n){\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "if ( hole))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:09.258728240 +0100\n+++ /tmp/tmp_k9o16kg.java\t2023-03-24 12:04:09.258728240 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if ( hole))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "if (tsts, n){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:11.214723018 +0100\n+++ /tmp/tmpvkoyoqsk.java\t2023-03-24 12:04:11.214723018 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (tsts, n){\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "if (n, returned returned;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:13.134717885 +0100\n+++ /tmp/tmpr2s25lhc.java\t2023-03-24 12:04:13.138717874 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n, returned returned;\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "if (TTL))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:15.030712807 +0100\n+++ /tmp/tmp47mxg1vd.java\t2023-03-24 12:04:15.034712795 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (TTL))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "if ( writing))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:16.950707657 +0100\n+++ /tmp/tmp19ld54dl.java\t2023-03-24 12:04:16.950707657 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if ( writing))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "if (nn, Generic;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:18.870702499 +0100\n+++ /tmp/tmpkrre1dvl.java\t2023-03-24 12:04:18.870702499 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn, Generic;\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "if (nn <= n 13,){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:20.742697462 +0100\n+++ /tmp/tmpn_bhoo2_.java\t2023-03-24 12:04:20.742697462 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn <= n 13,){\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "if (nn < 0){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:22.658692299 +0100\n+++ /tmp/tmpbk6tlnq5.java\t2023-03-24 12:04:22.658692299 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn < 0){\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "if ( getFullName))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:24.746686662 +0100\n+++ /tmp/tmp3d777xzv.java\t2023-03-24 12:04:24.750686652 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if ( getFullName))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "if (n, Generic;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:26.670681461 +0100\n+++ /tmp/tmp8f_xnlhr.java\t2023-03-24 12:04:26.670681461 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n, Generic;\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "if (uild))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:28.542676392 +0100\n+++ /tmp/tmphinjqm_e.java\t2023-03-24 12:04:28.542676392 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (uild))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "if (nn, returned returned;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:30.346671501 +0100\n+++ /tmp/tmpev4boptm.java\t2023-03-24 12:04:30.346671501 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn, returned returned;\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "if (n,++){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:32.194666482 +0100\n+++ /tmp/tmp49gyork9.java\t2023-03-24 12:04:32.194666482 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (n,++){\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "if (cur))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:33.950661708 +0100\n+++ /tmp/tmp688mi0ob.java\t2023-03-24 12:04:33.950661708 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (cur))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "if (orated))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:35.834656578 +0100\n+++ /tmp/tmpx2td5bvz.java\t2023-03-24 12:04:35.834656578 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (orated))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "if ( 10000))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:37.718651438 +0100\n+++ /tmp/tmptl8t_1h6.java\t2023-03-24 12:04:37.718651438 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if ( 10000))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "if (nn <= n 13,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:39.506646556 +0100\n+++ /tmp/tmp__x0rcbq.java\t2023-03-24 12:04:39.506646556 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if (nn <= n 13,\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "if ( factorial))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:41.318641600 +0100\n+++ /tmp/tmp_4jfuw16.java\t2023-03-24 12:04:41.318641600 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if ( factorial))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "if ( getUserId))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/sieve/java_programs/SIEVE.java\t2023-03-24 12:04:43.270636254 +0100\n+++ /tmp/tmpgenzchxk.java\t2023-03-24 12:04:43.270636254 +0100\n@@ -36,11 +36,11 @@\n \n \n     public static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if (any(list_comp(n, primes))) {\n+if ( getUserId))) {\n                 primes.add(n);\n             }\n         }\n         return primes;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "if (all(list_comp(n, primes))) {"
    },
    "gcd": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "return a % b, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:01:55.911245371 +0100\n+++ /tmp/tmppgh0vhpj.java\t2023-03-24 12:01:55.911245371 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return a % b, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "return gcd(a % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:02:01.863221875 +0100\n+++ /tmp/tmpywlm71iq.java\t2023-03-24 12:02:01.863221875 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "return gcd(a % b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:02:16.187165328 +0100\n+++ /tmp/tmp1ma7iloh.java\t2023-03-24 12:02:16.187165328 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a % b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "return gcd(a % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:02:29.791111621 +0100\n+++ /tmp/tmpioeebbpp.java\t2023-03-24 12:02:29.791111621 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "return gcd(a % b, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:02:35.411089433 +0100\n+++ /tmp/tmp4nfif6_1.java\t2023-03-24 12:02:35.411089433 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a % b, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "return a % b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:02:40.715068492 +0100\n+++ /tmp/tmpi6q8ms5g.java\t2023-03-24 12:02:40.715068492 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return a % b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "return decode decodea % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:02:46.335046303 +0100\n+++ /tmp/tmp215wl9i0.java\t2023-03-24 12:02:46.335046303 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return decode decodea % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "return decode decodea % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:02:51.679025204 +0100\n+++ /tmp/tmpndt0tyg3.java\t2023-03-24 12:02:51.679025204 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return decode decodea % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "return a % b, a;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:02:57.051003993 +0100\n+++ /tmp/tmp6n7hmpcf.java\t2023-03-24 12:02:57.051003993 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return a % b, a;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "return bundle % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:03:01.986984503 +0100\n+++ /tmp/tmpg94t7cki.java\t2023-03-24 12:03:01.986984503 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return bundle % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "return decodeEa % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:03:06.154968046 +0100\n+++ /tmp/tmpja23vbmj.java\t2023-03-24 12:03:06.154968046 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return decodeEa % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "return gcd(a % 2 == 0;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:03:10.698950104 +0100\n+++ /tmp/tmpbjwpzvop.java\t2023-03-24 12:03:10.698950104 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a % 2 == 0;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "returnDomainDomaina % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:03:14.690934341 +0100\n+++ /tmp/tmpvpgqcyek.java\t2023-03-24 12:03:14.690934341 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnDomainDomaina % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "return decode(a % b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:03:19.046917141 +0100\n+++ /tmp/tmpykjfxx_g.java\t2023-03-24 12:03:19.046917141 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return decode(a % b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "return a % b == 0;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:03:22.802902310 +0100\n+++ /tmp/tmpun5vwue1.java\t2023-03-24 12:03:22.806902294 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return a % b == 0;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "return decodeEa % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:03:26.422888015 +0100\n+++ /tmp/tmpu36chqis.java\t2023-03-24 12:03:26.422888015 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return decodeEa % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "return decode(a % b, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:03:29.806874651 +0100\n+++ /tmp/tmp3s6w6xey.java\t2023-03-24 12:03:29.806874651 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return decode(a % b, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "return gcd(a % b, b.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:03:33.338860703 +0100\n+++ /tmp/tmpxm9u9en3.java\t2023-03-24 12:03:33.342860687 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a % b, b.\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "return a % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:03:37.262845206 +0100\n+++ /tmp/tmp6nwdhsy0.java\t2023-03-24 12:03:37.262845206 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return a % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "returnpd(a % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:03:40.418832745 +0100\n+++ /tmp/tmpt_l7w5gr.java\t2023-03-24 12:03:40.422832729 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnpd(a % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "return etc(a % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:03:43.758819555 +0100\n+++ /tmp/tmpu0nkbcf0.java\t2023-03-24 12:03:43.758819555 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return etc(a % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "return even(a % b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:03:46.858807312 +0100\n+++ /tmp/tmpnc70_2h_.java\t2023-03-24 12:03:46.858807312 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return even(a % b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "return gcd(a % a, b.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:03:49.626796381 +0100\n+++ /tmp/tmpqe01ff0g.java\t2023-03-24 12:03:49.630796365 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a % a, b.\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "return decode decodea % b, a;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:03:52.146786429 +0100\n+++ /tmp/tmpxqj4fm1o.java\t2023-03-24 12:03:52.146786429 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return decode decodea % b, a;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "return a % b, b.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:03:54.430777410 +0100\n+++ /tmp/tmpkvmn61yv.java\t2023-03-24 12:03:54.430777410 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return a % b, b.\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "returnOrCreate(a % b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:03:56.526769132 +0100\n+++ /tmp/tmptq2jgg8j.java\t2023-03-24 12:03:56.526769132 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnOrCreate(a % b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "returnPART(a % b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:03:58.666760681 +0100\n+++ /tmp/tmptszsqmtz.java\t2023-03-24 12:03:58.666760681 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnPART(a % b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "returnDomainDomaina % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:00.858752025 +0100\n+++ /tmp/tmpdz8uxcno.java\t2023-03-24 12:04:00.858752025 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnDomainDomaina % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "return lhs(a % b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:02.694745700 +0100\n+++ /tmp/tmpxe1eye5t.java\t2023-03-24 12:04:02.694745700 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return lhs(a % b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "return bean % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:04.650740506 +0100\n+++ /tmp/tmp2skfh7p3.java\t2023-03-24 12:04:04.650740506 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return bean % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "return gcd(a % b, a;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:06.574735391 +0100\n+++ /tmp/tmpfa1yulcb.java\t2023-03-24 12:04:06.574735391 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a % b, a;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "returnDomain = a % b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:08.514730223 +0100\n+++ /tmp/tmp7l5xlya4.java\t2023-03-24 12:04:08.518730212 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnDomain = a % b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "return gcd(a % 102, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:10.510724898 +0100\n+++ /tmp/tmpot8wtayq.java\t2023-03-24 12:04:10.510724898 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a % 102, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "return decode decodea % b, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:12.526719510 +0100\n+++ /tmp/tmpebfwjfvs.java\t2023-03-24 12:04:12.526719510 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return decode decodea % b, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "return decode decodea % a == b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:14.494714242 +0100\n+++ /tmp/tmp3mv3yaz6.java\t2023-03-24 12:04:14.498714232 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return decode decodea % a == b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "return bundle(a % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:16.494708881 +0100\n+++ /tmp/tmpjuns2xgh.java\t2023-03-24 12:04:16.494708881 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return bundle(a % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "returnOrCreate(a % b, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:18.570703306 +0100\n+++ /tmp/tmpah4wh__j.java\t2023-03-24 12:04:18.574703293 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnOrCreate(a % b, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "return gcd(a % edges, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:20.598697849 +0100\n+++ /tmp/tmp0y568dd5.java\t2023-03-24 12:04:20.598697849 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a % edges, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "returnconf(a % b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:22.666692276 +0100\n+++ /tmp/tmp65ecadof.java\t2023-03-24 12:04:22.714692147 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnconf(a % b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "return array % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:24.738686685 +0100\n+++ /tmp/tmpz3ppv6ke.java\t2023-03-24 12:04:24.738686685 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return array % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "returnDomain(a % b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:26.650681515 +0100\n+++ /tmp/tmp1c431esd.java\t2023-03-24 12:04:26.650681515 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnDomain(a % b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "returnCert(a % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:28.606676219 +0100\n+++ /tmp/tmpvhkseqv0.java\t2023-03-24 12:04:28.606676219 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnCert(a % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "return exists(a % b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:30.394671370 +0100\n+++ /tmp/tmpq4xtcn_r.java\t2023-03-24 12:04:30.398671359 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return exists(a % b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "return array.length % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:32.314666157 +0100\n+++ /tmp/tmpaoe5dp9p.java\t2023-03-24 12:04:32.318666145 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return array.length % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "return null % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:34.202661022 +0100\n+++ /tmp/tmpzslppz7l.java\t2023-03-24 12:04:34.202661022 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return null % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "returnples(a % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:36.046656000 +0100\n+++ /tmp/tmpy14o5ec3.java\t2023-03-24 12:04:36.046656000 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnples(a % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "return a % this.b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:37.906650927 +0100\n+++ /tmp/tmpm31zh40q.java\t2023-03-24 12:04:37.906650927 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return a % this.b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "returnDomain = a % b, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:39.794645768 +0100\n+++ /tmp/tmpz7zwrfrm.java\t2023-03-24 12:04:39.794645768 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnDomain = a % b, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "return this.a % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:41.630640746 +0100\n+++ /tmp/tmptj_zj4f3.java\t2023-03-24 12:04:41.630640746 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return this.a % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "return ks(a % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:43.406635881 +0100\n+++ /tmp/tmppy4kqchv.java\t2023-03-24 12:04:43.406635881 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return ks(a % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "return gcd(a % b, b2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:45.278630747 +0100\n+++ /tmp/tmpcwx2efyy.java\t2023-03-24 12:04:45.278630747 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a % b, b2;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "return decode(a % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:47.706624075 +0100\n+++ /tmp/tmp39sgjk8n.java\t2023-03-24 12:04:47.706624075 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return decode(a % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "return bundle % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:49.950617898 +0100\n+++ /tmp/tmpb5p2eknp.java\t2023-03-24 12:04:49.950617898 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return bundle % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "return gcd(a %s, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:51.770612881 +0100\n+++ /tmp/tmp6h96gmfu.java\t2023-03-24 12:04:51.770612881 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a %s, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "return gcd(a % b, b /",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:53.638607726 +0100\n+++ /tmp/tmpdl9yxpcf.java\t2023-03-24 12:04:53.638607726 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a % b, b /\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "returnnamespaces(a % b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:55.326603059 +0100\n+++ /tmp/tmpcwb3kerb.java\t2023-03-24 12:04:55.326603059 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnnamespaces(a % b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "returnShapes(a % b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:57.014598389 +0100\n+++ /tmp/tmpuinxmeyg.java\t2023-03-24 12:04:57.014598389 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnShapes(a % b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "return array.length % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:04:58.726593644 +0100\n+++ /tmp/tmp7sl1ak2b.java\t2023-03-24 12:04:58.754593567 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return array.length % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "returnCandidate(a % b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:00.450588862 +0100\n+++ /tmp/tmp_407kzfj.java\t2023-03-24 12:05:00.454588850 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnCandidate(a % b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "return input % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:02.142584160 +0100\n+++ /tmp/tmp9wsklwhu.java\t2023-03-24 12:05:02.142584160 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return input % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "return grpc(a % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:03.762579656 +0100\n+++ /tmp/tmpsy2od5w9.java\t2023-03-24 12:05:03.762579656 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return grpc(a % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "return bundle(a % b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:05.486574854 +0100\n+++ /tmp/tmpuqcvurlm.java\t2023-03-24 12:05:05.486574854 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return bundle(a % b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "return a % b, b.next;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:07.214570037 +0100\n+++ /tmp/tmpjw9hilvb.java\t2023-03-24 12:05:07.214570037 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return a % b, b.next;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "return\u1e2f(a % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:08.894565348 +0100\n+++ /tmp/tmp60d5pm02.java\t2023-03-24 12:05:08.894565348 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return\u1e2f(a % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "returnOrCreate = a % b, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:10.586560618 +0100\n+++ /tmp/tmphta_usr_.java\t2023-03-24 12:05:10.586560618 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnOrCreate = a % b, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "return targetType % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:12.346555694 +0100\n+++ /tmp/tmpn11l3_m_.java\t2023-03-24 12:05:12.346555694 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return targetType % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "returnCalculator(a % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:14.082550829 +0100\n+++ /tmp/tmp4l370v5m.java\t2023-03-24 12:05:14.086550819 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnCalculator(a % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "return this.a % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:15.774546084 +0100\n+++ /tmp/tmpcsc562xb.java\t2023-03-24 12:05:15.774546084 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return this.a % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "return gcd = a % b, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:17.474541310 +0100\n+++ /tmp/tmpbs157h52.java\t2023-03-24 12:05:17.474541310 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd = a % b, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "return a % this.b, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:19.190536484 +0100\n+++ /tmp/tmpzqdoaozw.java\t2023-03-24 12:05:19.190536484 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return a % this.b, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "return gcd(a % b, b];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:20.954531520 +0100\n+++ /tmp/tmp317prcv8.java\t2023-03-24 12:05:20.954531520 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a % b, b];\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "return gcd(a % b, b4;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:22.714526559 +0100\n+++ /tmp/tmpyt_rk_mg.java\t2023-03-24 12:05:22.714526559 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a % b, b4;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "return gcd(a % edges, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:24.410521773 +0100\n+++ /tmp/tmp7ee63u7z.java\t2023-03-24 12:05:24.410521773 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a % edges, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "returnpd(a % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:26.154516845 +0100\n+++ /tmp/tmp8p3m9mg_.java\t2023-03-24 12:05:26.158516834 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnpd(a % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "return gcd(a % b, b)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:27.830512104 +0100\n+++ /tmp/tmpimnrjuvp.java\t2023-03-24 12:05:27.830512104 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a % b, b)\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "returnconf(a % b, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:29.570507176 +0100\n+++ /tmp/tmpqyq8j05w.java\t2023-03-24 12:05:29.570507176 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnconf(a % b, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "return a % b, b /",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:31.294502288 +0100\n+++ /tmp/tmp6p_6stl7.java\t2023-03-24 12:05:31.294502288 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return a % b, b /\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "return gcd(a % 2 == b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:33.006497431 +0100\n+++ /tmp/tmpitz42pmb.java\t2023-03-24 12:05:33.006497431 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a % 2 == b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "returnDomain0a % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:34.734492520 +0100\n+++ /tmp/tmpohawgebr.java\t2023-03-24 12:05:34.734492520 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnDomain0a % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "return gcd(a %s, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:36.430487695 +0100\n+++ /tmp/tmpt8ux_ewg.java\t2023-03-24 12:05:36.430487695 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a %s, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "return gcd = a % b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:38.178482716 +0100\n+++ /tmp/tmp88tn1_m6.java\t2023-03-24 12:05:38.178482716 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd = a % b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "return maxWidth % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:39.862477916 +0100\n+++ /tmp/tmpomoh6_sk.java\t2023-03-24 12:05:39.862477916 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return maxWidth % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "return part % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:41.610472925 +0100\n+++ /tmp/tmp0uqxlzgl.java\t2023-03-24 12:05:41.610472925 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return part % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "return ast % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:43.310468066 +0100\n+++ /tmp/tmppcluh435.java\t2023-03-24 12:05:43.310468066 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return ast % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "return a % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:44.990463260 +0100\n+++ /tmp/tmpejwo_5ef.java\t2023-03-24 12:05:44.990463260 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return a % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "returnDomain0a % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:46.770458163 +0100\n+++ /tmp/tmpzjj1xnhb.java\t2023-03-24 12:05:46.770458163 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnDomain0a % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "return lhs(a % b, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:48.450453346 +0100\n+++ /tmp/tmpkloccidx.java\t2023-03-24 12:05:48.450453346 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return lhs(a % b, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "return idx % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:50.090448638 +0100\n+++ /tmp/tmpebhmbotn.java\t2023-03-24 12:05:50.090448638 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return idx % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "return b % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:51.798443730 +0100\n+++ /tmp/tmpf26if1lw.java\t2023-03-24 12:05:51.798443730 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return b % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "return decode decodea % b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:53.510438805 +0100\n+++ /tmp/tmpcwxvfds4.java\t2023-03-24 12:05:53.510438805 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return decode decodea % b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "return coreLen % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:55.154434071 +0100\n+++ /tmp/tmpgees65c2.java\t2023-03-24 12:05:55.154434071 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return coreLen % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "returnOrCreate = a % b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:56.826429252 +0100\n+++ /tmp/tmpkmyx6x8t.java\t2023-03-24 12:05:56.830429240 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+returnOrCreate = a % b, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "return acc % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:05:58.486424462 +0100\n+++ /tmp/tmpxvd2fc5q.java\t2023-03-24 12:05:58.486424462 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return acc % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "return a % b, b == 0;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:06:00.178419573 +0100\n+++ /tmp/tmpjsbyo5vp.java\t2023-03-24 12:06:00.178419573 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return a % b, b == 0;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "return decode(a % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:06:01.826414809 +0100\n+++ /tmp/tmpl1g989ko.java\t2023-03-24 12:06:01.826414809 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return decode(a % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "return bean % a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:06:03.562409784 +0100\n+++ /tmp/tmpes05s6ao.java\t2023-03-24 12:06:03.562409784 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return bean % a, b);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "return v % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:06:05.306404729 +0100\n+++ /tmp/tmpjbyytwf2.java\t2023-03-24 12:06:05.306404729 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return v % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "return by the % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:06:06.994399834 +0100\n+++ /tmp/tmpniuye78l.java\t2023-03-24 12:06:06.994399834 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return by the % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "return gcd(a % a, b2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:06:08.710394850 +0100\n+++ /tmp/tmpfrh846ch.java\t2023-03-24 12:06:08.710394850 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return gcd(a % a, b2;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "return origin % a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/gcd/java_programs/GCD.java\t2023-03-24 12:06:10.430389850 +0100\n+++ /tmp/tmpcvv8vrmg.java\t2023-03-24 12:06:10.430389850 +0100\n@@ -14,9 +14,9 @@\n \n     public static int gcd(int a, int b) {\n         if (b == 0) {\n             return a;\n         } else {\n-            return gcd(a % b, b);\n+return origin % a, b;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "return gcd(b, a%b);"
    },
    "shortest_path_lengths": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:04:49.042620399 +0100\n+++ /tmp/tmprkux3e9f.java\t2023-03-24 12:04:49.090620267 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length)) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:04:51.018614956 +0100\n+++ /tmp/tmpus7p83_j.java\t2023-03-24 12:04:51.018614956 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k)) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length - 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:04:52.894609779 +0100\n+++ /tmp/tmp0uiybxog.java\t2023-03-24 12:04:52.894609779 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length - 1) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_lengthlength)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:04:54.694604807 +0100\n+++ /tmp/tmprd59glqx.java\t2023-03-24 12:04:54.694604807 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_lengthlength)) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k))));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:04:56.438599984 +0100\n+++ /tmp/tmpoxrg03mc.java\t2023-03-24 12:04:56.438599984 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k))));\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, k)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:04:58.310594798 +0100\n+++ /tmp/tmpkhr54_ka.java\t2023-03-24 12:04:58.314594786 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, k)) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k + i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:00.022590049 +0100\n+++ /tmp/tmp97smr0ag.java\t2023-03-24 12:05:00.022590049 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k + i;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length),k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:01.714585349 +0100\n+++ /tmp/tmp0zocw4rh.java\t2023-03-24 12:05:01.718585339 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length),k;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length,k))",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:03.486580422 +0100\n+++ /tmp/tmpqiajmvoz.java\t2023-03-24 12:05:03.486580422 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length,k))\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, k, update_length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:05.266575467 +0100\n+++ /tmp/tmpuvjfbg8c.java\t2023-03-24 12:05:05.266575467 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, k, update_length;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, i,k)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:06.954570762 +0100\n+++ /tmp/tmp6g01k3k6.java\t2023-03-24 12:05:06.954570762 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, i,k)) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length)k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:08.742565772 +0100\n+++ /tmp/tmpjsw7lsw1.java\t2023-03-24 12:05:08.746565760 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length)k;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length - 1)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:10.482560910 +0100\n+++ /tmp/tmpcbc9evzi.java\t2023-03-24 12:05:10.486560897 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length - 1)\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length,k));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:12.278555884 +0100\n+++ /tmp/tmpfenarp97.java\t2023-03-24 12:05:12.282555872 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length,k));\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:13.998551065 +0100\n+++ /tmp/tmpiaj38z50.java\t2023-03-24 12:05:13.998551065 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length));\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length))",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:15.726546218 +0100\n+++ /tmp/tmpcusqj7sq.java\t2023-03-24 12:05:15.726546218 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length))\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length))));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:17.482541287 +0100\n+++ /tmp/tmp824agdpk.java\t2023-03-24 12:05:17.482541287 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length))));\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:19.278536238 +0100\n+++ /tmp/tmpbyaaw6e7.java\t2023-03-24 12:05:19.278536238 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:20.986531429 +0100\n+++ /tmp/tmpcq9n6g2p.java\t2023-03-24 12:05:20.986531429 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length,\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k))s",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:22.722526536 +0100\n+++ /tmp/tmp0uwdejcu.java\t2023-03-24 12:05:22.722526536 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k))s\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length)) /",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:24.466521614 +0100\n+++ /tmp/tmpudqvjj58.java\t2023-03-24 12:05:24.470521603 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length)) /\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length, k)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:26.202516709 +0100\n+++ /tmp/tmpipl_5mwj.java\t2023-03-24 12:05:26.202516709 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length, k)) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k + 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:27.966511720 +0100\n+++ /tmp/tmp9irjw476.java\t2023-03-24 12:05:27.966511720 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k + 1) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "length_by_path.get(Arrays.asList(i, k)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:29.658506928 +0100\n+++ /tmp/tmpf0oozdsg.java\t2023-03-24 12:05:29.658506928 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(i, k)) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length)) / 2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:31.346502142 +0100\n+++ /tmp/tmpraebamj3.java\t2023-03-24 12:05:31.346502142 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length)) / 2;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length -k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:33.074497236 +0100\n+++ /tmp/tmp66vths94.java\t2023-03-24 12:05:33.074497236 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length -k;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length + i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:34.754492462 +0100\n+++ /tmp/tmpik253o9h.java\t2023-03-24 12:05:34.754492462 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length + i;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length - 1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:36.458487615 +0100\n+++ /tmp/tmpsdyrewfa.java\t2023-03-24 12:05:36.462487604 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length - 1);\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k)) ;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:38.186482694 +0100\n+++ /tmp/tmp0dtojrp4.java\t2023-03-24 12:05:38.186482694 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k)) ;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_lengthlength,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:39.962477629 +0100\n+++ /tmp/tmpls15sezc.java\t2023-03-24 12:05:39.966477619 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_lengthlength,\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length))k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:41.662472776 +0100\n+++ /tmp/tmpatp6gs46.java\t2023-03-24 12:05:41.662472776 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length))k;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k)) i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:43.366467907 +0100\n+++ /tmp/tmpls1in5h7.java\t2023-03-24 12:05:43.366467907 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k)) i;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, i, k)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:45.022463170 +0100\n+++ /tmp/tmp5s1hfbws.java\t2023-03-24 12:05:45.026463157 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, i, k)) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length)) <=",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:46.778458140 +0100\n+++ /tmp/tmpve0ob6ag.java\t2023-03-24 12:05:46.778458140 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length)) <=\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length + 1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:48.490453231 +0100\n+++ /tmp/tmptdl756yl.java\t2023-03-24 12:05:48.490453231 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length + 1);\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length),",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:50.230448236 +0100\n+++ /tmp/tmpgznkhixf.java\t2023-03-24 12:05:50.234448224 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length),\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length),k",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:51.958443271 +0100\n+++ /tmp/tmp61xzmszk.java\t2023-03-24 12:05:51.958443271 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length),k\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, k, update_length))",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:53.630438459 +0100\n+++ /tmp/tmpg6rxdwmy.java\t2023-03-24 12:05:53.630438459 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, k, update_length))\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "length_by_path.get(Arrays.asList(j,update_length)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:55.330433564 +0100\n+++ /tmp/tmpyx8ppwc4.java\t2023-03-24 12:05:55.330433564 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j,update_length)) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "length_by_path.get(Arrays.asList(value,k)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:56.990428779 +0100\n+++ /tmp/tmp7uoqqmo3.java\t2023-03-24 12:05:56.990428779 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(value,k)) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k))[0];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:05:58.682423896 +0100\n+++ /tmp/tmpj89922k7.java\t2023-03-24 12:05:58.682423896 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k))[0];\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_lengthlength;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:00.414418892 +0100\n+++ /tmp/tmpipu5xelh.java\t2023-03-24 12:06:00.414418892 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_lengthlength;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "length_by_path.get(Arrays.asList(partition_length,k)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:02.074414090 +0100\n+++ /tmp/tmpo_2evzrm.java\t2023-03-24 12:06:02.074414090 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(partition_length,k)) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length))s",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:03.718409331 +0100\n+++ /tmp/tmpz29qx5xh.java\t2023-03-24 12:06:03.718409331 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length))s\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_lengthlength));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:05.406404439 +0100\n+++ /tmp/tmp8ot_tdz0.java\t2023-03-24 12:06:05.410404429 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_lengthlength));\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, i,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:07.122399461 +0100\n+++ /tmp/tmpf6_mgqs9.java\t2023-03-24 12:06:07.126399449 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, i,\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length)) ;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:08.814394548 +0100\n+++ /tmp/tmpuuyhmmem.java\t2023-03-24 12:06:08.814394548 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length)) ;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length - 1) ;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:10.530389558 +0100\n+++ /tmp/tmp202npjai.java\t2023-03-24 12:06:10.534389548 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length - 1) ;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k))",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:12.306384390 +0100\n+++ /tmp/tmpevj52d4w.java\t2023-03-24 12:06:12.306384390 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k))\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:14.166378971 +0100\n+++ /tmp/tmpp1t7hpgw.java\t2023-03-24 12:06:14.166378971 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k));\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, k, update_length));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:15.838374095 +0100\n+++ /tmp/tmpp5ja1t6d.java\t2023-03-24 12:06:15.838374095 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, k, update_length));\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length ==",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:17.646368816 +0100\n+++ /tmp/tmpn1mdhhdv.java\t2023-03-24 12:06:17.650368804 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length ==\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length,k)),",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:19.426363614 +0100\n+++ /tmp/tmp61nc2rx5.java\t2023-03-24 12:06:19.430363602 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length,k)),\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length - 1)];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:21.106358699 +0100\n+++ /tmp/tmpcbuh6x0y.java\t2023-03-24 12:06:21.106358699 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length - 1)];\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, b,k)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:22.790353768 +0100\n+++ /tmp/tmpeyan1_k9.java\t2023-03-24 12:06:22.790353768 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, b,k)) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length - 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:24.486348795 +0100\n+++ /tmp/tmpg07j8tae.java\t2023-03-24 12:06:24.486348795 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length - 1));\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, k, update_length)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:26.206343749 +0100\n+++ /tmp/tmp706oy5xy.java\t2023-03-24 12:06:26.238343655 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, k, update_length)\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, k, update_length);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:27.966338578 +0100\n+++ /tmp/tmpaycydc49.java\t2023-03-24 12:06:27.966338578 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, k, update_length);\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k))s;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:29.678333544 +0100\n+++ /tmp/tmp0q979min.java\t2023-03-24 12:06:29.678333544 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k))s;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k)) <=",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:31.474328258 +0100\n+++ /tmp/tmpamrwjnik.java\t2023-03-24 12:06:31.478328248 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k)) <=\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length,k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:33.178323237 +0100\n+++ /tmp/tmpqdnyd2k3.java\t2023-03-24 12:06:33.178323237 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length,k;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length - 1)[0];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:34.902318154 +0100\n+++ /tmp/tmpqypuiugy.java\t2023-03-24 12:06:34.902318154 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length - 1)[0];\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k + 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:36.630313054 +0100\n+++ /tmp/tmpfhi0q7rq.java\t2023-03-24 12:06:36.630313054 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k + 1));\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k + 1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:38.374307898 +0100\n+++ /tmp/tmpo3xyn2wb.java\t2023-03-24 12:06:38.374307898 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k + 1);\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k)) <= 0;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:40.114302752 +0100\n+++ /tmp/tmp5oadqpj0.java\t2023-03-24 12:06:40.114302752 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k)) <= 0;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, k - 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:41.834297660 +0100\n+++ /tmp/tmpx4fcq1vp.java\t2023-03-24 12:06:41.838297647 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, k - 1) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "length_by_path.get(Arrays.asList(PROP_length,k)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:43.530292634 +0100\n+++ /tmp/tmpwl1nw9k9.java\t2023-03-24 12:06:43.530292634 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(PROP_length,k)) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, k + update_length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:45.258287509 +0100\n+++ /tmp/tmpoajzehp7.java\t2023-03-24 12:06:45.258287509 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, k + update_length;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k - 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:46.938282519 +0100\n+++ /tmp/tmprbo4dfyr.java\t2023-03-24 12:06:46.938282519 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k - 1) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, k), update_length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:48.686277323 +0100\n+++ /tmp/tmpa5brcvu3.java\t2023-03-24 12:06:48.686277323 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, k), update_length;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length)) - 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:50.410272196 +0100\n+++ /tmp/tmphr2q02d7.java\t2023-03-24 12:06:50.410272196 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length)) - 1;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "length_by_path.get(Arrays.asList(i, k - 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:52.082267217 +0100\n+++ /tmp/tmp3axsgo73.java\t2023-03-24 12:06:52.082267217 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(i, k - 1) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "length_by_path.get(Arrays.asList(timeout, update_length)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:53.782262149 +0100\n+++ /tmp/tmph05pnbgu.java\t2023-03-24 12:06:53.782262149 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(timeout, update_length)) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length,;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:55.538256912 +0100\n+++ /tmp/tmpclhw1kf2.java\t2023-03-24 12:06:55.538256912 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length,;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length)) <= 0;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:57.274251728 +0100\n+++ /tmp/tmpnfvzzl91.java\t2023-03-24 12:06:57.274251728 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length)) <= 0;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k)) ),",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:06:59.062246384 +0100\n+++ /tmp/tmpge4zdhe_.java\t2023-03-24 12:06:59.062246384 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k)) ),\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:00.806241167 +0100\n+++ /tmp/tmpedw5sot5.java\t2023-03-24 12:07:00.806241167 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length));\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k))length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:02.566235896 +0100\n+++ /tmp/tmpqx33u82d.java\t2023-03-24 12:07:02.570235884 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k))length;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "length_by_path.get(Arrays.asList(sum_length,k)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:04.366230501 +0100\n+++ /tmp/tmprjawald4.java\t2023-03-24 12:07:04.366230501 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(sum_length,k)) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k))flush",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:06.162225113 +0100\n+++ /tmp/tmpp_in1q1w.java\t2023-03-24 12:07:06.166225101 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k))flush\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length))[0];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:07.902219887 +0100\n+++ /tmp/tmpd7jbsllz.java\t2023-03-24 12:07:07.902219887 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length))[0];\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "lengthBefore_path.get(Arrays.asList(j, update_length,k)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:09.578214850 +0100\n+++ /tmp/tmpajvhb2sz.java\t2023-03-24 12:07:09.578214850 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+lengthBefore_path.get(Arrays.asList(j, update_length,k)) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k)) uuid uuid",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:11.282209724 +0100\n+++ /tmp/tmp5qnl19h9.java\t2023-03-24 12:07:11.282209724 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k)) uuid uuid\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k)) e",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:12.990204581 +0100\n+++ /tmp/tmpjp8tujxt.java\t2023-03-24 12:07:12.994204568 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k)) e\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length)) >= 0;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:14.726199350 +0100\n+++ /tmp/tmpfu7guate.java\t2023-03-24 12:07:14.730199337 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length)) >= 0;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k)) b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:16.454194138 +0100\n+++ /tmp/tmppo1s5t7e.java\t2023-03-24 12:07:16.454194138 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k)) b;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k)) >= 0;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:18.130189078 +0100\n+++ /tmp/tmprft95_rw.java\t2023-03-24 12:07:18.134189066 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k)) >= 0;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k))Match;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:19.822183964 +0100\n+++ /tmp/tmpz0we7751.java\t2023-03-24 12:07:19.822183964 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k))Match;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length)),k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:21.494178907 +0100\n+++ /tmp/tmp3af1pjup.java\t2023-03-24 12:07:21.498178895 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length)),k;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_lengthlength))",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:23.226173666 +0100\n+++ /tmp/tmp2i5rnolt.java\t2023-03-24 12:07:23.226173666 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_lengthlength))\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k))Width;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:24.982168345 +0100\n+++ /tmp/tmp_b58o6ia.java\t2023-03-24 12:07:24.982168345 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k))Width;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "length_by_path.get(Arrays.asList(initial_length,k)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:26.710163107 +0100\n+++ /tmp/tmpvxb0cl7m.java\t2023-03-24 12:07:26.710163107 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(initial_length,k)) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k)) : 0;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:28.434157874 +0100\n+++ /tmp/tmpj38zslg5.java\t2023-03-24 12:07:28.434157874 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k)) : 0;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:30.178152578 +0100\n+++ /tmp/tmpx9v7nb_g.java\t2023-03-24 12:07:30.178152578 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length);\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k)) - 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:31.974147117 +0100\n+++ /tmp/tmpg7z17te1.java\t2023-03-24 12:07:31.974147117 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k)) - 1;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length - 1) );",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:33.734141762 +0100\n+++ /tmp/tmpzyk_zcm3.java\t2023-03-24 12:07:33.738141750 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length - 1) );\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "length_by_path.get(Arrays.asList(update_length,k))s,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:35.490136415 +0100\n+++ /tmp/tmptjnpnhjt.java\t2023-03-24 12:07:35.490136415 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(update_length,k))s,\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_length).k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:37.290130928 +0100\n+++ /tmp/tmpkge18egu.java\t2023-03-24 12:07:37.290130928 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_length).k;\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, source)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:39.022125644 +0100\n+++ /tmp/tmpbwlug19u.java\t2023-03-24 12:07:39.022125644 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, source)) {\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "length_by_path.get(Arrays.asList(j, update_lengthlengthlength));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shortest_path_lengths/java_programs/SHORTEST_PATH_LENGTHS.java\t2023-03-24 12:07:40.794120234 +0100\n+++ /tmp/tmpoppzumij.java\t2023-03-24 12:07:40.794120234 +0100\n@@ -32,11 +32,11 @@\n         for (int k = 0; k < numNodes; k++) {\n             for (int i = 0; i < numNodes; i++) {\n                 for (int j = 0; j < numNodes; j++) {\n                     int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                  sumLengths(length_by_path.get(Arrays.asList(i,k)),\n-                                                            length_by_path.get(Arrays.asList(j,k))));\n+length_by_path.get(Arrays.asList(j, update_lengthlengthlength));\n                     length_by_path.put(Arrays.asList(i,j), update_length);\n                 }\n             }\n         }\n         return length_by_path;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "length_by_path.get(Arrays.asList(k,j))));"
    },
    "get_factors": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "return new ArrayList<Integer>();",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:13.450381058 +0100\n+++ /tmp/tmp58uffln3.java\t2023-03-24 12:06:13.514380871 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer>();\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "return new ArrayList<Integer];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:17.654368794 +0100\n+++ /tmp/tmpyxurc8dw.java\t2023-03-24 12:06:17.654368794 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer];\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "return new ArrayList<Integer });",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:19.374363767 +0100\n+++ /tmp/tmpu42vsf5l.java\t2023-03-24 12:06:19.374363767 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer });\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "return new ArrayList<Integer>",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:21.078358781 +0100\n+++ /tmp/tmpyte77sz5.java\t2023-03-24 12:06:21.078358781 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer>\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "return new ArrayList<Integer;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:22.766353838 +0100\n+++ /tmp/tmpkfwx96it.java\t2023-03-24 12:06:22.766353838 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "return new ArrayList<Integer<>();",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:24.482348807 +0100\n+++ /tmp/tmptiumc8_k.java\t2023-03-24 12:06:24.482348807 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer<>();\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "return new ArrayList<IntegerAR",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:26.274343550 +0100\n+++ /tmp/tmpljzil10k.java\t2023-03-24 12:06:26.274343550 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<IntegerAR\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "return new ArrayList<Integer(3);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:28.058338309 +0100\n+++ /tmp/tmp135x9eon.java\t2023-03-24 12:06:28.058338309 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer(3);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "return new ArrayList<Integer }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:29.714333439 +0100\n+++ /tmp/tmp5reo1872.java\t2023-03-24 12:06:29.714333439 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "return new ArrayList<Integer ');",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:31.422328412 +0100\n+++ /tmp/tmpdwubmwqf.java\t2023-03-24 12:06:31.422328412 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer ');\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "return new ArrayList<Integer27",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:33.118323416 +0100\n+++ /tmp/tmp_2w191fw.java\t2023-03-24 12:06:33.118323416 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer27\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "return new ArrayList<Integer};",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:34.830318365 +0100\n+++ /tmp/tmp1ora6hfr.java\t2023-03-24 12:06:34.830318365 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer};\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "return new ArrayList<Integer(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:36.598313148 +0100\n+++ /tmp/tmp4yofkk2q.java\t2023-03-24 12:06:36.598313148 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer(1);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "return new ArrayList<Integer {});",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:38.286308159 +0100\n+++ /tmp/tmpbx0h7bjp.java\t2023-03-24 12:06:38.290308148 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer {});\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "return new ArrayList<Integer>()",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:40.018303037 +0100\n+++ /tmp/tmpkhrpzf9x.java\t2023-03-24 12:06:40.018303037 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer>()\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "return new ArrayList<Integer(\"\");",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:41.714298014 +0100\n+++ /tmp/tmpfs2wrs22.java\t2023-03-24 12:06:41.718298004 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer(\"\");\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "return new ArrayList<Integer2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:43.438292907 +0100\n+++ /tmp/tmpjws_poqo.java\t2023-03-24 12:06:43.438292907 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer2;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "return new ArrayList<Integer(2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:45.138287863 +0100\n+++ /tmp/tmpfp8wh6dz.java\t2023-03-24 12:06:45.138287863 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer(2);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "return new ArrayList<Integer2.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:46.810282900 +0100\n+++ /tmp/tmp5nu4z0a3.java\t2023-03-24 12:06:46.838282816 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer2.\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "return new ArrayList<IntegerREF",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:48.546277741 +0100\n+++ /tmp/tmp3cxy5q1i.java\t2023-03-24 12:06:48.546277741 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<IntegerREF\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "return new ArrayList<Integer[0];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:50.346272387 +0100\n+++ /tmp/tmp5pz7grbm.java\t2023-03-24 12:06:50.350272375 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer[0];\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "return new ArrayList<Integer 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:52.046267324 +0100\n+++ /tmp/tmpxb4u4h_y.java\t2023-03-24 12:06:52.046267324 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer 1;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "return new ArrayList<Integerissues",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:53.778262162 +0100\n+++ /tmp/tmp5s8to7xs.java\t2023-03-24 12:06:53.778262162 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integerissues\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "return new ArrayList<Integer>\");",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:55.550256875 +0100\n+++ /tmp/tmpafy_dnpq.java\t2023-03-24 12:06:55.554256865 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer>\");\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "return new ArrayList<Integerak",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:57.294251669 +0100\n+++ /tmp/tmpmxzgmdgv.java\t2023-03-24 12:06:57.294251669 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integerak\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "return new ArrayList<Integer[]",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:06:59.038246456 +0100\n+++ /tmp/tmpno4usv7a.java\t2023-03-24 12:06:59.038246456 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer[]\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "returnnew ArrayList<Integer>();",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:00.802241177 +0100\n+++ /tmp/tmppxvwnypd.java\t2023-03-24 12:07:00.802241177 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+returnnew ArrayList<Integer>();\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "return new ArrayList<IntegerPARENT",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:02.578235860 +0100\n+++ /tmp/tmphtgttou5.java\t2023-03-24 12:07:02.578235860 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<IntegerPARENT\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "return new ArrayList<Integer2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:04.290230728 +0100\n+++ /tmp/tmp9q6y5a7p.java\t2023-03-24 12:07:04.290230728 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer2);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "return new ArrayList<IntegerCLI",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:05.970225690 +0100\n+++ /tmp/tmpwid18pey.java\t2023-03-24 12:07:05.970225690 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<IntegerCLI\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "return new ArrayList<IntegerToNode",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:07.650220644 +0100\n+++ /tmp/tmp4pa8tepc.java\t2023-03-24 12:07:07.650220644 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<IntegerToNode\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "return new ArrayList<Integer \"\";",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:09.410215356 +0100\n+++ /tmp/tmpmsq1wjvv.java\t2023-03-24 12:07:09.414215343 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer \"\";\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "return new ArrayList<Integer);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:11.086210313 +0100\n+++ /tmp/tmphw8wjogp.java\t2023-03-24 12:07:11.086210313 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "return new ArrayList<Integer forward",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:12.818205100 +0100\n+++ /tmp/tmp5hv7hh0s.java\t2023-03-24 12:07:12.822205088 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer forward\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "return new ArrayList<Integer adj",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:14.602199724 +0100\n+++ /tmp/tmpe5zsn5y3.java\t2023-03-24 12:07:14.602199724 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer adj\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "return new ArrayList<Integerthrows",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:16.310194571 +0100\n+++ /tmp/tmpmz343chl.java\t2023-03-24 12:07:16.310194571 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integerthrows\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "return new ArrayList<IntegerDEP",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:18.002189464 +0100\n+++ /tmp/tmpjrqa44hx.java\t2023-03-24 12:07:18.006189452 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<IntegerDEP\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "return new ArrayList<IntegerMandatory",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:19.714184291 +0100\n+++ /tmp/tmpyy4xcab0.java\t2023-03-24 12:07:19.718184278 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<IntegerMandatory\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "return new ArrayList<Integer>>",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:21.442179065 +0100\n+++ /tmp/tmpxojaadkn.java\t2023-03-24 12:07:21.442179065 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer>>\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "return new ArrayList<Integer second",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:23.222173678 +0100\n+++ /tmp/tmpxummou5a.java\t2023-03-24 12:07:23.222173678 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer second\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "return new ArrayList<Integer \"<",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:24.958168419 +0100\n+++ /tmp/tmp6jo9sdy_.java\t2023-03-24 12:07:24.958168419 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer \"<\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "return new ArrayList<IntegerProperty",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:26.690163166 +0100\n+++ /tmp/tmpgmwi3k1j.java\t2023-03-24 12:07:26.690163166 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<IntegerProperty\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "return new ArrayList<Integer spring",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:28.406157959 +0100\n+++ /tmp/tmppaaouqhz.java\t2023-03-24 12:07:28.406157959 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<Integer spring\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "return new ArrayList<IntegerLANG",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:30.174152590 +0100\n+++ /tmp/tmpxf9b1912.java\t2023-03-24 12:07:30.174152590 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return new ArrayList<IntegerLANG\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "return prepend;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:31.974147117 +0100\n+++ /tmp/tmpk14ucirj.java\t2023-03-24 12:07:31.974147117 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return prepend;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "return prepend prepend;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:33.866141360 +0100\n+++ /tmp/tmp_ut1rqiw.java\t2023-03-24 12:07:33.866141360 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return prepend prepend;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "return addStatus;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:35.498136390 +0100\n+++ /tmp/tmp76tn410v.java\t2023-03-24 12:07:35.498136390 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return addStatus;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "return origin;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:37.314130855 +0100\n+++ /tmp/tmpltt9id_t.java\t2023-03-24 12:07:37.314130855 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return origin;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "return prepend];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:39.090125436 +0100\n+++ /tmp/tmpcb34f0dd.java\t2023-03-24 12:07:39.090125436 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return prepend];\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "return prepend);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:40.790120246 +0100\n+++ /tmp/tmpmctrxzyz.java\t2023-03-24 12:07:40.790120246 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return prepend);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "return return prepend;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:42.522114954 +0100\n+++ /tmp/tmp9x2ea4y4.java\t2023-03-24 12:07:42.522114954 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return return prepend;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "return addInteger;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:44.010110402 +0100\n+++ /tmp/tmp8v37ih7e.java\t2023-03-24 12:07:44.010110402 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return addInteger;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "return prepend[0];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:46.130103912 +0100\n+++ /tmp/tmp0o6wlx2r.java\t2023-03-24 12:07:46.130103912 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return prepend[0];\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "return prependSet;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:47.758098925 +0100\n+++ /tmp/tmpj7b67m5m.java\t2023-03-24 12:07:47.758098925 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return prependSet;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "return prependPanel;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:49.522093516 +0100\n+++ /tmp/tmp5u6yspkw.java\t2023-03-24 12:07:49.522093516 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return prependPanel;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "return addIncludes;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:51.250088213 +0100\n+++ /tmp/tmp2jolwj4_.java\t2023-03-24 12:07:51.250088213 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return addIncludes;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "return addParameters;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:53.034082734 +0100\n+++ /tmp/tmpangbs5nu.java\t2023-03-24 12:07:53.034082734 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return addParameters;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "return prepend[];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:54.798077312 +0100\n+++ /tmp/tmpkb2mzur7.java\t2023-03-24 12:07:54.798077312 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return prepend[];\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "return delim;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:56.486072120 +0100\n+++ /tmp/tmpigj8l0x4.java\t2023-03-24 12:07:56.490072108 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return delim;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "return addMethod;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:07:58.294066553 +0100\n+++ /tmp/tmppk5per_2.java\t2023-03-24 12:07:58.294066553 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return addMethod;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "return adjust;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:00.118060932 +0100\n+++ /tmp/tmpv4gju4gd.java\t2023-03-24 12:08:00.122060920 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return adjust;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "return encrypted;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:01.922055370 +0100\n+++ /tmp/tmpeezwb0av.java\t2023-03-24 12:08:01.922055370 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return encrypted;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "return prependExtension;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:03.706049863 +0100\n+++ /tmp/tmpq8uvza_7.java\t2023-03-24 12:08:03.710049851 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return prependExtension;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "return order;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:05.574044093 +0100\n+++ /tmp/tmpmiseeob7.java\t2023-03-24 12:08:05.574044093 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return order;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "return addGenerator;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:07.450038293 +0100\n+++ /tmp/tmpperdfanu.java\t2023-03-24 12:08:07.454038280 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return addGenerator;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "return prepend prepend);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:09.194032898 +0100\n+++ /tmp/tmph66vqglw.java\t2023-03-24 12:08:09.194032898 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return prepend prepend);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "return objects;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:10.874027695 +0100\n+++ /tmp/tmpgps7o3rh.java\t2023-03-24 12:08:10.874027695 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return objects;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "returnOrders;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:12.598022353 +0100\n+++ /tmp/tmpuv7km2ke.java\t2023-03-24 12:08:12.598022353 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+returnOrders;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "returnunique;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:14.238017266 +0100\n+++ /tmp/tmpl3vob9ib.java\t2023-03-24 12:08:14.238017266 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+returnunique;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "return MINOR;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:15.906012089 +0100\n+++ /tmp/tmpfdpskxx4.java\t2023-03-24 12:08:15.910012077 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return MINOR;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "return addInteger<>();",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:17.754006350 +0100\n+++ /tmp/tmpepzaarq0.java\t2023-03-24 12:08:17.754006350 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return addInteger<>();\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "return prependLike;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:19.490000953 +0100\n+++ /tmp/tmpf18aw3en.java\t2023-03-24 12:08:19.494000941 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return prependLike;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "return optimistic;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:21.301995315 +0100\n+++ /tmp/tmp_na3cruc.java\t2023-03-24 12:08:21.305995303 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return optimistic;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "return files;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:23.069989812 +0100\n+++ /tmp/tmp7mj0kvby.java\t2023-03-24 12:08:23.069989812 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return files;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "return doc;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:24.809984391 +0100\n+++ /tmp/tmpm_w7pkud.java\t2023-03-24 12:08:24.809984391 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return doc;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "return minY;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:26.673978578 +0100\n+++ /tmp/tmphjl6eooo.java\t2023-03-24 12:08:26.673978578 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return minY;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "return addType;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:28.521972812 +0100\n+++ /tmp/tmp5bqv4ovg.java\t2023-03-24 12:08:28.521972812 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return addType;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "return addInteger>();",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:30.301967252 +0100\n+++ /tmp/tmp9jfwe0kz.java\t2023-03-24 12:08:30.301967252 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return addInteger>();\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "return replacement;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:31.965962051 +0100\n+++ /tmp/tmp1a3vdhj5.java\t2023-03-24 12:08:31.965962051 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return replacement;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "return ignore;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:33.737956509 +0100\n+++ /tmp/tmp0c66dbff.java\t2023-03-24 12:08:33.737956509 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return ignore;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "return prependName;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:35.541950862 +0100\n+++ /tmp/tmpqbn6z8n2.java\t2023-03-24 12:08:35.541950862 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return prependName;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "return orig;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:37.397945047 +0100\n+++ /tmp/tmpz213ad1o.java\t2023-03-24 12:08:37.397945047 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return orig;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "returnreplacement;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:39.189939430 +0100\n+++ /tmp/tmpwnzjqgi5.java\t2023-03-24 12:08:39.189939430 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+returnreplacement;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "return secretKey;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:40.893934086 +0100\n+++ /tmp/tmpjqug_5o1.java\t2023-03-24 12:08:40.893934086 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return secretKey;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "returnResponses;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:42.733928307 +0100\n+++ /tmp/tmp8td5gbln.java\t2023-03-24 12:08:42.737928295 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+returnResponses;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "return addInteger};",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:44.441922941 +0100\n+++ /tmp/tmp3mxgc6et.java\t2023-03-24 12:08:44.441922941 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return addInteger};\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "return pk;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:46.161917533 +0100\n+++ /tmp/tmpc53lugmq.java\t2023-03-24 12:08:46.165917522 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return pk;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "return addInteger];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:47.997911757 +0100\n+++ /tmp/tmpvck6e9f_.java\t2023-03-24 12:08:47.997911757 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return addInteger];\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "return prepend };",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:49.717906340 +0100\n+++ /tmp/tmpdo_jy5re.java\t2023-03-24 12:08:49.721906328 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return prepend };\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "return addMethod>();",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:51.413900995 +0100\n+++ /tmp/tmp7bcl16j4.java\t2023-03-24 12:08:51.413900995 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return addMethod>();\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "return prepend prepend];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:53.041895864 +0100\n+++ /tmp/tmplo5z1m58.java\t2023-03-24 12:08:53.041895864 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return prepend prepend];\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "returnlocation;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:54.721890563 +0100\n+++ /tmp/tmpnrs819hi.java\t2023-03-24 12:08:54.721890563 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+returnlocation;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "returnAME;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:56.393885282 +0100\n+++ /tmp/tmpfn4l7_wc.java\t2023-03-24 12:08:56.393885282 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+returnAME;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "return i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:58.069879988 +0100\n+++ /tmp/tmp_xoyva0_.java\t2023-03-24 12:08:58.073879976 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return i;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "return7, ArrayList;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:08:59.865874309 +0100\n+++ /tmp/tmp9hkmat6p.java\t2023-03-24 12:08:59.869874297 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return7, ArrayList;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "return MINOR);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:09:01.509869108 +0100\n+++ /tmp/tmp_quu540u.java\t2023-03-24 12:09:01.509869108 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return MINOR);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "return includes;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:09:03.265863547 +0100\n+++ /tmp/tmp0nbc0fx7.java\t2023-03-24 12:09:03.265863547 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return includes;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "return head;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:09:05.005858037 +0100\n+++ /tmp/tmpxfc_tyn3.java\t2023-03-24 12:09:05.005858037 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return head;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "return prepend[]",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:09:06.777852417 +0100\n+++ /tmp/tmp8yb08q4b.java\t2023-03-24 12:09:06.777852417 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+return prepend[]\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "returnblue;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/get_factors/java_programs/GET_FACTORS.java\t2023-03-24 12:09:08.449847114 +0100\n+++ /tmp/tmpyyvfz1vg.java\t2023-03-24 12:09:08.449847114 +0100\n@@ -22,8 +22,8 @@\n                 prepend.add(i);\n                 prepend.addAll(get_factors(n / i));\n                 return prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+returnblue;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "return new ArrayList<Integer>(Arrays.asList(n));"
    },
    "flatten": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "result.add(x; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:07:47.598099414 +0100\n+++ /tmp/tmp1dlotekr.java\t2023-03-24 12:07:47.614099365 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(x; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "result.add(XORx; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:07:49.326094117 +0100\n+++ /tmp/tmpw1xytv3z.java\t2023-03-24 12:07:49.326094117 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(XORx; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "result.add(a; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:07:50.982089036 +0100\n+++ /tmp/tmp3sqycxns.java\t2023-03-24 12:07:50.986089024 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(a; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "result.add(column; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:07:52.614084024 +0100\n+++ /tmp/tmpk3o2d7d6.java\t2023-03-24 12:07:52.618084012 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(column; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "result.add( params; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:07:54.242079021 +0100\n+++ /tmp/tmphr6qiaia.java\t2023-03-24 12:07:54.242079021 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( params; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "result.add(ipp; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:07:55.886073966 +0100\n+++ /tmp/tmpmb09csbm.java\t2023-03-24 12:07:55.890073954 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(ipp; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "result.add(b; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:07:57.486069042 +0100\n+++ /tmp/tmpcuwezcq4.java\t2023-03-24 12:07:57.490069030 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(b; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "result.add(s; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:07:59.170063855 +0100\n+++ /tmp/tmptrpf9nip.java\t2023-03-24 12:07:59.174063843 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(s; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "result.add(xx; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:00.766058934 +0100\n+++ /tmp/tmpsq1h5511.java\t2023-03-24 12:08:00.766058934 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(xx; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "result.add(arr); } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:02.374053975 +0100\n+++ /tmp/tmpsbjwbmjf.java\t2023-03-24 12:08:02.374053975 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(arr); } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "result.add(HOST; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:03.982049012 +0100\n+++ /tmp/tmp9rjzkq_u.java\t2023-03-24 12:08:03.982049012 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(HOST; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "result.add( X; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:05.630043920 +0100\n+++ /tmp/tmpm3b5otvs.java\t2023-03-24 12:08:05.630043920 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( X; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "result.add(s); } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:07.302038751 +0100\n+++ /tmp/tmp2hvqi8qp.java\t2023-03-24 12:08:07.306038738 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(s); } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "result.add( flatten(x; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:08.938033690 +0100\n+++ /tmp/tmpbnho5ms6.java\t2023-03-24 12:08:08.938033690 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( flatten(x; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "result.add( Conceptx; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:10.578028611 +0100\n+++ /tmp/tmp0v280ang.java\t2023-03-24 12:08:10.582028599 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( Conceptx; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "result.add( classLoader; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:12.218023529 +0100\n+++ /tmp/tmp9janh1wm.java\t2023-03-24 12:08:12.222023517 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( classLoader; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "result.add( second secondx; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:13.842018495 +0100\n+++ /tmp/tmpvevw4kbp.java\t2023-03-24 12:08:13.846018482 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( second secondx; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "result.add( plusx; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:15.442013530 +0100\n+++ /tmp/tmpb0u0fsfq.java\t2023-03-24 12:08:15.446013518 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( plusx; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "result.add(X_x; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:17.046008549 +0100\n+++ /tmp/tmp2l6jsrqt.java\t2023-03-24 12:08:17.050008537 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(X_x; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "result.add(XretVal; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:18.686003453 +0100\n+++ /tmp/tmp6y1u45bs.java\t2023-03-24 12:08:18.686003453 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(XretVal; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "result.add(result; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:20.341998303 +0100\n+++ /tmp/tmpfcl3noyw.java\t2023-03-24 12:08:20.341998303 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(result; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "result.add(token; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:22.009993113 +0100\n+++ /tmp/tmp6sfemei0.java\t2023-03-24 12:08:22.009993113 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(token; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "result.add(ToUpdate; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:23.641988030 +0100\n+++ /tmp/tmpn_bip0__.java\t2023-03-24 12:08:23.641988030 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(ToUpdate; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "result.add(EMPTY_LIST; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:25.261982982 +0100\n+++ /tmp/tmpj813998d.java\t2023-03-24 12:08:25.261982982 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(EMPTY_LIST; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "result.add(flatten(x; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:26.857978004 +0100\n+++ /tmp/tmpkk0e0zij.java\t2023-03-24 12:08:26.861977992 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(flatten(x; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "result.add(ServiceClient(x; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:28.461972999 +0100\n+++ /tmp/tmppb_ks2e0.java\t2023-03-24 12:08:28.461972999 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(ServiceClient(x; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "result.add( formattedx; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:30.141967752 +0100\n+++ /tmp/tmpdmvsck84.java\t2023-03-24 12:08:30.145967741 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( formattedx; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "result.add(meters); } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:31.825962488 +0100\n+++ /tmp/tmpp_iji85d.java\t2023-03-24 12:08:31.825962488 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(meters); } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "result.add(XHTML; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:33.485957298 +0100\n+++ /tmp/tmpc3jga_2j.java\t2023-03-24 12:08:33.485957298 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(XHTML; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "result.add(CellEditor(x; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:35.097952252 +0100\n+++ /tmp/tmp6iyea9t9.java\t2023-03-24 12:08:35.101952240 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(CellEditor(x; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "result.add(X_HOST; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:36.769947016 +0100\n+++ /tmp/tmp9e_vjviu.java\t2023-03-24 12:08:36.773947004 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(X_HOST; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "result.add( factor; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:38.401941900 +0100\n+++ /tmp/tmp4e03eyl6.java\t2023-03-24 12:08:38.405941888 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( factor; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "result.add( checkpoint; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:40.025936807 +0100\n+++ /tmp/tmp5judm95f.java\t2023-03-24 12:08:40.025936807 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( checkpoint; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "result.add(boundingBox; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:41.557931999 +0100\n+++ /tmp/tmp_0eyli1_.java\t2023-03-24 12:08:41.557931999 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(boundingBox; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "result.add(narr; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:43.141927025 +0100\n+++ /tmp/tmp2ii4l9qd.java\t2023-03-24 12:08:43.141927025 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(narr; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "result.add((\"<x; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:44.701922125 +0100\n+++ /tmp/tmpyisyu8wl.java\t2023-03-24 12:08:44.701922125 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add((\"<x; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "result.add((6x; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:46.289917132 +0100\n+++ /tmp/tmppz2mmwcd.java\t2023-03-24 12:08:46.289917132 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add((6x; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "result.add( addresses addressesx; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:47.917912009 +0100\n+++ /tmp/tmp22xhamg5.java\t2023-03-24 12:08:47.921911997 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( addresses addressesx; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "result.add( cls; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:49.505907008 +0100\n+++ /tmp/tmp13ksat52.java\t2023-03-24 12:08:49.505907008 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( cls; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "result.add(X_NODE; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:51.101901980 +0100\n+++ /tmp/tmpi8yffmar.java\t2023-03-24 12:08:51.101901980 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(X_NODE; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "result.add(arr; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:52.717896885 +0100\n+++ /tmp/tmp4kh0g2m1.java\t2023-03-24 12:08:52.717896885 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(arr; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "result.add(Xretret; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:54.337891774 +0100\n+++ /tmp/tmpt1kqw2ki.java\t2023-03-24 12:08:54.337891774 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(Xretret; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "result.add((1, x; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:56.033886421 +0100\n+++ /tmp/tmp8lcusu2c.java\t2023-03-24 12:08:56.033886421 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add((1, x; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "result.add(sx; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:57.633881366 +0100\n+++ /tmp/tmpr0a3zsks.java\t2023-03-24 12:08:57.637881354 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(sx; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "result.add(arr);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:08:59.201876409 +0100\n+++ /tmp/tmpw2prsogw.java\t2023-03-24 12:08:59.205876397 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(arr);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "result.add(x); } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:00.877871108 +0100\n+++ /tmp/tmpbxk69wu1.java\t2023-03-24 12:09:00.877871108 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(x); } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "result.add(token); } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:02.465866081 +0100\n+++ /tmp/tmphvdvcpvm.java\t2023-03-24 12:09:02.465866081 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(token); } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "result.add(EMPTY; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:04.137860787 +0100\n+++ /tmp/tmpvxxi7_2h.java\t2023-03-24 12:09:04.137860787 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(EMPTY; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "result.add(en; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:05.813855475 +0100\n+++ /tmp/tmp2lzjlpqf.java\t2023-03-24 12:09:05.817855461 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(en; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "result.add(Function; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:07.401850437 +0100\n+++ /tmp/tmplx7ewilv.java\t2023-03-24 12:09:07.401850437 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(Function; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "result.add(39x; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:09.097845055 +0100\n+++ /tmp/tmpz71vh017.java\t2023-03-24 12:09:09.097845055 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(39x; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "result.add(mcc; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:10.609840254 +0100\n+++ /tmp/tmpct8a9z73.java\t2023-03-24 12:09:10.609840254 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(mcc; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "result.add(row; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:12.549834091 +0100\n+++ /tmp/tmpgd5f1pgz.java\t2023-03-24 12:09:12.553834079 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(row; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "result.add(label; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:14.281828583 +0100\n+++ /tmp/tmp5v_sc8ib.java\t2023-03-24 12:09:14.281828583 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(label; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "result.add(coordinate; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:15.997823122 +0100\n+++ /tmp/tmpag787958.java\t2023-03-24 12:09:15.997823122 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(coordinate; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "result.add(Xret; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:17.501818335 +0100\n+++ /tmp/tmp8y9jg7pm.java\t2023-03-24 12:09:17.501818335 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(Xret; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "result.add(HOST;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:19.045813416 +0100\n+++ /tmp/tmpa05fr7z0.java\t2023-03-24 12:09:19.045813416 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(HOST;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "result.add( acc; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:20.813807778 +0100\n+++ /tmp/tmpvhqpa22a.java\t2023-03-24 12:09:20.813807778 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( acc; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "result.add(getName; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:22.433802611 +0100\n+++ /tmp/tmpqcmobzlm.java\t2023-03-24 12:09:22.433802611 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(getName; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "result.add( second second second; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:24.009797581 +0100\n+++ /tmp/tmpcxyg_4e9.java\t2023-03-24 12:09:24.009797581 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( second second second; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "result.add(broker; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:25.621792433 +0100\n+++ /tmp/tmpq1gm_drw.java\t2023-03-24 12:09:25.621792433 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(broker; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "result.add(YNC; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:27.201787385 +0100\n+++ /tmp/tmp823c1fk9.java\t2023-03-24 12:09:27.201787385 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(YNC; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "result.add(number; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:28.877782025 +0100\n+++ /tmp/tmp0y0y9skq.java\t2023-03-24 12:09:28.877782025 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(number; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "result.add(Retries; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:30.433777048 +0100\n+++ /tmp/tmplsu0vdu3.java\t2023-03-24 12:09:30.433777048 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(Retries; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "result.add( second second; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:32.025771950 +0100\n+++ /tmp/tmp58a_xp9b.java\t2023-03-24 12:09:32.025771950 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( second second; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "result.add(flatten; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:33.585766952 +0100\n+++ /tmp/tmpkwu5qizn.java\t2023-03-24 12:09:33.585766952 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(flatten; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "result.add( sequence; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:35.169761876 +0100\n+++ /tmp/tmphkz1gzej.java\t2023-03-24 12:09:35.169761876 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( sequence; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "result.add(delimiter); } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:36.817756590 +0100\n+++ /tmp/tmpbpelu88v.java\t2023-03-24 12:09:36.817756590 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(delimiter); } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "result.add(x)); } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:38.513751148 +0100\n+++ /tmp/tmpgtogo868.java\t2023-03-24 12:09:38.513751148 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(x)); } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "result.add(Hint; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:40.185745780 +0100\n+++ /tmp/tmpouf4bugl.java\t2023-03-24 12:09:40.185745780 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(Hint; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "result.add(Clip; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:41.845740447 +0100\n+++ /tmp/tmpq7irmhuv.java\t2023-03-24 12:09:41.845740447 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(Clip; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "result.add(xx; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:43.449735289 +0100\n+++ /tmp/tmpo5j7qymw.java\t2023-03-24 12:09:43.449735289 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(xx; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "result.add( getRight; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:45.053730129 +0100\n+++ /tmp/tmpbuvgq3ps.java\t2023-03-24 12:09:45.053730129 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( getRight; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "result.add(split; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:46.841724374 +0100\n+++ /tmp/tmpwhlerli3.java\t2023-03-24 12:09:46.841724374 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(split; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "result.add(getString; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:48.473719120 +0100\n+++ /tmp/tmplzilqpy6.java\t2023-03-24 12:09:48.473719120 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(getString; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "result.add(delimiter; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:50.113713833 +0100\n+++ /tmp/tmpsgo3lyuz.java\t2023-03-24 12:09:50.117713821 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(delimiter; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "result.add( j; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:51.761708521 +0100\n+++ /tmp/tmp3amdzert.java\t2023-03-24 12:09:51.761708521 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( j; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "result.add(!/; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:53.457703049 +0100\n+++ /tmp/tmpiwlkofo7.java\t2023-03-24 12:09:53.457703049 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(!/; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "result.add(xsd); } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:55.125697663 +0100\n+++ /tmp/tmp2ai9p6g6.java\t2023-03-24 12:09:55.129697650 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(xsd); } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "result.add( Al; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:56.745692430 +0100\n+++ /tmp/tmp59ikre81.java\t2023-03-24 12:09:56.745692430 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( Al; } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "result.add(x; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:58.397687091 +0100\n+++ /tmp/tmp58yrhqea.java\t2023-03-24 12:09:58.401687080 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(x; }\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "result.add(createArrayList(arr);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:09:59.945682085 +0100\n+++ /tmp/tmp3dbh72ah.java\t2023-03-24 12:09:59.945682085 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(createArrayList(arr);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "result.add(ipp); } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:10:01.605676714 +0100\n+++ /tmp/tmpx4mauhef.java\t2023-03-24 12:10:01.609676703 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(ipp); } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "result.add(widget); } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:10:03.269671326 +0100\n+++ /tmp/tmpelhro2l3.java\t2023-03-24 12:10:03.269671326 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(widget); } else {\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "result.add(numberOfPlayers;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:10:04.937665925 +0100\n+++ /tmp/tmpdcmv51si.java\t2023-03-24 12:10:04.941665910 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(numberOfPlayers;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "result.add(flatten;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:10:06.541660725 +0100\n+++ /tmp/tmpm_gwtsur.java\t2023-03-24 12:10:06.545660714 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(flatten;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "result.add(BASIC;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:10:08.229655252 +0100\n+++ /tmp/tmppxn6ysgq.java\t2023-03-24 12:10:08.229655252 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(BASIC;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "result.add(x; } else return X;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:10:09.861649957 +0100\n+++ /tmp/tmpqn36ui6n.java\t2023-03-24 12:10:09.861649957 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(x; } else return X;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "result.add(rr);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:10:11.405644942 +0100\n+++ /tmp/tmpgwuvd3mw.java\t2023-03-24 12:10:11.449644801 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(rr);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "result.add(arr); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:10:12.985639812 +0100\n+++ /tmp/tmp7zi_l0dw.java\t2023-03-24 12:10:12.985639812 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(arr); }\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "result.add(bar;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:10:14.593634584 +0100\n+++ /tmp/tmp8h16001t.java\t2023-03-24 12:10:14.593634584 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(bar;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "result.add( params;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:10:16.197629370 +0100\n+++ /tmp/tmpwv5b8bhb.java\t2023-03-24 12:10:16.197629370 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( params;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "result.add( BRACKET;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:10:17.853623981 +0100\n+++ /tmp/tmpmz98xtz1.java\t2023-03-24 12:10:17.853623981 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( BRACKET;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "result.add(000001;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:10:19.521618551 +0100\n+++ /tmp/tmpnvv06ro2.java\t2023-03-24 12:10:19.521618551 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(000001;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "result.add(van;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:10:21.181613143 +0100\n+++ /tmp/tmpi3q1j8k7.java\t2023-03-24 12:10:21.185613132 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(van;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "result.add( totalSize;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:10:22.841607735 +0100\n+++ /tmp/tmph8613vjz.java\t2023-03-24 12:10:22.841607735 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( totalSize;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "result.add(ipp; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:10:24.585602047 +0100\n+++ /tmp/tmpkf73xtbg.java\t2023-03-24 12:10:24.633601892 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(ipp; }\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "result.add(eh;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:10:26.173596867 +0100\n+++ /tmp/tmpktyt48y2.java\t2023-03-24 12:10:26.173596867 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(eh;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "result.add(produces);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:10:27.829591461 +0100\n+++ /tmp/tmp9y75lrl5.java\t2023-03-24 12:10:27.829591461 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add(produces);\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "result.add( SP;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/flatten/java_programs/FLATTEN.java\t2023-03-24 12:10:29.381586391 +0100\n+++ /tmp/tmpbhfsaece.java\t2023-03-24 12:10:29.381586391 +0100\n@@ -16,14 +16,9 @@\n             ArrayList result = new ArrayList(50);\n             for (Object x : narr) {\n                 if (x instanceof ArrayList) {\n                     result.addAll((ArrayList) flatten(x));\n                 } else {\n-                    result.add(flatten(x));\n-                }\n-            }\n-            return result;\n-        } else {\n-            return flatten(arr);\n+result.add( SP;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "result.add((x)); } } return result; } else { return arr;"
    },
    "to_base": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "result = i + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:12.993832680 +0100\n+++ /tmp/tmp5ayh7q_1.java\t2023-03-24 12:09:12.993832680 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "result = result + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:17.061819735 +0100\n+++ /tmp/tmplhwfgs_3.java\t2023-03-24 12:09:17.061819735 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "result = i + String.valueOf(alphabet.charAt(i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:21.157806682 +0100\n+++ /tmp/tmp__z7qmdr.java\t2023-03-24 12:09:21.157806682 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(alphabet.charAt(i;\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "result = result / String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:22.781801501 +0100\n+++ /tmp/tmpcjnh22uj.java\t2023-03-24 12:09:22.785801489 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result / String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "result = result * String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:24.597795705 +0100\n+++ /tmp/tmpgambtj2t.java\t2023-03-24 12:09:24.597795705 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result * String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "result = i / String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:26.349790107 +0100\n+++ /tmp/tmp99k8bd1w.java\t2023-03-24 12:09:26.349790107 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i / String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "result = result + String.valueOf(alphabet.charAt(i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:28.045784687 +0100\n+++ /tmp/tmpmf78rhvc.java\t2023-03-24 12:09:28.049784673 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(alphabet.charAt(i;\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "result = i + String.valueOf(alphabet.charAt(i);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:29.777779145 +0100\n+++ /tmp/tmpwlrsh3q4.java\t2023-03-24 12:09:29.777779145 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(alphabet.charAt(i);\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "result = result / String.valueOf(alphabet.charAt(i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:31.485773679 +0100\n+++ /tmp/tmppfp15apv.java\t2023-03-24 12:09:31.485773679 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result / String.valueOf(alphabet.charAt(i;\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "result -= i + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:33.281767926 +0100\n+++ /tmp/tmp_erpox4u.java\t2023-03-24 12:09:33.285767914 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result -= i + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "result = i / String.valueOf(alphabet.charAt(i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:35.193761799 +0100\n+++ /tmp/tmpkmze6b4t.java\t2023-03-24 12:09:35.193761799 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i / String.valueOf(alphabet.charAt(i;\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "result = result / String.valueOf(alphabet.charAt(i);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:36.849756489 +0100\n+++ /tmp/tmp54tku8u4.java\t2023-03-24 12:09:36.849756489 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result / String.valueOf(alphabet.charAt(i);\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "result = result + String.valueOf(alphabet.charAt(i);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:38.569750968 +0100\n+++ /tmp/tmpfqdvnvvk.java\t2023-03-24 12:09:38.573750956 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(alphabet.charAt(i);\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "result = result * String.valueOf(alphabet.charAt(i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:40.209745703 +0100\n+++ /tmp/tmp1vx1yfg3.java\t2023-03-24 12:09:40.209745703 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result * String.valueOf(alphabet.charAt(i;\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "result -= i + String.valueOf(alphabet.charAt(i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:41.885740317 +0100\n+++ /tmp/tmpvr7k4wt4.java\t2023-03-24 12:09:41.885740317 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result -= i + String.valueOf(alphabet.charAt(i;\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "result = i + String.valueOf(alphabet.charAt(i+1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:43.665734596 +0100\n+++ /tmp/tmp58zco9ux.java\t2023-03-24 12:09:43.665734596 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(alphabet.charAt(i+1;\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "result = i / String.valueOf(alphabet.charAt(i);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:45.305729320 +0100\n+++ /tmp/tmpegasq3f0.java\t2023-03-24 12:09:45.305729320 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i / String.valueOf(alphabet.charAt(i);\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "result = i + String.valueOf(alphabet.charAt(i];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:46.965723975 +0100\n+++ /tmp/tmpu1btltb0.java\t2023-03-24 12:09:46.969723964 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(alphabet.charAt(i];\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "result = result / String.valueOf(alphabet.charAt(i,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:48.581718772 +0100\n+++ /tmp/tmp67n89yur.java\t2023-03-24 12:09:48.581718772 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result / String.valueOf(alphabet.charAt(i,\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "result = result + String.valueOf(alphabet.charAt(i+1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:50.261713358 +0100\n+++ /tmp/tmpfzl8qc8r.java\t2023-03-24 12:09:50.261713358 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(alphabet.charAt(i+1;\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "result -= x + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:51.957707887 +0100\n+++ /tmp/tmppnfmv5ap.java\t2023-03-24 12:09:51.957707887 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result -= x + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "result = 31 * String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:53.685702313 +0100\n+++ /tmp/tmpfi_62vh5.java\t2023-03-24 12:09:53.685702313 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = 31 * String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "result = result + String.valueOf(alphabet.charAt(i];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:55.369696876 +0100\n+++ /tmp/tmpvglpyz4j.java\t2023-03-24 12:09:55.369696876 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(alphabet.charAt(i];\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "result -= i + String.valueOf(alphabet.charAt(i);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:57.049691448 +0100\n+++ /tmp/tmpruh2lcem.java\t2023-03-24 12:09:57.049691448 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result -= i + String.valueOf(alphabet.charAt(i);\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "result -= result + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:09:58.705686095 +0100\n+++ /tmp/tmpoqa7mks2.java\t2023-03-24 12:09:58.705686095 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result -= result + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "result = result * String.valueOf(alphabet.charAt(i);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:00.521680223 +0100\n+++ /tmp/tmpsu4rwzb6.java\t2023-03-24 12:10:00.525680208 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result * String.valueOf(alphabet.charAt(i);\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "result = i + String.valueOf(alphabet.charAt(i+1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:02.177674862 +0100\n+++ /tmp/tmpxdd1ffmj.java\t2023-03-24 12:10:02.177674862 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(alphabet.charAt(i+1);\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "result = next / String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:03.833669501 +0100\n+++ /tmp/tmptvivg0zp.java\t2023-03-24 12:10:03.833669501 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = next / String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "result -= i / String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:05.689663487 +0100\n+++ /tmp/tmp6fllxhvy.java\t2023-03-24 12:10:05.689663487 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result -= i / String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "result = result + String.valueOf(alphabet.charAt(i,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:07.425657860 +0100\n+++ /tmp/tmpqfw3w6gc.java\t2023-03-24 12:10:07.429657845 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(alphabet.charAt(i,\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "result = result + String.valueOf(i.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:09.161652228 +0100\n+++ /tmp/tmpll_ac5ll.java\t2023-03-24 12:10:09.161652228 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(i.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "result = i + String.valueOf(alphabet.charAt(i)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:10.977646333 +0100\n+++ /tmp/tmp6mrute3y.java\t2023-03-24 12:10:10.977646333 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(alphabet.charAt(i)\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "result = result / String.valueOf(alphabet.charAt(i))",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:12.713640695 +0100\n+++ /tmp/tmp4jcuw79i.java\t2023-03-24 12:10:12.713640695 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result / String.valueOf(alphabet.charAt(i))\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "result = i + String.valueOf(alphabet.charAt(i,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:14.477634962 +0100\n+++ /tmp/tmp35thkwrh.java\t2023-03-24 12:10:14.477634962 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(alphabet.charAt(i,\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "result = target + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:16.201629355 +0100\n+++ /tmp/tmpj_x249ay.java\t2023-03-24 12:10:16.205629343 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = target + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "result = i + String.valueOf(alphabet.charAt(i());",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:17.961623630 +0100\n+++ /tmp/tmp3j19pac4.java\t2023-03-24 12:10:17.961623630 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(alphabet.charAt(i());\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "result = result + String.valueOf(leafphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:19.625618211 +0100\n+++ /tmp/tmpm8hf_yis.java\t2023-03-24 12:10:19.625618211 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(leafphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "result = b + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:21.317612701 +0100\n+++ /tmp/tmpicopb3j0.java\t2023-03-24 12:10:21.317612701 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = b + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "result -= 1 + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:25.441599254 +0100\n+++ /tmp/tmp6h4yz3xz.java\t2023-03-24 12:10:25.441599254 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result -= 1 + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "result = result * String.valueOf(alphabet.charAt(i,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:27.245593368 +0100\n+++ /tmp/tmpjpylh1g2.java\t2023-03-24 12:10:27.245593368 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result * String.valueOf(alphabet.charAt(i,\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "result = result / String.valueOf(alphabet.charAt(i];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:29.045587490 +0100\n+++ /tmp/tmp5rvhwsfh.java\t2023-03-24 12:10:29.045587490 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result / String.valueOf(alphabet.charAt(i];\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "result = result + String.valueOf(this.num.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:30.785581804 +0100\n+++ /tmp/tmpgaelmltu.java\t2023-03-24 12:10:30.785581804 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(this.num.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "result = x + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:32.989574599 +0100\n+++ /tmp/tmpf5ou9j0q.java\t2023-03-24 12:10:32.989574599 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = x + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "result = resultPrefix + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:34.997568027 +0100\n+++ /tmp/tmpbkne7x9v.java\t2023-03-24 12:10:34.997568027 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = resultPrefix + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "result = parent + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:36.773562215 +0100\n+++ /tmp/tmpwwoicxf5.java\t2023-03-24 12:10:36.773562215 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = parent + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "result = i + String.valueOf(alphabet.charAt(i))",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:38.533556450 +0100\n+++ /tmp/tmpj7vgfm2i.java\t2023-03-24 12:10:38.537556436 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(alphabet.charAt(i))\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "result = result / String.valueOf(alphabet.charAt(i+1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:40.277550732 +0100\n+++ /tmp/tmpzgtj09fg.java\t2023-03-24 12:10:40.277550732 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result / String.valueOf(alphabet.charAt(i+1;\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "result = i * String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:42.001545080 +0100\n+++ /tmp/tmpibp5j7e0.java\t2023-03-24 12:10:42.001545080 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i * String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "result = i + String.valueOf(al\ua836.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:43.809539147 +0100\n+++ /tmp/tmpeaxykgir.java\t2023-03-24 12:10:43.809539147 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(al\ua836.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "result -= result / String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:45.625533185 +0100\n+++ /tmp/tmp0crryi45.java\t2023-03-24 12:10:45.625533185 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result -= result / String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "result -= i / String.valueOf(alphabet.charAt(i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:47.401527353 +0100\n+++ /tmp/tmp0bixvkz5.java\t2023-03-24 12:10:47.401527353 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result -= i / String.valueOf(alphabet.charAt(i;\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "result = result + String.valueOf(alphabet.charAt(i)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:49.105521753 +0100\n+++ /tmp/tmpdc7tak7e.java\t2023-03-24 12:10:49.105521753 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(alphabet.charAt(i)\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "result = result + String.valueOf(birthphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:50.841516044 +0100\n+++ /tmp/tmp6njj4knb.java\t2023-03-24 12:10:50.841516044 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(birthphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "result = used + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:52.605510238 +0100\n+++ /tmp/tmpjfoparci.java\t2023-03-24 12:10:52.609510227 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = used + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "result = resolvedType + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:54.301504656 +0100\n+++ /tmp/tmpb730wmlk.java\t2023-03-24 12:10:54.301504656 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = resolvedType + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "result = groupId + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:56.025498979 +0100\n+++ /tmp/tmpurvwf3fq.java\t2023-03-24 12:10:56.025498979 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = groupId + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "result = i % String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:57.789493165 +0100\n+++ /tmp/tmpqt4zlsrz.java\t2023-03-24 12:10:57.789493165 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i % String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "result = i + String.valueOf(al\u266b.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:10:59.529487429 +0100\n+++ /tmp/tmp0d_4yamv.java\t2023-03-24 12:10:59.529487429 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(al\u266b.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "result = result + String.valueOf(alphabet.charAt(i))",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:01.165482031 +0100\n+++ /tmp/tmps9_sx2gf.java\t2023-03-24 12:11:01.169482019 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(alphabet.charAt(i))\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "result = i + String.valueOf(alphabet.charAt(i + 1)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:02.877476382 +0100\n+++ /tmp/tmpp78tpoib.java\t2023-03-24 12:11:02.881476367 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(alphabet.charAt(i + 1)\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "result -= value + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:04.533470912 +0100\n+++ /tmp/tmpk6pfvlcf.java\t2023-03-24 12:11:04.533470912 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result -= value + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "result = result / String.valueOf(alphabet.charAt(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:06.253465229 +0100\n+++ /tmp/tmppb5cyufb.java\t2023-03-24 12:11:06.253465229 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result / String.valueOf(alphabet.charAt(i)) {\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "result = i + String.valueOf(alphabet.charAt(i).",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:07.957459598 +0100\n+++ /tmp/tmpynii9t7k.java\t2023-03-24 12:11:07.957459598 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(alphabet.charAt(i).\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "result -= x + String.valueOf(alphabet.charAt(i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:09.701453829 +0100\n+++ /tmp/tmp02cu5iij.java\t2023-03-24 12:11:09.701453829 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result -= x + String.valueOf(alphabet.charAt(i;\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "result = result + String.valueOf(alphabet.charAt(i+1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:11.433448097 +0100\n+++ /tmp/tmpzt_wbbzy.java\t2023-03-24 12:11:11.433448097 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(alphabet.charAt(i+1);\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "result = i + String.valueOf(alphabet.charAt(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:13.181442312 +0100\n+++ /tmp/tmposv43ayx.java\t2023-03-24 12:11:13.181442312 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(alphabet.charAt(i)) {\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "result -= result + String.valueOf(alphabet.charAt(i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:14.905436601 +0100\n+++ /tmp/tmpdmbcmqgx.java\t2023-03-24 12:11:14.905436601 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result -= result + String.valueOf(alphabet.charAt(i;\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "result = i / String.valueOf(alphabet.charAt(i];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:16.629430886 +0100\n+++ /tmp/tmpp_f_ma42.java\t2023-03-24 12:11:16.629430886 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i / String.valueOf(alphabet.charAt(i];\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "result = i + String.valueOf(leafphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:18.333425237 +0100\n+++ /tmp/tmpwld9l763.java\t2023-03-24 12:11:18.333425237 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(leafphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "result -= 1 + String.valueOf(alphabet.charAt(i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:20.109419347 +0100\n+++ /tmp/tmp62rcbvz4.java\t2023-03-24 12:11:20.113419332 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result -= 1 + String.valueOf(alphabet.charAt(i;\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "result = i + String.valueOf(al hero.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:21.893413426 +0100\n+++ /tmp/tmpgymhscjq.java\t2023-03-24 12:11:21.893413426 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(al hero.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "result = i + String.valueOf(alphabet.charAt(i))];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:23.605407739 +0100\n+++ /tmp/tmpwv0u15hl.java\t2023-03-24 12:11:23.605407739 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(alphabet.charAt(i))];\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "result = i + String.valueOf(alphabet.charAt(i ->",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:25.309402079 +0100\n+++ /tmp/tmp35y8cl4z.java\t2023-03-24 12:11:25.309402079 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(alphabet.charAt(i ->\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "result = result + String.valueOf(originalphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:27.045396309 +0100\n+++ /tmp/tmpjm181s_h.java\t2023-03-24 12:11:27.045396309 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(originalphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "result = i + String.valueOf(al\u2b1a.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:28.761390602 +0100\n+++ /tmp/tmpfz40lia4.java\t2023-03-24 12:11:28.761390602 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(al\u2b1a.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "result = result + String.valueOf(alphabet.charAt(i());",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:30.521384746 +0100\n+++ /tmp/tmpw08ss3ls.java\t2023-03-24 12:11:30.521384746 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(alphabet.charAt(i());\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "result = result + String.valueOf(name.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:32.229379058 +0100\n+++ /tmp/tmptbk8nudv.java\t2023-03-24 12:11:32.229379058 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(name.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "result = result / String.valueOf(alphabet.charAt(i)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:33.981373223 +0100\n+++ /tmp/tmpebtwhzcr.java\t2023-03-24 12:11:33.981373223 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result / String.valueOf(alphabet.charAt(i)\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "result = i + String.valueOf(innerphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:35.669367600 +0100\n+++ /tmp/tmpuw4ulpie.java\t2023-03-24 12:11:35.669367600 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(innerphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "result = result + String.valueOf(alphabet.charAt(i + 1)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:37.509361466 +0100\n+++ /tmp/tmpg2chxvse.java\t2023-03-24 12:11:37.513361452 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(alphabet.charAt(i + 1)\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "result = result + String.valueOf(innerphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:39.241355689 +0100\n+++ /tmp/tmphgobb9gc.java\t2023-03-24 12:11:39.241355689 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(innerphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "result = parentText + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:40.997349829 +0100\n+++ /tmp/tmp3a8ix0ok.java\t2023-03-24 12:11:41.001349815 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = parentText + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "result -= result * String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:42.701344138 +0100\n+++ /tmp/tmpkwxwlh12.java\t2023-03-24 12:11:42.701344138 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result -= result * String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "result = i + String.valueOf(alphabet.charAt(iators",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:44.441338326 +0100\n+++ /tmp/tmpexwfii4d.java\t2023-03-24 12:11:44.441338326 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(alphabet.charAt(iators\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "result =grpc + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:46.157332592 +0100\n+++ /tmp/tmpcaw_ybv8.java\t2023-03-24 12:11:46.157332592 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result =grpc + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "result = target + String.valueOf(alphabet.charAt(i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:47.893326789 +0100\n+++ /tmp/tmpykef8z7u.java\t2023-03-24 12:11:47.893326789 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = target + String.valueOf(alphabet.charAt(i;\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "result = result + String.valueOf(neutral.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:49.593321102 +0100\n+++ /tmp/tmpjikfznot.java\t2023-03-24 12:11:49.593321102 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(neutral.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "result = result + String.valueOf(b.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:51.317315331 +0100\n+++ /tmp/tmpnrse36jz.java\t2023-03-24 12:11:51.317315331 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(b.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "result = a + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:53.117309305 +0100\n+++ /tmp/tmp8mw6u6km.java\t2023-03-24 12:11:53.117309305 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = a + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "result = 1 + String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:54.905303316 +0100\n+++ /tmp/tmpogps7s2z.java\t2023-03-24 12:11:54.905303316 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = 1 + String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "result = next / String.valueOf(alphabet.charAt(i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:11:59.237288791 +0100\n+++ /tmp/tmpi6v0_srg.java\t2023-03-24 12:11:59.237288791 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = next / String.valueOf(alphabet.charAt(i;\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "result = i + String.valueOf(alphabet.charAt(i},",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:12:00.893283236 +0100\n+++ /tmp/tmpkjh_2ih_.java\t2023-03-24 12:12:00.893283236 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i + String.valueOf(alphabet.charAt(i},\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "result = result + String.valueOf( partialphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:12:02.537277717 +0100\n+++ /tmp/tmpjf_14xg5.java\t2023-03-24 12:12:02.537277717 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf( partialphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "result = result % String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:12:04.281271860 +0100\n+++ /tmp/tmp1eap7s96.java\t2023-03-24 12:12:04.281271860 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result % String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "result = i / String.valueOf(alphabet.charAt(i,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:12:06.049265922 +0100\n+++ /tmp/tmpeuzq9d8s.java\t2023-03-24 12:12:06.049265922 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = i / String.valueOf(alphabet.charAt(i,\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "result =grpc / String.valueOf(alphabet.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:12:07.745260222 +0100\n+++ /tmp/tmp9tb6xhhx.java\t2023-03-24 12:12:07.745260222 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result =grpc / String.valueOf(alphabet.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "result = result / String.valueOf(alphabet.charAt(i());",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:12:09.421254585 +0100\n+++ /tmp/tmph5svyd9j.java\t2023-03-24 12:12:09.421254585 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result / String.valueOf(alphabet.charAt(i());\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "result = result + String.valueOf(alphabet.charAt(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:12:11.065249054 +0100\n+++ /tmp/tmp040_kznt.java\t2023-03-24 12:12:11.065249054 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(alphabet.charAt(i)) {\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "result = resolvedType + String.valueOf(alphabet.charAt(i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:12:12.713243506 +0100\n+++ /tmp/tmpiudwj1g4.java\t2023-03-24 12:12:12.713243506 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = resolvedType + String.valueOf(alphabet.charAt(i;\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "result = result + String.valueOf(items.charAt(i));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/to_base/java_programs/TO_BASE.java\t2023-03-24 12:12:14.493237514 +0100\n+++ /tmp/tmp9rxo5j1p.java\t2023-03-24 12:12:14.493237514 +0100\n@@ -16,11 +16,11 @@\n         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n         int i;\n         while (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-            result = result + String.valueOf(alphabet.charAt(i));\n+result = result + String.valueOf(items.charAt(i));\n         }\n \n         return result;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "result = String.valueOf(alphabet.charAt(i))+result;"
    },
    "longest_common_subsequence": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:10:34.025571209 +0100\n+++ /tmp/tmpll5jjtil.java\t2023-03-24 12:10:34.081571025 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:10:35.737565605 +0100\n+++ /tmp/tmp6zh8n4mu.java\t2023-03-24 12:10:35.737565605 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:10:37.453559986 +0100\n+++ /tmp/tmpfsov9mf0.java\t2023-03-24 12:10:37.457559974 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:10:39.097554602 +0100\n+++ /tmp/tmpmtbw6o6h.java\t2023-03-24 12:10:39.097554602 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.length;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:10:40.781549082 +0100\n+++ /tmp/tmpmabufukw.java\t2023-03-24 12:10:40.781549082 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:10:42.401543769 +0100\n+++ /tmp/tmpi4wrk5lo.java\t2023-03-24 12:10:42.401543769 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.substring(1);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.length);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:10:44.061538320 +0100\n+++ /tmp/tmp_pgj46x5.java\t2023-03-24 12:10:44.061538320 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.length);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length());",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:10:45.741532804 +0100\n+++ /tmp/tmpd_im22h4.java\t2023-03-24 12:10:45.741532804 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length());\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "return a.charAt(0) + b.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:10:47.481527088 +0100\n+++ /tmp/tmp2f_0edkk.java\t2023-03-24 12:10:47.481527088 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:10:51.481513938 +0100\n+++ /tmp/tmpixertcrx.java\t2023-03-24 12:10:51.481513938 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "return a.charAt(0) == b.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:10:53.189508316 +0100\n+++ /tmp/tmp5mobudjf.java\t2023-03-24 12:10:53.189508316 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.length;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.length());",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:10:54.989502391 +0100\n+++ /tmp/tmptm9jvdd1.java\t2023-03-24 12:10:54.989502391 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.length());\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:10:56.777496500 +0100\n+++ /tmp/tmpbau0r22y.java\t2023-03-24 12:10:56.777496500 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "return a.charAt(0) + b.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:10:58.469490923 +0100\n+++ /tmp/tmpdps_z1u9.java\t2023-03-24 12:10:58.469490923 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "return a.charAt(0) == b.charAt(1), b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:02.737476844 +0100\n+++ /tmp/tmp0wkobxzs.java\t2023-03-24 12:11:02.737476844 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.charAt(1), b);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "return a.charAt(0) + b.substring(1), a.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:04.453471176 +0100\n+++ /tmp/tmp7impco6h.java\t2023-03-24 12:11:04.453471176 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), a.length;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "return snd_common_subsequence(a.substring(1), b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:06.157465548 +0100\n+++ /tmp/tmp86oclxa2.java\t2023-03-24 12:11:06.157465548 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return snd_common_subsequence(a.substring(1), b);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.length",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:07.957459598 +0100\n+++ /tmp/tmpbj533s7q.java\t2023-03-24 12:11:07.957459598 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.length\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "return snd.charAt(0) + b.substring(1), b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:09.701453829 +0100\n+++ /tmp/tmpu9gm5m8k.java\t2023-03-24 12:11:09.701453829 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return snd.charAt(0) + b.substring(1), b);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:11.449448045 +0100\n+++ /tmp/tmpkoevil3v.java\t2023-03-24 12:11:11.453448033 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "return snd + a.charAt(0) + b.substring(1), b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:13.181442312 +0100\n+++ /tmp/tmpig_fu16w.java\t2023-03-24 12:11:13.185442297 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return snd + a.charAt(0) + b.substring(1), b);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b[1]);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:14.905436601 +0100\n+++ /tmp/tmppjek370g.java\t2023-03-24 12:11:14.905436601 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b[1]);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.substring(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:16.641430849 +0100\n+++ /tmp/tmpx0cc7j5y.java\t2023-03-24 12:11:16.641430849 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.substring(1));\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:18.341425211 +0100\n+++ /tmp/tmp1dsvqn_l.java\t2023-03-24 12:11:18.345425199 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length)\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "return a.charAt(0) + b.substring(1), 16);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:20.133419265 +0100\n+++ /tmp/tmpfzuvx17x.java\t2023-03-24 12:11:20.133419265 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), 16);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "return s.charAt(0) + b.substring(1), b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:21.893413426 +0100\n+++ /tmp/tmpsw1dwzcr.java\t2023-03-24 12:11:21.893413426 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return s.charAt(0) + b.substring(1), b);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "return a.charAt(0) == b.charAt(1), b.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:23.621407687 +0100\n+++ /tmp/tmp58vtw6yy.java\t2023-03-24 12:11:23.621407687 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.charAt(1), b.substring(1);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length();",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:25.345401958 +0100\n+++ /tmp/tmpdqwxg4fo.java\t2023-03-24 12:11:25.349401946 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length();\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length << 1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:27.069396229 +0100\n+++ /tmp/tmpo1uekgvu.java\t2023-03-24 12:11:27.069396229 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length << 1);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:28.761390602 +0100\n+++ /tmp/tmpfth99xr0.java\t2023-03-24 12:11:28.761390602 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.substring(1);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.length();",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:30.521384746 +0100\n+++ /tmp/tmpyx93fhol.java\t2023-03-24 12:11:30.525384731 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.length();\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.charAt(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:32.233379047 +0100\n+++ /tmp/tmpqks2ci4b.java\t2023-03-24 12:11:32.233379047 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.charAt(1);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:33.933373385 +0100\n+++ /tmp/tmpcj1k35cg.java\t2023-03-24 12:11:33.933373385 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "return a.charAt(0) + b.charAt(1), b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:35.673367586 +0100\n+++ /tmp/tmpxpoebd2y.java\t2023-03-24 12:11:35.673367586 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.charAt(1), b);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "return a.charAt(0) + b.substring(1), a.length);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:37.397361839 +0100\n+++ /tmp/tmp798kzkm7.java\t2023-03-24 12:11:37.397361839 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), a.length);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "return a.charAt(0) == b. in(1), b.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:39.105356141 +0100\n+++ /tmp/tmpjd29rwp2.java\t2023-03-24 12:11:39.105356141 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b. in(1), b.substring(1);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:40.841350348 +0100\n+++ /tmp/tmp351iaflz.java\t2023-03-24 12:11:40.845350336 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.substring(1);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "return a.charAt(0) == b.charAt(1), b.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:42.617344420 +0100\n+++ /tmp/tmpnc47b7bu.java\t2023-03-24 12:11:42.617344420 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.charAt(1), b.length;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.charAt(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:44.393338487 +0100\n+++ /tmp/tmpbaa1jii7.java\t2023-03-24 12:11:44.393338487 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.charAt(1));\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.substring(2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:46.093332805 +0100\n+++ /tmp/tmpcik9niy4.java\t2023-03-24 12:11:46.093332805 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.substring(2);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "return snd.charAt(0) + b.substring(1), b.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:47.845326950 +0100\n+++ /tmp/tmp4n_1s90b.java\t2023-03-24 12:11:47.849326936 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return snd.charAt(0) + b.substring(1), b.length;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.length << 1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:49.477321490 +0100\n+++ /tmp/tmpciglmj5a.java\t2023-03-24 12:11:49.481321476 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.length << 1);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "return a.charAt(0) == b.length() - 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:51.249315560 +0100\n+++ /tmp/tmp9r1jufac.java\t2023-03-24 12:11:51.249315560 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.length() - 1;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "return a.charAt(0) + b.substring(1), a.length());",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:53.201309023 +0100\n+++ /tmp/tmp4z67wgsj.java\t2023-03-24 12:11:53.201309023 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), a.length());\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "return a.charAt(0) + b.substring(1), a.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:54.909303301 +0100\n+++ /tmp/tmpi06wzdwf.java\t2023-03-24 12:11:54.909303301 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), a.\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "return a.charAt(0) + b.length() - 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:56.725297216 +0100\n+++ /tmp/tmps8hqgi_m.java\t2023-03-24 12:11:56.725297216 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.length() - 1;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "return a.charAt(0) + b.substringsubstring(1), b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:11:58.653290751 +0100\n+++ /tmp/tmpy3jfr7vm.java\t2023-03-24 12:11:58.653290751 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substringsubstring(1), b);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "return snd_common_subsequence(a.charAt(1), b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:00.385284942 +0100\n+++ /tmp/tmp2h7t1mws.java\t2023-03-24 12:12:00.385284942 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return snd_common_subsequence(a.charAt(1), b);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "return snd.charAt(0) + b.substring(1), a.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:02.229278751 +0100\n+++ /tmp/tmpn3hhapy_.java\t2023-03-24 12:12:02.233278739 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return snd.charAt(0) + b.substring(1), a.length;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length << 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:03.913273098 +0100\n+++ /tmp/tmpj5wzxqxl.java\t2023-03-24 12:12:03.913273098 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length << 1;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:05.645267280 +0100\n+++ /tmp/tmpvif5r8uh.java\t2023-03-24 12:12:05.645267280 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length));\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length]);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:07.353261539 +0100\n+++ /tmp/tmpepiielh4.java\t2023-03-24 12:12:07.353261539 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length]);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "return a.charAt(0) + b.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:09.129255567 +0100\n+++ /tmp/tmpcdti5mkk.java\t2023-03-24 12:12:09.129255567 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.length;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length[1]);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:10.945249458 +0100\n+++ /tmp/tmp2s3n98um.java\t2023-03-24 12:12:10.945249458 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length[1]);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "return snd.charAt(0) + b.substring(1), b.length);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:12.693243575 +0100\n+++ /tmp/tmpymmfd3bw.java\t2023-03-24 12:12:12.693243575 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return snd.charAt(0) + b.substring(1), b.length);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "return s.charAt(0) + b.substring(1), a.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:14.525237405 +0100\n+++ /tmp/tmp_xvo57r4.java\t2023-03-24 12:12:14.525237405 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return s.charAt(0) + b.substring(1), a.length;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length << 2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:16.281231491 +0100\n+++ /tmp/tmp8it_ilt0.java\t2023-03-24 12:12:16.281231491 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length << 2);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "return a.charAt(0) == b. in(1), b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:18.249224858 +0100\n+++ /tmp/tmplyw9urho.java\t2023-03-24 12:12:18.249224858 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b. in(1), b);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.lengthSPACE",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:19.929219194 +0100\n+++ /tmp/tmp1589066f.java\t2023-03-24 12:12:19.929219194 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.lengthSPACE\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length 0:",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:21.661213351 +0100\n+++ /tmp/tmpfwiigavm.java\t2023-03-24 12:12:21.661213351 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length 0:\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length).",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:23.421207412 +0100\n+++ /tmp/tmp394_7h2w.java\t2023-03-24 12:12:23.421207412 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length).\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length };",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:25.141201604 +0100\n+++ /tmp/tmpq7agj_th.java\t2023-03-24 12:12:25.141201604 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length };\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length later;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:26.981195389 +0100\n+++ /tmp/tmp5gk32cw4.java\t2023-03-24 12:12:26.981195389 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length later;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.length)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:28.737189455 +0100\n+++ /tmp/tmpboac6cxu.java\t2023-03-24 12:12:28.737189455 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.length)\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.length << 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:30.349184006 +0100\n+++ /tmp/tmpy2gohjky.java\t2023-03-24 12:12:30.349184006 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.length << 1;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "return s s.charAt(0) + b.substring(1), b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:32.085178133 +0100\n+++ /tmp/tmpjlfkyntk.java\t2023-03-24 12:12:32.085178133 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return s s.charAt(0) + b.substring(1), b);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length Tag",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:33.837172207 +0100\n+++ /tmp/tmp9tapvrab.java\t2023-03-24 12:12:33.837172207 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length Tag\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "return a.charAt(0) + b.charAt(1), b.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:35.577166316 +0100\n+++ /tmp/tmpajd8pxl9.java\t2023-03-24 12:12:35.581166302 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.charAt(1), b.length;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b[1]);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:37.293160505 +0100\n+++ /tmp/tmp3xjfj_uj.java\t2023-03-24 12:12:37.293160505 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b[1]);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.lengthThreshold;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:39.013154678 +0100\n+++ /tmp/tmp8bjigk12.java\t2023-03-24 12:12:39.013154678 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.lengthThreshold;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length<?>",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:40.673149052 +0100\n+++ /tmp/tmpfoumgei4.java\t2023-03-24 12:12:40.673149052 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length<?>\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length(8",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:42.421143125 +0100\n+++ /tmp/tmp058ftuzz.java\t2023-03-24 12:12:42.421143125 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length(8\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "return snd.charAt(0) + a.substring(1), b.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:44.137137303 +0100\n+++ /tmp/tmpzkq3q2sa.java\t2023-03-24 12:12:44.137137303 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return snd.charAt(0) + a.substring(1), b.length;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:45.833131548 +0100\n+++ /tmp/tmpkj9h0d3o.java\t2023-03-24 12:12:45.833131548 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "return a.charAt(0) + b.substring(1), 8);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:47.593125573 +0100\n+++ /tmp/tmpp24s3ibw.java\t2023-03-24 12:12:47.593125573 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), 8);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "return s.charAt(0) + b.substring(1), b.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:49.289119813 +0100\n+++ /tmp/tmpnl0sxxy9.java\t2023-03-24 12:12:49.289119813 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return s.charAt(0) + b.substring(1), b.length;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.lengthate",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:50.941114201 +0100\n+++ /tmp/tmp4f7ejixc.java\t2023-03-24 12:12:50.941114201 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.lengthate\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.length[1]);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:52.669108326 +0100\n+++ /tmp/tmpasy1knre.java\t2023-03-24 12:12:52.669108326 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.length[1]);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "return snd.charAt(0) + b.substring(1), a.length);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:54.449102273 +0100\n+++ /tmp/tmpjjv2scah.java\t2023-03-24 12:12:54.449102273 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return snd.charAt(0) + b.substring(1), a.length);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length>()",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:56.129096557 +0100\n+++ /tmp/tmpfpba6gsz.java\t2023-03-24 12:12:56.129096557 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length>()\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:57.793090894 +0100\n+++ /tmp/tmpo9hy8bip.java\t2023-03-24 12:12:57.797090883 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length];\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length},",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:12:59.433085312 +0100\n+++ /tmp/tmp9nf9sva6.java\t2023-03-24 12:12:59.433085312 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length},\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length - 1)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:13:01.209079262 +0100\n+++ /tmp/tmpc77g2dzc.java\t2023-03-24 12:13:01.209079262 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length - 1)\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "return a.charAt(0) + b, b.substring(1), b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:13:02.917073444 +0100\n+++ /tmp/tmpefm15bzj.java\t2023-03-24 12:13:02.917073444 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b, b.substring(1), b);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.substring(2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:13:04.541067909 +0100\n+++ /tmp/tmpmv4i3nph.java\t2023-03-24 12:13:04.541067909 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.substring(2);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "return a.charAt(0) == b.substring(1), a.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:13:06.217062194 +0100\n+++ /tmp/tmp_crtthn0.java\t2023-03-24 12:13:06.217062194 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), a.length;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "return a.charAt(0) + b.substringsubstring(1), b.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:13:07.861056587 +0100\n+++ /tmp/tmpyqi8vwry.java\t2023-03-24 12:13:07.861056587 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substringsubstring(1), b.length;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "return a.charAt(0) + b.substring(1), a.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:13:09.581050717 +0100\n+++ /tmp/tmpt51rrtu9.java\t2023-03-24 12:13:09.581050717 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), a.substring(1);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.length later 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:13:11.285044900 +0100\n+++ /tmp/tmplz6oep80.java\t2023-03-24 12:13:11.289044886 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.length later 1;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b.lengthnull);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:13:13.041038903 +0100\n+++ /tmp/tmpfetm_0ue.java\t2023-03-24 12:13:13.041038903 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b.lengthnull);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "return snd.charAt(0) + a.substring(1), b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:13:14.709033202 +0100\n+++ /tmp/tmp9r3asj1h.java\t2023-03-24 12:13:14.709033202 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return snd.charAt(0) + a.substring(1), b);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "return a.charAt(0) + b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:13:16.449027257 +0100\n+++ /tmp/tmp8ygdhaen.java\t2023-03-24 12:13:16.449027257 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.charAt(2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:13:20.545013249 +0100\n+++ /tmp/tmp1romunwa.java\t2023-03-24 12:13:20.545013249 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.charAt(2;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.length << 2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:13:22.257007389 +0100\n+++ /tmp/tmpzy33rc0l.java\t2023-03-24 12:13:22.257007389 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.length << 2);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "return a.charAt(0) + b.substring(1), c);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:13:24.041001281 +0100\n+++ /tmp/tmp3c9oatnh.java\t2023-03-24 12:13:24.041001281 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), c);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "return a.charAt(0) == b.substring(1), b.charAt(2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:13:25.740995461 +0100\n+++ /tmp/tmph8ftt5_f.java\t2023-03-24 12:13:25.740995461 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) == b.substring(1), b.charAt(2);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "return a.charAt(0) + b.substring(1), 16;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:13:27.484989485 +0100\n+++ /tmp/tmp_bizkt9b.java\t2023-03-24 12:13:27.488989470 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), 16;\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "return snd.charAt(0) + b.substring(1), b.length());",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:13:29.176983687 +0100\n+++ /tmp/tmpvn_mabi6.java\t2023-03-24 12:13:29.180983673 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return snd.charAt(0) + b.substring(1), b.length());\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "return a.charAt(0) + b.substring(1), b };",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:13:30.932977665 +0100\n+++ /tmp/tmp_5samerj.java\t2023-03-24 12:13:30.932977665 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return a.charAt(0) + b.substring(1), b };\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "return input.charAt(0) + b.substring(1), b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/longest_common_subsequence/java_programs/LONGEST_COMMON_SUBSEQUENCE.java\t2023-03-24 12:13:32.560972080 +0100\n+++ /tmp/tmp1tfwlot5.java\t2023-03-24 12:13:32.560972080 +0100\n@@ -13,11 +13,11 @@\n public class LONGEST_COMMON_SUBSEQUENCE {\n     public static String longest_common_subsequence(String a, String b) {\n         if (a.isEmpty() || b.isEmpty()) {\n             return \"\";\n         } else if (a.charAt(0) == b.charAt(0)) {\n-            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n+return input.charAt(0) + b.substring(1), b);\n         } else {\n             String fst = longest_common_subsequence(a, b.substring(1));\n             String snd = longest_common_subsequence(a.substring(1), b);\n             return fst.length() >= snd.length() ? fst : snd;\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "return a.charAt(0) + longest_common_subsequence(a.substring(1), b.substring(1));"
    },
    "subsequences": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "return new ArrayList(a;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:18.109225330 +0100\n+++ /tmp/tmpvn_cxd4j.java\t2023-03-24 12:12:18.181225086 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(a;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "return new ArrayList ArrayList(a;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:19.921219219 +0100\n+++ /tmp/tmp5sxzc0ea.java\t2023-03-24 12:12:19.921219219 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList(a;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "return new ArrayList[0];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:21.661213351 +0100\n+++ /tmp/tmp3dbnm7e1.java\t2023-03-24 12:12:21.661213351 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList[0];\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "return new ArrayList(a);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:23.505207129 +0100\n+++ /tmp/tmpsv0qgb4w.java\t2023-03-24 12:12:23.505207129 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(a);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "return new ArrayList ArrayList(a);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:27.569193401 +0100\n+++ /tmp/tmpyv78fqam.java\t2023-03-24 12:12:27.569193401 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList(a);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "return new ArrayList(400, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:29.309187522 +0100\n+++ /tmp/tmpkp3yg25r.java\t2023-03-24 12:12:29.309187522 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400, b;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "return new ArrayList(4);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:31.085181517 +0100\n+++ /tmp/tmpxqph438c.java\t2023-03-24 12:12:31.085181517 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(4);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "return new ArrayList(400, 0;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:35.405166899 +0100\n+++ /tmp/tmpzqpc9q2r.java\t2023-03-24 12:12:35.405166899 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400, 0;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "return new ArrayList ArrayList(4);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:37.141161019 +0100\n+++ /tmp/tmpk69onis7.java\t2023-03-24 12:12:37.141161019 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList(4);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "return new ArrayList ArrayList(400, 0;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:38.845155247 +0100\n+++ /tmp/tmpkhir46ao.java\t2023-03-24 12:12:38.845155247 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList(400, 0;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "return new ArrayList(400, 7;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:40.505149621 +0100\n+++ /tmp/tmpqlodu2au.java\t2023-03-24 12:12:40.505149621 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400, 7;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "return new ArrayList ArrayList];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:42.281143599 +0100\n+++ /tmp/tmpsxvbginn.java\t2023-03-24 12:12:42.281143599 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList];\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "return new ArrayList(2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:44.021137697 +0100\n+++ /tmp/tmpsi4cluy0.java\t2023-03-24 12:12:44.021137697 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(2);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "return new ArrayList(k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:48.125123766 +0100\n+++ /tmp/tmpbt0b1cfi.java\t2023-03-24 12:12:48.125123766 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(k;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "return new ArrayListRECORDS;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:49.813118034 +0100\n+++ /tmp/tmpyblldvop.java\t2023-03-24 12:12:49.813118034 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayListRECORDS;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "return new ArrayList(80);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:51.481112365 +0100\n+++ /tmp/tmpwtcwmnr5.java\t2023-03-24 12:12:51.485112351 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(80);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "return new ArrayList(4 * b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:55.489098736 +0100\n+++ /tmp/tmpln4642mv.java\t2023-03-24 12:12:55.493098721 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(4 * b;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "return new ArrayList<>(a;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:57.173093006 +0100\n+++ /tmp/tmp7po3kxz7.java\t2023-03-24 12:12:57.173093006 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList<>(a;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "return new ArrayList[2];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:12:58.909087097 +0100\n+++ /tmp/tmpjhdckf43.java\t2023-03-24 12:12:58.909087097 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList[2];\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "return new ArrayList ArrayList[0];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:00.729080899 +0100\n+++ /tmp/tmplkr25jb8.java\t2023-03-24 12:13:00.733080885 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList[0];\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "return new ArrayList(400,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:02.425075120 +0100\n+++ /tmp/tmpyg3ws7k7.java\t2023-03-24 12:13:02.425075120 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400,\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "return new ArrayList ArrayList(400,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:04.189069109 +0100\n+++ /tmp/tmpz9w8f3k5.java\t2023-03-24 12:13:04.193069095 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList(400,\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "return new ArrayList(4000];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:05.933063163 +0100\n+++ /tmp/tmp_ifo84er.java\t2023-03-24 12:13:05.933063163 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(4000];\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "return new ArrayList(4;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:07.629057377 +0100\n+++ /tmp/tmpbgohh0vw.java\t2023-03-24 12:13:07.629057377 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(4;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "return new ArrayList(4));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:09.345051522 +0100\n+++ /tmp/tmpinkdgyrt.java\t2023-03-24 12:13:09.345051522 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(4));\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "return new ArrayList(400, -1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:11.041045733 +0100\n+++ /tmp/tmpfri734sp.java\t2023-03-24 12:13:11.041045733 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400, -1);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "return new ArrayList(32;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:12.933039272 +0100\n+++ /tmp/tmp3bhtiun_.java\t2023-03-24 12:13:12.937039258 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(32;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "return new ArrayList(400, Descriptor;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:14.657033382 +0100\n+++ /tmp/tmp1eschx02.java\t2023-03-24 12:13:14.657033382 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400, Descriptor;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "return new ArrayList18];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:16.429027324 +0100\n+++ /tmp/tmpj2j8fxys.java\t2023-03-24 12:13:16.429027324 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList18];\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "return new ArrayList(totalBytes;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:18.201021266 +0100\n+++ /tmp/tmp8_jm7xwc.java\t2023-03-24 12:13:18.201021266 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(totalBytes;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "return new ArrayList(464);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:19.925015371 +0100\n+++ /tmp/tmp84wuuugo.java\t2023-03-24 12:13:19.925015371 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(464);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "return new ArrayList(400,400;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:23.997001434 +0100\n+++ /tmp/tmpcacrg69j.java\t2023-03-24 12:13:23.997001434 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400,400;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "return new ArrayList(400, s;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:25.740995461 +0100\n+++ /tmp/tmpfhl9046y.java\t2023-03-24 12:13:25.740995461 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400, s;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "return new ArrayList(length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:27.504989417 +0100\n+++ /tmp/tmphysw5py6.java\t2023-03-24 12:13:27.504989417 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(length;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "return new ArrayList(400, 0) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:29.244983453 +0100\n+++ /tmp/tmpykcniac1.java\t2023-03-24 12:13:29.248983438 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400, 0) {\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "return new ArrayList(400,F;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:30.932977665 +0100\n+++ /tmp/tmpc44b9nzr.java\t2023-03-24 12:13:30.932977665 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400,F;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "return new ArrayList ArrayList(3, k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:32.736971477 +0100\n+++ /tmp/tmpu9sl_b6x.java\t2023-03-24 12:13:32.740971462 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList(3, k;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "return new ArrayList ArrayList(k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:34.420965700 +0100\n+++ /tmp/tmpdnpt4a63.java\t2023-03-24 12:13:34.424965686 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList(k;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "return new ArrayList(size;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:36.488958600 +0100\n+++ /tmp/tmpjznprr76.java\t2023-03-24 12:13:36.488958600 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(size;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "return new ArrayList(3);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:38.292952405 +0100\n+++ /tmp/tmp5m2nvhbw.java\t2023-03-24 12:13:38.292952405 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(3);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "return new ArrayList(400, 13;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:42.364938412 +0100\n+++ /tmp/tmp7_rqm8t4.java\t2023-03-24 12:13:42.368938398 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400, 13;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "return new ArrayList(block;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:44.100932442 +0100\n+++ /tmp/tmpufot7miu.java\t2023-03-24 12:13:44.100932442 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(block;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "return new ArrayList(1024, k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:45.904926239 +0100\n+++ /tmp/tmpei12y43r.java\t2023-03-24 12:13:45.904926239 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(1024, k;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "return new ArrayList(400, 200;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:47.676920142 +0100\n+++ /tmp/tmpyqdkuktl.java\t2023-03-24 12:13:47.676920142 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400, 200;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "return new ArrayList(400,F);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:49.336914428 +0100\n+++ /tmp/tmpnfzjmn3v.java\t2023-03-24 12:13:49.336914428 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400,F);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "return new ArrayList(4).length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:51.152908173 +0100\n+++ /tmp/tmpg5sl34vr.java\t2023-03-24 12:13:51.152908173 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(4).length;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "return new ArrayList;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:52.976901890 +0100\n+++ /tmp/tmplfu_96ly.java\t2023-03-24 12:13:52.976901890 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "return new ArrayList(450;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:54.728895852 +0100\n+++ /tmp/tmpyu_tvmhh.java\t2023-03-24 12:13:54.732895838 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(450;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "return new ArrayList(current;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:56.416890033 +0100\n+++ /tmp/tmp4nms601p.java\t2023-03-24 12:13:56.416890033 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(current;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "return new ArrayList(4];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:58.152884048 +0100\n+++ /tmp/tmpv5f1nvck.java\t2023-03-24 12:13:58.156884034 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(4];\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "return new ArrayList(1024;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:13:59.840878223 +0100\n+++ /tmp/tmpi76deq_w.java\t2023-03-24 12:13:59.840878223 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(1024;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "return new ArrayList ArrayList;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:01.520872427 +0100\n+++ /tmp/tmpria07r8n.java\t2023-03-24 12:14:01.520872427 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "return new ArrayList(400, rendering;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:03.256866435 +0100\n+++ /tmp/tmphaua76ja.java\t2023-03-24 12:14:03.256866435 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400, rendering;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "return new ArrayList ArrayList[2];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:04.900860757 +0100\n+++ /tmp/tmpmihf8op3.java\t2023-03-24 12:14:04.900860757 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList[2];\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "return new ArrayList ArrayList(4));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:06.608854855 +0100\n+++ /tmp/tmpir1j_b7u.java\t2023-03-24 12:14:06.608854855 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList(4));\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "return new ArrayList(16);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:08.288849050 +0100\n+++ /tmp/tmpv5rfzupu.java\t2023-03-24 12:14:08.288849050 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(16);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "return new ArrayList(400, -1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:12.188835566 +0100\n+++ /tmp/tmpyiaehn_v.java\t2023-03-24 12:14:12.192835552 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400, -1;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "return new ArrayList ArrayList(3);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:13.936829519 +0100\n+++ /tmp/tmpd4ebfkrg.java\t2023-03-24 12:14:13.936829519 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList(3);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "return new ArrayList[] {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:15.652823581 +0100\n+++ /tmp/tmpluha0bed.java\t2023-03-24 12:14:15.652823581 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList[] {\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "return new ArrayList(400, marker;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:17.348817709 +0100\n+++ /tmp/tmpn9dcb0rs.java\t2023-03-24 12:14:17.348817709 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400, marker;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "return new ArrayList(begin;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:19.024811906 +0100\n+++ /tmp/tmp1l5xpbdg.java\t2023-03-24 12:14:19.024811906 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(begin;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "return new ArrayList(400, mod;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:20.696806114 +0100\n+++ /tmp/tmpop3m11lz.java\t2023-03-24 12:14:20.696806114 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400, mod;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "return new ArrayList ArrayList(464);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:22.332800444 +0100\n+++ /tmp/tmp6l1tqtps.java\t2023-03-24 12:14:22.332800444 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList(464);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "return new ArrayList(501;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:24.008794635 +0100\n+++ /tmp/tmpax86vl1x.java\t2023-03-24 12:14:24.008794635 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(501;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "return new ArrayList ArrayList<>(a;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:25.760788560 +0100\n+++ /tmp/tmp5xnsbk81.java\t2023-03-24 12:14:25.788788462 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList<>(a;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "return new ArrayList)(a;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:27.516782469 +0100\n+++ /tmp/tmpa26lqnat.java\t2023-03-24 12:14:27.524782441 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList)(a;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "return new ArrayList(length);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:29.248776459 +0100\n+++ /tmp/tmpm7xui9qo.java\t2023-03-24 12:14:29.248776459 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(length);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "return new ArrayList(42];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:30.968770489 +0100\n+++ /tmp/tmp2zt0aake.java\t2023-03-24 12:14:30.972770475 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(42];\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "return new ArrayList80;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:32.708764448 +0100\n+++ /tmp/tmp3jhq_l53.java\t2023-03-24 12:14:32.708764448 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList80;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "return new ArrayList(400,1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:34.480758292 +0100\n+++ /tmp/tmp9zhknbi8.java\t2023-03-24 12:14:34.480758292 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400,1) {\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "return new ArrayList', k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:36.280752039 +0100\n+++ /tmp/tmpt88yzetp.java\t2023-03-24 12:14:36.280752039 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList', k;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "return new ArrayList(5x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:37.976746144 +0100\n+++ /tmp/tmp0c9fs3v1.java\t2023-03-24 12:14:37.976746144 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(5x;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "return new ArrayList(400,[];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:39.696740164 +0100\n+++ /tmp/tmp444ymcau.java\t2023-03-24 12:14:39.696740164 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400,[];\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "return new ArrayList ArrayList(4000];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:41.448734068 +0100\n+++ /tmp/tmp3hdwauw5.java\t2023-03-24 12:14:41.448734068 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList(4000];\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "return new ArrayList(4x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:43.260727767 +0100\n+++ /tmp/tmpsiq7p0zv.java\t2023-03-24 12:14:43.260727767 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(4x;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "return new ArrayList[0], k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:44.996721725 +0100\n+++ /tmp/tmpinypu9mm.java\t2023-03-24 12:14:45.000721711 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList[0], k;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "return new ArrayList];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:46.760715584 +0100\n+++ /tmp/tmp2yev_usu.java\t2023-03-24 12:14:46.760715584 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList];\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "return new ArrayList ArrayList(length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:48.476709608 +0100\n+++ /tmp/tmpqa0xqivn.java\t2023-03-24 12:14:48.480709594 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList(length;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "return new ArrayList BACKTICK;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:50.152703770 +0100\n+++ /tmp/tmpemgnkuis.java\t2023-03-24 12:14:50.152703770 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList BACKTICK;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "return new ArrayList(430;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:51.864697803 +0100\n+++ /tmp/tmpnbfpzs7x.java\t2023-03-24 12:14:51.864697803 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(430;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "return new ArrayList(400,ITS;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:53.588691794 +0100\n+++ /tmp/tmpv5siy8yd.java\t2023-03-24 12:14:53.588691794 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400,ITS;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "return new ArrayList(b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:55.380685546 +0100\n+++ /tmp/tmpb0lkmnfh.java\t2023-03-24 12:14:55.384685532 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(b;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "return new ArrayList(l);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:57.116679490 +0100\n+++ /tmp/tmplimfyygy.java\t2023-03-24 12:14:57.116679490 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(l);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "return new ArrayList ArrayList(length);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:14:58.980672986 +0100\n+++ /tmp/tmpoo9r5b2r.java\t2023-03-24 12:14:58.980672986 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList(length);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "return new ArrayList marker marker;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:15:00.756666789 +0100\n+++ /tmp/tmpqzvud70o.java\t2023-03-24 12:15:00.756666789 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList marker marker;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "return new ArrayList(480;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:15:02.448660882 +0100\n+++ /tmp/tmps_d0zpq4.java\t2023-03-24 12:15:02.448660882 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(480;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "return new ArrayList ArrayList80;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:15:04.160654903 +0100\n+++ /tmp/tmpqkqu55h4.java\t2023-03-24 12:15:04.160654903 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList80;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "return new ArrayList ArrayList(32;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:15:05.856648978 +0100\n+++ /tmp/tmpcf69wjkn.java\t2023-03-24 12:15:05.856648978 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList(32;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "return new ArrayList(512);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:15:07.540643094 +0100\n+++ /tmp/tmpktsxbnvy.java\t2023-03-24 12:15:07.544643080 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(512);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "return new ArrayList(400, 7);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:15:11.784628256 +0100\n+++ /tmp/tmpigml60kd.java\t2023-03-24 12:15:11.784628256 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400, 7);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "return new ArrayList ArrayList18];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:15:13.612621860 +0100\n+++ /tmp/tmpnzeszwnr.java\t2023-03-24 12:15:13.612621860 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList18];\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "return new ArrayList ArrayList(501);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:15:15.360615741 +0100\n+++ /tmp/tmp8fkrsmsh.java\t2023-03-24 12:15:15.360615741 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList(501);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "return new ArrayList ArrayList(400, 2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:15:17.128609554 +0100\n+++ /tmp/tmpxu2fd34e.java\t2023-03-24 12:15:17.128609554 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList(400, 2;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "return new ArrayList(41];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:15:18.856603503 +0100\n+++ /tmp/tmpcp4ij66x.java\t2023-03-24 12:15:18.860603489 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(41];\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "return new ArrayList(427 {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:15:20.520597675 +0100\n+++ /tmp/tmpeu40aw95.java\t2023-03-24 12:15:20.520597675 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(427 {\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "return new ArrayList(401;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:15:22.280591508 +0100\n+++ /tmp/tmp74ds2bcq.java\t2023-03-24 12:15:22.280591508 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(401;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "return new ArrayList(32);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:15:24.012585440 +0100\n+++ /tmp/tmpcoga1ixp.java\t2023-03-24 12:15:24.012585440 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(32);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "return new ArrayList(z;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:15:28.232570642 +0100\n+++ /tmp/tmp133_6znq.java\t2023-03-24 12:15:28.232570642 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(z;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "return new ArrayList(400, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:15:29.960564581 +0100\n+++ /tmp/tmpj0lmnhu5.java\t2023-03-24 12:15:29.960564581 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList(400, b);\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "return new ArrayList ArrayList(4;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/subsequences/java_programs/SUBSEQUENCES.java\t2023-03-24 12:15:31.776558208 +0100\n+++ /tmp/tmpl5707_7g.java\t2023-03-24 12:15:31.776558208 +0100\n@@ -11,11 +11,11 @@\n  * @author derricklin\n  */\n public class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+return new ArrayList ArrayList(4;\n         }\n \n         ArrayList ret = new ArrayList(50);\n         for (int i=a; i<b+1-k; i++) {\n             ArrayList base = new ArrayList(50);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "ArrayList empty_set = new ArrayList<ArrayList>(); empty_set.add(new ArrayList()); return empty_set;"
    },
    "rpn_eval": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "c = b.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:13:36.676957955 +0100\n+++ /tmp/tmpmf71d5y2.java\t2023-03-24 12:13:36.688957912 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = b.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "c = b.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:13:38.480951760 +0100\n+++ /tmp/tmppz9264h5.java\t2023-03-24 12:13:38.480951760 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = b.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "c = bin_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:13:40.288945546 +0100\n+++ /tmp/tmpmveycknj.java\t2023-03-24 12:13:40.292945535 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = bin_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "c = stack.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:13:44.632930615 +0100\n+++ /tmp/tmp2v53m38m.java\t2023-03-24 12:13:44.632930615 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = stack.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "c = b.apply(a, b,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:13:46.368924642 +0100\n+++ /tmp/tmpsdg4i45j.java\t2023-03-24 12:13:46.368924642 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = b.apply(a, b,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "c = s.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:13:48.064918805 +0100\n+++ /tmp/tmpqs4qnx2a.java\t2023-03-24 12:13:48.064918805 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = s.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "c = a.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:13:49.832912717 +0100\n+++ /tmp/tmpuzkiqr62.java\t2023-03-24 12:13:49.832912717 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = a.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "c = b.apply(a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:13:51.668906397 +0100\n+++ /tmp/tmpef6_10bp.java\t2023-03-24 12:13:51.672906383 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = b.apply(a, b;\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "c = s.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:13:53.440900291 +0100\n+++ /tmp/tmppdhwmpga.java\t2023-03-24 12:13:53.440900291 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = s.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "c = bin_op.apply(a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:13:55.172894323 +0100\n+++ /tmp/tmpv3j_6awj.java\t2023-03-24 12:13:55.176894309 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = bin_op.apply(a, b;\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "c = b.apply(a,b,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:13:56.852888530 +0100\n+++ /tmp/tmpfj3umeiq.java\t2023-03-24 12:13:56.856888516 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = b.apply(a,b,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "c = single.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:13:58.624882419 +0100\n+++ /tmp/tmpzaqupc5b.java\t2023-03-24 12:13:58.624882419 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = single.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "c = text.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:00.380876360 +0100\n+++ /tmp/tmp4l8j2soi.java\t2023-03-24 12:14:00.380876360 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = text.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "c = b.apply(a,b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:02.108870397 +0100\n+++ /tmp/tmp8umvs6l9.java\t2023-03-24 12:14:02.108870397 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = b.apply(a,b;\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "c = s.apply(a, b,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:03.820864485 +0100\n+++ /tmp/tmplv287yd0.java\t2023-03-24 12:14:03.848864389 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = s.apply(a, b,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "c = bin_op.apply(a, b,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:05.628858240 +0100\n+++ /tmp/tmpsit2tcpg.java\t2023-03-24 12:14:05.628858240 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = bin_op.apply(a, b,\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "c = c.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:07.304852452 +0100\n+++ /tmp/tmpddns2b6l.java\t2023-03-24 12:14:07.304852452 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = c.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "c = EVENT_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:09.076846328 +0100\n+++ /tmp/tmpstszozcl.java\t2023-03-24 12:14:09.076846328 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = EVENT_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "c = input.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:10.964839800 +0100\n+++ /tmp/tmp0r_h0eq4.java\t2023-03-24 12:14:10.964839800 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = input.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "c = c.apply(a, b,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:12.792833477 +0100\n+++ /tmp/tmp4o_4c4tz.java\t2023-03-24 12:14:12.792833477 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = c.apply(a, b,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "c =phone_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:14.592827250 +0100\n+++ /tmp/tmp1wd4jkzc.java\t2023-03-24 12:14:14.592827250 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c =phone_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "c = even_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:16.504820631 +0100\n+++ /tmp/tmpz99ofgmu.java\t2023-03-24 12:14:16.504820631 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = even_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "c = single.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:18.352814233 +0100\n+++ /tmp/tmp1bcmc3pd.java\t2023-03-24 12:14:18.352814233 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = single.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "c = r.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:20.252807652 +0100\n+++ /tmp/tmpdolya0m6.java\t2023-03-24 12:14:20.256807638 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = r.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "c = a.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:22.052801415 +0100\n+++ /tmp/tmppjdyf4bp.java\t2023-03-24 12:14:22.056801401 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = a.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "c = vari_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:23.928794910 +0100\n+++ /tmp/tmpkvy6pxh0.java\t2023-03-24 12:14:23.928794910 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = vari_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "c -= bin_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:25.732788656 +0100\n+++ /tmp/tmpugegcs9_.java\t2023-03-24 12:14:25.736788642 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c -= bin_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "c = b.apply(a, b,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:29.816774487 +0100\n+++ /tmp/tmpzq_p08x3.java\t2023-03-24 12:14:29.816774487 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = b.apply(a, b,\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "c = b.apply(a, bin_op;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:31.460768780 +0100\n+++ /tmp/tmp_9h3b3xw.java\t2023-03-24 12:14:31.460768780 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = b.apply(a, bin_op;\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "c =fallback_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:33.016763377 +0100\n+++ /tmp/tmpkxgcxbmo.java\t2023-03-24 12:14:33.016763377 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c =fallback_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "c = input.apply(a, b,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:34.684757584 +0100\n+++ /tmp/tmpe2hlcquy.java\t2023-03-24 12:14:34.684757584 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = input.apply(a, b,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "c = b.apply(a, bin_op);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:36.340751828 +0100\n+++ /tmp/tmpwq7stjyp.java\t2023-03-24 12:14:36.340751828 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = b.apply(a, bin_op);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "c = stack.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:38.064745838 +0100\n+++ /tmp/tmp0qz8y590.java\t2023-03-24 12:14:38.064745838 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = stack.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "c = a.apply(a, b,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:39.816739744 +0100\n+++ /tmp/tmp0qmtgji8.java\t2023-03-24 12:14:39.816739744 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = a.apply(a, b,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "c = tab_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:41.536733765 +0100\n+++ /tmp/tmpcv507pjn.java\t2023-03-24 12:14:41.536733765 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = tab_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "c = b.apply(a,b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:43.308727599 +0100\n+++ /tmp/tmpf840g034.java\t2023-03-24 12:14:43.308727599 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = b.apply(a,b, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "c =LINT_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:45.072721461 +0100\n+++ /tmp/tmpxke507e2.java\t2023-03-24 12:14:45.076721447 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c =LINT_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "c = positions.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:46.868715208 +0100\n+++ /tmp/tmpqyutivcl.java\t2023-03-24 12:14:46.868715208 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = positions.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "c = PROJECT_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:48.584709232 +0100\n+++ /tmp/tmpk036_ewb.java\t2023-03-24 12:14:48.584709232 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = PROJECT_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "c = fetches_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:50.292703281 +0100\n+++ /tmp/tmp7gzm9pht.java\t2023-03-24 12:14:50.292703281 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = fetches_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "c = black_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:51.980697399 +0100\n+++ /tmp/tmp6i2y5arp.java\t2023-03-24 12:14:51.980697399 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = black_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "c = single.apply(a, b,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:53.780691124 +0100\n+++ /tmp/tmpv7mziexk.java\t2023-03-24 12:14:53.780691124 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = single.apply(a, b,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "c = activ_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:55.492685156 +0100\n+++ /tmp/tmpng8zj27b.java\t2023-03-24 12:14:55.492685156 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = activ_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "c = v.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:57.216679142 +0100\n+++ /tmp/tmp2vspb0if.java\t2023-03-24 12:14:57.220679128 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = v.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "c =bin_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:14:59.008672890 +0100\n+++ /tmp/tmprdo4c0qr.java\t2023-03-24 12:14:59.008672890 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c =bin_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "c =letter_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:03.188658297 +0100\n+++ /tmp/tmp0j3yagbf.java\t2023-03-24 12:15:03.188658297 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c =letter_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "c = positions.apply(a, b,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:04.948652150 +0100\n+++ /tmp/tmpirf5uesl.java\t2023-03-24 12:15:04.964652094 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = positions.apply(a, b,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "c = processEngine.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:06.636646252 +0100\n+++ /tmp/tmp0njax1l5.java\t2023-03-24 12:15:06.636646252 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = processEngine.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "c =Frequency_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:08.416640032 +0100\n+++ /tmp/tmpnyx6iir9.java\t2023-03-24 12:15:08.416640032 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c =Frequency_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "c = pp.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:10.056634298 +0100\n+++ /tmp/tmpmx5rwb0j.java\t2023-03-24 12:15:10.060634284 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = pp.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "c = git_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:11.916627794 +0100\n+++ /tmp/tmp0mj5repq.java\t2023-03-24 12:15:11.916627794 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = git_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "c = isn_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:13.684621608 +0100\n+++ /tmp/tmp0tkd_2qk.java\t2023-03-24 12:15:13.684621608 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = isn_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "c = clean_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:15.416615545 +0100\n+++ /tmp/tmpwgve3qas.java\t2023-03-24 12:15:15.416615545 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = clean_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "c = fallback_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:17.196609316 +0100\n+++ /tmp/tmpr8236a4d.java\t2023-03-24 12:15:17.196609316 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = fallback_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "c = increment_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:18.992603027 +0100\n+++ /tmp/tmpuq16n_me.java\t2023-03-24 12:15:18.992603027 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = increment_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "c = q.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:20.716596989 +0100\n+++ /tmp/tmph3088vjm.java\t2023-03-24 12:15:20.716596989 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = q.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "c = business_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:22.428590990 +0100\n+++ /tmp/tmp_7uepkll.java\t2023-03-24 12:15:22.428590990 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = business_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "c =Sorted_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:24.220584710 +0100\n+++ /tmp/tmpz6_ekgkn.java\t2023-03-24 12:15:24.224584696 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c =Sorted_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "c =contact_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:25.984578527 +0100\n+++ /tmp/tmps3135oue.java\t2023-03-24 12:15:25.984578527 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c =contact_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "c =Paint.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:27.744572355 +0100\n+++ /tmp/tmp1xpc494e.java\t2023-03-24 12:15:27.744572355 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c =Paint.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "c = predefined_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:29.404566532 +0100\n+++ /tmp/tmpyr8jz9f8.java\t2023-03-24 12:15:29.404566532 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = predefined_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "c = ok.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:31.124560497 +0100\n+++ /tmp/tmpj3092zay.java\t2023-03-24 12:15:31.124560497 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = ok.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "c = predec_op.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:32.872554362 +0100\n+++ /tmp/tmpij5h0b7u.java\t2023-03-24 12:15:32.872554362 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = predec_op.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "c = s.apply(a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:34.752547761 +0100\n+++ /tmp/tmp7b2i_dyx.java\t2023-03-24 12:15:34.756547747 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = s.apply(a, b;\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "c = q.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:36.856540372 +0100\n+++ /tmp/tmpq_01eb4h.java\t2023-03-24 12:15:36.856540372 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = q.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "c = foundb.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:38.632534134 +0100\n+++ /tmp/tmpqrh8a1wn.java\t2023-03-24 12:15:38.636534120 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = foundb.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "c = value.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:40.304528258 +0100\n+++ /tmp/tmpiqxx0hed.java\t2023-03-24 12:15:40.304528258 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = value.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "c = vx.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:42.160521735 +0100\n+++ /tmp/tmpaf0vt6qo.java\t2023-03-24 12:15:42.176521677 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = vx.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "c =Seconds.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:43.936515489 +0100\n+++ /tmp/tmpnjmagg7i.java\t2023-03-24 12:15:43.940515475 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c =Seconds.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "c = update.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:45.660509426 +0100\n+++ /tmp/tmplb7vozaq.java\t2023-03-24 12:15:45.660509426 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = update.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "c =getId.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:47.380503373 +0100\n+++ /tmp/tmp_jvquzpx.java\t2023-03-24 12:15:47.380503373 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c =getId.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "c = processb.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:49.100497321 +0100\n+++ /tmp/tmp5fobwfda.java\t2023-03-24 12:15:49.100497321 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = processb.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "c = fetches.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:50.924490900 +0100\n+++ /tmp/tmp36b9lg28.java\t2023-03-24 12:15:50.924490900 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = fetches.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "c = b.apply(a, b, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:52.676484732 +0100\n+++ /tmp/tmpxyqw9c3t.java\t2023-03-24 12:15:52.676484732 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = b.apply(a, b, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "c = value.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:54.424478574 +0100\n+++ /tmp/tmpg1fs7tec.java\t2023-03-24 12:15:54.424478574 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = value.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "c = so.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:56.640470766 +0100\n+++ /tmp/tmpim_u_189.java\t2023-03-24 12:15:56.640470766 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = so.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "c = temp.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:15:59.124462012 +0100\n+++ /tmp/tmpo2zu5snj.java\t2023-03-24 12:15:59.124462012 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = temp.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "c = m.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:00.844455948 +0100\n+++ /tmp/tmpj46n440i.java\t2023-03-24 12:16:01.008455369 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = m.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "c = objects.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:03.112447951 +0100\n+++ /tmp/tmpa_51n02v.java\t2023-03-24 12:16:03.112447951 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = objects.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "c = tmp.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:05.648439001 +0100\n+++ /tmp/tmptuuwmaz6.java\t2023-03-24 12:16:05.648439001 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = tmp.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "c = fetches.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:07.780431476 +0100\n+++ /tmp/tmpvrxd9634.java\t2023-03-24 12:16:07.780431476 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = fetches.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "c = c.apply(a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:10.316422522 +0100\n+++ /tmp/tmpw4uo6awg.java\t2023-03-24 12:16:10.320422508 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = c.apply(a, b;\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "c = parser.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:12.224415783 +0100\n+++ /tmp/tmpajzsz3jp.java\t2023-03-24 12:16:12.224415783 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = parser.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "c = policy.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:14.732406922 +0100\n+++ /tmp/tmp73yrcixp.java\t2023-03-24 12:16:14.732406922 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = policy.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "c = bin_op.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:16.624400235 +0100\n+++ /tmp/tmp87ehpojd.java\t2023-03-24 12:16:16.624400235 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = bin_op.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "c = master.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:21.296383715 +0100\n+++ /tmp/tmpq43fy7ju.java\t2023-03-24 12:16:21.296383715 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = master.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "c = fetches_op.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:23.100377333 +0100\n+++ /tmp/tmpchuyjz49.java\t2023-03-24 12:16:23.100377333 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = fetches_op.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "c = environment.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:25.860367565 +0100\n+++ /tmp/tmp_oxuqkim.java\t2023-03-24 12:16:25.860367565 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = environment.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "c = fontSize.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:27.928360243 +0100\n+++ /tmp/tmpo6adrhc9.java\t2023-03-24 12:16:27.928360243 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = fontSize.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "c = factory.apply(a,b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:30.248352027 +0100\n+++ /tmp/tmp_8x0srgk.java\t2023-03-24 12:16:30.248352027 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = factory.apply(a,b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "c = temp.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:32.524343963 +0100\n+++ /tmp/tmpgu38ut1b.java\t2023-03-24 12:16:32.524343963 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = temp.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "c = o.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:34.904335529 +0100\n+++ /tmp/tmpxap_64ud.java\t2023-03-24 12:16:34.904335529 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = o.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "c = a.apply(a, b;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:37.096327759 +0100\n+++ /tmp/tmpngl5kz3w.java\t2023-03-24 12:16:37.096327759 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = a.apply(a, b;\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "c = b.apply(a,b,c);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:39.072320753 +0100\n+++ /tmp/tmp8nqa7sov.java\t2023-03-24 12:16:39.072320753 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = b.apply(a,b,c);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "c = select.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:41.272312947 +0100\n+++ /tmp/tmpewd9vamm.java\t2023-03-24 12:16:41.276312933 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = select.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "c = b.apply(a, b, c);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:44.004303252 +0100\n+++ /tmp/tmp6us4xi8e.java\t2023-03-24 12:16:44.004303252 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = b.apply(a, b, c);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "c = maxLength.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:46.416294690 +0100\n+++ /tmp/tmpjoqi8uua.java\t2023-03-24 12:16:46.416294690 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = maxLength.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "c = v.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:48.260288142 +0100\n+++ /tmp/tmp3f3vf31r.java\t2023-03-24 12:16:48.260288142 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = v.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "c =b.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:49.996281976 +0100\n+++ /tmp/tmpq11ar8w7.java\t2023-03-24 12:16:50.000281962 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c =b.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "c = explicit.apply(a, b);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/rpn_eval/java_programs/RPN_EVAL.java\t2023-03-24 12:16:52.196274159 +0100\n+++ /tmp/tmppa331yhy.java\t2023-03-24 12:16:52.196274159 +0100\n@@ -29,11 +29,11 @@\n                 token = (String) token;\n                 Double a = (Double) stack.pop();\n                 Double b = (Double) stack.pop();\n                 Double c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c = bin_op.apply(a,b);\n+c = explicit.apply(a, b);\n                 stack.push(c);\n             }\n         }\n \n         return (Double) stack.pop();\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "c = bin_op.apply(b,a);"
    },
    "topological_ordering": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:15:37.912536662 +0100\n+++ /tmp/tmp6il1mr4x.java\t2023-03-24 12:15:37.988536396 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:15:42.392520917 +0100\n+++ /tmp/tmpz6r7wizr.java\t2023-03-24 12:15:42.392520917 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode))) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:15:44.092514940 +0100\n+++ /tmp/tmptqkvu_73.java\t2023-03-24 12:15:44.092514940 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode))) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors() &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:15:45.804508919 +0100\n+++ /tmp/tmpxu_uc4nf.java\t2023-03-24 12:15:45.804508919 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors() &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:15:47.504502938 +0100\n+++ /tmp/tmp_1k1gvlw.java\t2023-03-24 12:15:47.504502938 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "if (crNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:15:49.220496899 +0100\n+++ /tmp/tmp6b3sz8_6.java\t2023-03-24 12:15:49.220496899 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (crNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "if (JNode.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:15:50.956490788 +0100\n+++ /tmp/tmpqvmwi56s.java\t2023-03-24 12:15:50.956490788 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (JNode.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:15:52.708484618 +0100\n+++ /tmp/tmp_pmj9jmr.java\t2023-03-24 12:15:52.708484618 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "if (meNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:15:54.452478476 +0100\n+++ /tmp/tmp53jrm6fj.java\t2023-03-24 12:15:54.456478462 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (meNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "if (orderedNodes.containsAll)nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:15:56.400471613 +0100\n+++ /tmp/tmpnlz_f2s0.java\t2023-03-24 12:15:56.400471613 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll)nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNodeNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:15:58.784463210 +0100\n+++ /tmp/tmpibfrr50e.java\t2023-03-24 12:15:58.900462801 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNodeNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "if (orderedNodes.containsAll &&nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:00.860455891 +0100\n+++ /tmp/tmpiqbge0h0.java\t2023-03-24 12:16:01.008455369 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll &&nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:03.076448076 +0100\n+++ /tmp/tmpxlvfylqc.java\t2023-03-24 12:16:03.076448076 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode);\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "if (nextNode.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:05.296440243 +0100\n+++ /tmp/tmpqjy8jlc5.java\t2023-03-24 12:16:05.332440117 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (nextNode.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "if (calculateNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:07.576432197 +0100\n+++ /tmp/tmps4n4ggny.java\t2023-03-24 12:16:07.648431942 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (calculateNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(previousNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:09.904423978 +0100\n+++ /tmp/tmpf82_33ji.java\t2023-03-24 12:16:10.016423583 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(previousNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) ||!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:12.064416349 +0100\n+++ /tmp/tmplfcnbg7g.java\t2023-03-24 12:16:12.192415897 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) ||!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "if ( isNotEmptyNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:19.012391792 +0100\n+++ /tmp/tmpqa5kzi6d.java\t2023-03-24 12:16:19.012391792 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if ( isNotEmptyNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "if (blackNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:20.692385851 +0100\n+++ /tmp/tmp3nlk0tf1.java\t2023-03-24 12:16:20.692385851 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (blackNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode, {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:22.940377901 +0100\n+++ /tmp/tmpzcu9f_r_.java\t2023-03-24 12:16:23.072377432 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode, {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "if (topNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:25.420369122 +0100\n+++ /tmp/tmpcl4y7yr8.java\t2023-03-24 12:16:25.560368627 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (topNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "if (VALUESNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:27.716360994 +0100\n+++ /tmp/tmpvm2_lych.java\t2023-03-24 12:16:27.716360994 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (VALUESNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "if (GMENTNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:30.292351871 +0100\n+++ /tmp/tmp1bytcsg6.java\t2023-03-24 12:16:30.292351871 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (GMENTNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "if (scalarNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:32.576343779 +0100\n+++ /tmp/tmpg8gfc6ln.java\t2023-03-24 12:16:32.688343382 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (scalarNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "if (DEBUGNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:34.680336323 +0100\n+++ /tmp/tmpyaiiy0fs.java\t2023-03-24 12:16:34.808335870 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (DEBUGNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "if (creNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:37.072327843 +0100\n+++ /tmp/tmp5h1ifq6z.java\t2023-03-24 12:16:37.072327843 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (creNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "if (STNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:39.092320680 +0100\n+++ /tmp/tmpz9d8svnb.java\t2023-03-24 12:16:39.092320680 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (STNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "if (MayNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:41.264312975 +0100\n+++ /tmp/tmprpt4jjxu.java\t2023-03-24 12:16:41.264312975 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (MayNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "if (distancesNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:43.812303933 +0100\n+++ /tmp/tmp1c5478zg.java\t2023-03-24 12:16:43.972303366 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (distancesNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "if (NONNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:46.388294790 +0100\n+++ /tmp/tmprm6d6a3z.java\t2023-03-24 12:16:46.392294776 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (NONNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(currentNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:48.220288286 +0100\n+++ /tmp/tmp39acdfrj.java\t2023-03-24 12:16:48.220288286 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(currentNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:50.028281863 +0100\n+++ /tmp/tmpd3n9swnq.java\t2023-03-24 12:16:50.028281863 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode));\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:52.168274259 +0100\n+++ /tmp/tmp8sh22epr.java\t2023-03-24 12:16:52.168274259 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode;\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "if (orderedNodes.containsAll thenextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:54.020267677 +0100\n+++ /tmp/tmp3uio_g4j.java\t2023-03-24 12:16:54.020267677 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll thenextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode instanceof) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:56.536258733 +0100\n+++ /tmp/tmpnx_z5g0d.java\t2023-03-24 12:16:56.568258620 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode instanceof) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "if ( VALUESNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:16:59.140249475 +0100\n+++ /tmp/tmpwai1i_3o.java\t2023-03-24 12:16:59.144249458 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if ( VALUESNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "if (orderedNodes.containsAll && nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:01.328241690 +0100\n+++ /tmp/tmpbmjjdt53.java\t2023-03-24 12:17:01.328241690 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll && nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode instanceof)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:03.528233861 +0100\n+++ /tmp/tmp3auu3q30.java\t2023-03-24 12:17:03.528233861 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode instanceof)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "if (OrigNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:05.640226343 +0100\n+++ /tmp/tmptbx_4j8c.java\t2023-03-24 12:17:05.640226343 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (OrigNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "if (parentNode.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:08.064217712 +0100\n+++ /tmp/tmpt_pqgnvd.java\t2023-03-24 12:17:08.068217698 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (parentNode.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "if (markerNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:10.144210304 +0100\n+++ /tmp/tmp02dlt00z.java\t2023-03-24 12:17:10.144210304 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (markerNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "if ( nextNode.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:12.324202539 +0100\n+++ /tmp/tmpf_94zw44.java\t2023-03-24 12:17:12.324202539 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if ( nextNode.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "if (charNode.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:14.640194283 +0100\n+++ /tmp/tmp9smuxsff.java\t2023-03-24 12:17:14.640194283 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (charNode.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "if (emptyNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:16.776186668 +0100\n+++ /tmp/tmpqgc2000t.java\t2023-03-24 12:17:16.888186269 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (emptyNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "if ([2]Nodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:18.940178951 +0100\n+++ /tmp/tmpbskoysv5.java\t2023-03-24 12:17:18.940178951 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if ([2]Nodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "if (nodesNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:20.972171705 +0100\n+++ /tmp/tmpx6jtxetg.java\t2023-03-24 12:17:20.972171705 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (nodesNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "if (600Nodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:23.552162497 +0100\n+++ /tmp/tmpw5on27gy.java\t2023-03-24 12:17:23.552162497 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (600Nodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "if ( importsNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:25.412155859 +0100\n+++ /tmp/tmpugxlg8fk.java\t2023-03-24 12:17:25.412155859 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if ( importsNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "if (AlwaysNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:27.564148177 +0100\n+++ /tmp/tmpywaql8o3.java\t2023-03-24 12:17:27.696147704 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (AlwaysNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "if (RemovedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:29.852140006 +0100\n+++ /tmp/tmp1mlpay6z.java\t2023-03-24 12:17:29.852140006 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (RemovedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "if (forceNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:31.900132692 +0100\n+++ /tmp/tmp33049mtr.java\t2023-03-24 12:17:31.900132692 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (forceNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "if (hintNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:34.360123900 +0100\n+++ /tmp/tmp69v5dd5_.java\t2023-03-24 12:17:34.360123900 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (hintNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNodePath)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:36.124117595 +0100\n+++ /tmp/tmpo51kysz7.java\t2023-03-24 12:17:36.124117595 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNodePath)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "if ( LockNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:37.808111575 +0100\n+++ /tmp/tmpoxezksmt.java\t2023-03-24 12:17:37.808111575 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if ( LockNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "if (SegmentNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:39.536105395 +0100\n+++ /tmp/tmpc2ejh22i.java\t2023-03-24 12:17:39.536105395 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (SegmentNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "if ( JsonNodeNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:41.256099244 +0100\n+++ /tmp/tmpo97df2n_.java\t2023-03-24 12:17:41.256099244 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if ( JsonNodeNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "if (ResultListNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:42.976093091 +0100\n+++ /tmp/tmphx_7r7vr.java\t2023-03-24 12:17:42.976093091 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (ResultListNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "if (betweenNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:44.696086937 +0100\n+++ /tmp/tmplnny70pb.java\t2023-03-24 12:17:44.696086937 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (betweenNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "if ( DelNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:46.516080424 +0100\n+++ /tmp/tmpabsrjlv0.java\t2023-03-24 12:17:46.520080411 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if ( DelNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "if (voidNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:48.220074323 +0100\n+++ /tmp/tmp8_5oula2.java\t2023-03-24 12:17:48.220074323 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (voidNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "if (prettyNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:49.980068024 +0100\n+++ /tmp/tmp9syd8t0i.java\t2023-03-24 12:17:49.984068007 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (prettyNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "if (edgesNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:51.732061747 +0100\n+++ /tmp/tmplf1sg5u3.java\t2023-03-24 12:17:51.732061747 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (edgesNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "if (injectNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:53.560055200 +0100\n+++ /tmp/tmp9wh58a1j.java\t2023-03-24 12:17:53.560055200 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (injectNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "if (joNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:55.336048837 +0100\n+++ /tmp/tmppi4ypea9.java\t2023-03-24 12:17:55.336048837 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (joNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "if (photoNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:57.104042500 +0100\n+++ /tmp/tmprvw1fy4j.java\t2023-03-24 12:17:57.104042500 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (photoNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "if ( leftNode.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:17:58.908036036 +0100\n+++ /tmp/tmpckyxqypr.java\t2023-03-24 12:17:58.908036036 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if ( leftNode.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "if (orderedNodes.containsAll.nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:00.724029523 +0100\n+++ /tmp/tmp4ppsbydw.java\t2023-03-24 12:18:00.728029509 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll.nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "if ( 600Nodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:02.464023284 +0100\n+++ /tmp/tmpiz7wwmbq.java\t2023-03-24 12:18:02.464023284 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if ( 600Nodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "if (gatewayNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:04.192017085 +0100\n+++ /tmp/tmppplg7y3d.java\t2023-03-24 12:18:04.196017071 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (gatewayNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "if (vertexNode.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:05.896010972 +0100\n+++ /tmp/tmpfhn3queb.java\t2023-03-24 12:18:05.896010972 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (vertexNode.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "if (orderedNodes.containsAll) nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:07.616004802 +0100\n+++ /tmp/tmpdm6oshgi.java\t2023-03-24 12:18:07.620004785 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll) nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "if (ForwardNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:09.259998900 +0100\n+++ /tmp/tmpjsv467vs.java\t2023-03-24 12:18:09.263998886 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (ForwardNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "if (quNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:11.071992395 +0100\n+++ /tmp/tmpat2j1q_u.java\t2023-03-24 12:18:11.075992381 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (quNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "if ( MENodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:12.783986248 +0100\n+++ /tmp/tmp8v9samx1.java\t2023-03-24 12:18:12.783986248 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if ( MENodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "if (SinceNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:14.495980100 +0100\n+++ /tmp/tmpm_wrt9el.java\t2023-03-24 12:18:14.495980100 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (SinceNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "if (JNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:16.223973893 +0100\n+++ /tmp/tmpbtqh5as2.java\t2023-03-24 12:18:16.227973879 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (JNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "if (orderedNodes.containsAll =nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:17.995967528 +0100\n+++ /tmp/tmpy_bhu71b.java\t2023-03-24 12:18:17.999967515 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll =nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "if (mayNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:19.715961346 +0100\n+++ /tmp/tmpl1jj11mv.java\t2023-03-24 12:18:19.715961346 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (mayNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "if (partsNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:21.439955149 +0100\n+++ /tmp/tmpffmlu17e.java\t2023-03-24 12:18:21.439955149 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (partsNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "if (QuantityNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:23.175948911 +0100\n+++ /tmp/tmpx23wp5v1.java\t2023-03-24 12:18:23.179948894 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (QuantityNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "if ( changedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:24.911942667 +0100\n+++ /tmp/tmp9v31dawc.java\t2023-03-24 12:18:24.911942667 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if ( changedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "if (RemNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:26.647936423 +0100\n+++ /tmp/tmpv65u8zt7.java\t2023-03-24 12:18:26.647936423 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (RemNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "if (ComponentNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:28.327930380 +0100\n+++ /tmp/tmpk4fievm5.java\t2023-03-24 12:18:28.327930380 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (ComponentNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "if ( callNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:30.143923846 +0100\n+++ /tmp/tmpugq2wx2p.java\t2023-03-24 12:18:30.143923846 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if ( callNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode * {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:31.935917397 +0100\n+++ /tmp/tmp1brforsu.java\t2023-03-24 12:18:31.939917383 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode * {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "if ( objNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:33.675911135 +0100\n+++ /tmp/tmpq9y3w8er.java\t2023-03-24 12:18:33.675911135 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if ( objNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "if (LockNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:35.411904885 +0100\n+++ /tmp/tmp6oyaakmi.java\t2023-03-24 12:18:35.411904885 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (LockNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "if ( arraysNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:37.199898447 +0100\n+++ /tmp/tmpi_t98uoi.java\t2023-03-24 12:18:37.199898447 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if ( arraysNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "if ( utilNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:39.019891892 +0100\n+++ /tmp/tmpxy975s7u.java\t2023-03-24 12:18:39.019891892 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if ( utilNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "if (detailNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:40.811885439 +0100\n+++ /tmp/tmpn_3d65n5.java\t2023-03-24 12:18:40.811885439 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (detailNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors\")) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:42.651878810 +0100\n+++ /tmp/tmp30ejjmoo.java\t2023-03-24 12:18:42.651878810 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors\")) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "if ( bottomNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:44.415872450 +0100\n+++ /tmp/tmpc49lu9w8.java\t2023-03-24 12:18:44.415872450 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if ( bottomNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "if (incrementNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:46.179866092 +0100\n+++ /tmp/tmpd0_8b4p7.java\t2023-03-24 12:18:46.179866092 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (incrementNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode instanceof instanceof));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:47.943859734 +0100\n+++ /tmp/tmp0s0xkhz3.java\t2023-03-24 12:18:47.943859734 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode instanceof instanceof));\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode instanceof instanceof);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:49.599853762 +0100\n+++ /tmp/tmpfhhorlb8.java\t2023-03-24 12:18:49.599853762 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode instanceof instanceof);\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode - i {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:51.287847676 +0100\n+++ /tmp/tmp6nlxkthi.java\t2023-03-24 12:18:51.287847676 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode - i {\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode - i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:52.935841730 +0100\n+++ /tmp/tmpm8gwbx66.java\t2023-03-24 12:18:52.935841730 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode - i;\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode instanceof instanceof;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:54.579835799 +0100\n+++ /tmp/tmphs2qrcc_.java\t2023-03-24 12:18:54.583835786 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode instanceof instanceof;\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode instanceof instanceof)));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:56.259829736 +0100\n+++ /tmp/tmp55gng4gv.java\t2023-03-24 12:18:56.259829736 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode instanceof instanceof)));\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode instanceof list;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/topological_ordering/java_programs/TOPOLOGICAL_ORDERING.java\t2023-03-24 12:18:57.935823687 +0100\n+++ /tmp/tmpburez2ux.java\t2023-03-24 12:18:57.935823687 +0100\n@@ -12,11 +12,11 @@\n \n         int listSize = orderedNodes.size();\n         for (int i = 0; i < listSize; i++) {\n             Node node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors()) {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n+if (orderedNodes.containsAll(nextNode.getSuccessors()) &&!orderedNodes.contains(nextNode instanceof list;\n                     orderedNodes.add(nextNode);\n                     listSize++;\n                 }\n             }\n         }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "if (orderedNodes.containsAll(nextNode.getPredecessors()) && !orderedNodes.contains(nextNode)) {"
    },
    "shunting_yard": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",2); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:16:59.164249388 +0100\n+++ /tmp/tmpxqdxpgx3.java\t2023-03-24 12:16:59.588247880 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",2); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",Cookientokens =AndGet; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:01.540240936 +0100\n+++ /tmp/tmpny4c90mc.java\t2023-03-24 12:17:01.540240936 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",Cookientokens =AndGet; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", new precedence; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:03.516233906 +0100\n+++ /tmp/tmpb8h_6adl.java\t2023-03-24 12:17:03.516233906 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", new precedence; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",1) token; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:05.628226387 +0100\n+++ /tmp/tmp4glhq68q.java\t2023-03-24 12:17:05.628226387 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",1) token; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:08.064217712 +0100\n+++ /tmp/tmp712pnxxo.java\t2023-03-24 12:17:08.068217698 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",1);\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",2 precedence.pop()); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:10.128210360 +0100\n+++ /tmp/tmp00f8mhzw.java\t2023-03-24 12:17:10.128210360 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",2 precedence.pop()); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", query; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:12.316202566 +0100\n+++ /tmp/tmpttphi93v.java\t2023-03-24 12:17:12.316202566 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", query; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",Cookientokens = supported; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:14.624194340 +0100\n+++ /tmp/tmpl6u2nlov.java\t2023-03-24 12:17:14.624194340 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",Cookientokens = supported; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",> precedence.put(\"-\",2); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:16.760186724 +0100\n+++ /tmp/tmpuwtazxiy.java\t2023-03-24 12:17:16.884186283 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",> precedence.put(\"-\",2); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",1)!= precedence.getLast())) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:18.908179068 +0100\n+++ /tmp/tmpynrif5g8.java\t2023-03-24 12:17:18.908179068 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",1)!= precedence.getLast())) {\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",Cookientokens = ret; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:20.960171746 +0100\n+++ /tmp/tmp3shybu4m.java\t2023-03-24 12:17:20.960171746 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",Cookientokens = ret; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",2 precedence.put(\"-\",2); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:23.536162555 +0100\n+++ /tmp/tmptra84nba.java\t2023-03-24 12:17:23.536162555 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",2 precedence.put(\"-\",2); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", new precedence.pop); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:25.300156258 +0100\n+++ /tmp/tmpv25zxoym.java\t2023-03-24 12:17:25.300156258 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", new precedence.pop); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", field); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:27.548148233 +0100\n+++ /tmp/tmpmo5veztv.java\t2023-03-24 12:17:27.696147704 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", field); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",2 precedence.pop); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:29.840140048 +0100\n+++ /tmp/tmpblz7y9ub.java\t2023-03-24 12:17:29.840140048 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",2 precedence.pop); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", 25); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:31.884132747 +0100\n+++ /tmp/tmpaz3h3vyl.java\t2023-03-24 12:17:31.888132733 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", 25); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",Navigator.pop); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:34.352123928 +0100\n+++ /tmp/tmpyd0z6gnq.java\t2023-03-24 12:17:34.352123928 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",Navigator.pop); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", new precedence.put(\"-\",2); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:36.012117996 +0100\n+++ /tmp/tmpo7usnj6s.java\t2023-03-24 12:17:36.012117996 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", new precedence.put(\"-\",2); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",1); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:37.744111804 +0100\n+++ /tmp/tmpa6c6lzwg.java\t2023-03-24 12:17:37.744111804 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",1); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", new precedence.put(operator; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:39.436105754 +0100\n+++ /tmp/tmprbzcbqx7.java\t2023-03-24 12:17:39.436105754 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", new precedence.put(operator; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",2 precedence.put(operator; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:41.056099960 +0100\n+++ /tmp/tmp41ndx_lc.java\t2023-03-24 12:17:41.056099960 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",2 precedence.put(operator; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:42.700094081 +0100\n+++ /tmp/tmpqwfozamb.java\t2023-03-24 12:17:42.704094064 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", query }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:44.276088442 +0100\n+++ /tmp/tmpwrdfypgd.java\t2023-03-24 12:17:44.276088442 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", query }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", proton.pop); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:45.904082613 +0100\n+++ /tmp/tmpi4x_2i25.java\t2023-03-24 12:17:45.904082613 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", proton.pop); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",2) token; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:47.592076572 +0100\n+++ /tmp/tmpt2_0h2v4.java\t2023-03-24 12:17:47.592076572 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",2) token; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", proton.pop()); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:49.260070602 +0100\n+++ /tmp/tmpvdxffpen.java\t2023-03-24 12:17:49.260070602 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", proton.pop()); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",8); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:50.948064556 +0100\n+++ /tmp/tmp5buip_g1.java\t2023-03-24 12:17:50.952064543 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",8); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", new precedence.pop()); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:52.596058653 +0100\n+++ /tmp/tmpp4u3qahq.java\t2023-03-24 12:17:52.596058653 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", new precedence.pop()); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",1) == precedence.getLast())) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:54.188052949 +0100\n+++ /tmp/tmpgp2s96w4.java\t2023-03-24 12:17:54.188052949 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",1) == precedence.getLast())) {\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",Matches; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:55.880046887 +0100\n+++ /tmp/tmpt0940ocy.java\t2023-03-24 12:17:55.880046887 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",Matches; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", messageType; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:57.524040995 +0100\n+++ /tmp/tmpthj1az1i.java\t2023-03-24 12:17:57.524040995 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", messageType; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",Cookientokens = eval; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:17:59.124035260 +0100\n+++ /tmp/tmp_fcw_f6g.java\t2023-03-24 12:17:59.124035260 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",Cookientokens = eval; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", infos); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:00.760029393 +0100\n+++ /tmp/tmpx8dvjms7.java\t2023-03-24 12:18:00.760029393 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", infos); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",2 precedence.getLast())) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:02.436023384 +0100\n+++ /tmp/tmpx65uqrfa.java\t2023-03-24 12:18:02.436023384 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",2 precedence.getLast())) {\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", setter; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:04.152017229 +0100\n+++ /tmp/tmp1lwz6svt.java\t2023-03-24 12:18:04.152017229 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", setter; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", new ArrayList.pop); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:05.844011159 +0100\n+++ /tmp/tmpk8n8l1aj.java\t2023-03-24 12:18:05.844011159 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", new ArrayList.pop); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",1)); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:07.528005116 +0100\n+++ /tmp/tmpi7ve63r9.java\t2023-03-24 12:18:07.532005102 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",1)); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", new selector); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:09.243998958 +0100\n+++ /tmp/tmpuvurejig.java\t2023-03-24 12:18:09.247998944 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", new selector); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",Cookientokens = static; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:10.967992769 +0100\n+++ /tmp/tmpnbt5rak0.java\t2023-03-24 12:18:10.971992757 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",Cookientokens = static; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",1\");",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:12.675986637 +0100\n+++ /tmp/tmpwov56i0i.java\t2023-03-24 12:18:12.675986637 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",1\");\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", supported; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:14.391980473 +0100\n+++ /tmp/tmp71xsu9vm.java\t2023-03-24 12:18:14.391980473 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", supported; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",da.pop); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:16.071974439 +0100\n+++ /tmp/tmpq413i53b.java\t2023-03-24 12:18:16.071974439 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",da.pop); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", field; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:17.735968463 +0100\n+++ /tmp/tmpgp7ypotf.java\t2023-03-24 12:18:17.735968463 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", field; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", Com.pop); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:19.403962468 +0100\n+++ /tmp/tmpirv4knqs.java\t2023-03-24 12:18:19.407962455 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", Com.pop); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", new precedence.getLast())) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:21.119956301 +0100\n+++ /tmp/tmpgyp3is40.java\t2023-03-24 12:18:21.119956301 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", new precedence.getLast())) {\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",2 precedence.getLast()))); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:22.751950435 +0100\n+++ /tmp/tmpuayq_08k.java\t2023-03-24 12:18:22.751950435 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",2 precedence.getLast()))); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", long.class); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:24.475944237 +0100\n+++ /tmp/tmprn5fflxd.java\t2023-03-24 12:18:24.475944237 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", long.class); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", reason; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:26.191938066 +0100\n+++ /tmp/tmp1wp53vam.java\t2023-03-24 12:18:26.191938066 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", reason; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", new precedence.put(\"2)){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:27.907931892 +0100\n+++ /tmp/tmpvvgt4a_f.java\t2023-03-24 12:18:27.907931892 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", new precedence.put(\"2)){\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", new precedence.getLast()))); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:29.547925990 +0100\n+++ /tmp/tmpmvxucu7d.java\t2023-03-24 12:18:29.547925990 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", new precedence.getLast()))); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",scheduler; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:31.227919945 +0100\n+++ /tmp/tmpfaojh11m.java\t2023-03-24 12:18:31.227919945 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",scheduler; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", new precedence.put(\"2",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:32.887913973 +0100\n+++ /tmp/tmpy7mlzmjt.java\t2023-03-24 12:18:32.891913956 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", new precedence.put(\"2\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", field.pop); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:34.587907852 +0100\n+++ /tmp/tmpjosk6fdr.java\t2023-03-24 12:18:34.587907852 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", field.pop); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", new precedence.put(operator, }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:36.279901760 +0100\n+++ /tmp/tmprqxfyeht.java\t2023-03-24 12:18:36.311901644 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", new precedence.put(operator, }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",UpperCase; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:37.935895797 +0100\n+++ /tmp/tmpiz93_fqi.java\t2023-03-24 12:18:37.935895797 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",UpperCase; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", Literals.pop); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:39.515890106 +0100\n+++ /tmp/tmpre9wr43r.java\t2023-03-24 12:18:39.515890106 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", Literals.pop); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",>\");",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:41.111884356 +0100\n+++ /tmp/tmpqdbn4t7t.java\t2023-03-24 12:18:41.111884356 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",>\");\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", infos; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:42.767878390 +0100\n+++ /tmp/tmp2wb7ar7u.java\t2023-03-24 12:18:42.771878377 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", infos; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", supported); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:44.415872450 +0100\n+++ /tmp/tmp4wfuvokz.java\t2023-03-24 12:18:44.415872450 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", supported); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",8; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:46.163866150 +0100\n+++ /tmp/tmpsx54t3u7.java\t2023-03-24 12:18:46.163866150 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",8; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", new selector.pop()); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:47.863860024 +0100\n+++ /tmp/tmpacurw653.java\t2023-03-24 12:18:47.867860007 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", new selector.pop()); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",32; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:49.507854093 +0100\n+++ /tmp/tmpqotpgldo.java\t2023-03-24 12:18:49.507854093 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",32; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",Navigator.pop()); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:51.159848135 +0100\n+++ /tmp/tmpwkezlv9s.java\t2023-03-24 12:18:51.159848135 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",Navigator.pop()); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",manifest; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:52.835842090 +0100\n+++ /tmp/tmpcvalozle.java\t2023-03-24 12:18:52.839842076 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",manifest; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", new precedence.put(\" 127",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:54.475836173 +0100\n+++ /tmp/tmpua2r3p8a.java\t2023-03-24 12:18:54.475836173 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", new precedence.put(\" 127\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", cls; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:56.171830056 +0100\n+++ /tmp/tmpcz2bmg51.java\t2023-03-24 12:18:56.171830056 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", cls; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", 3); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:57.935823687 +0100\n+++ /tmp/tmp_yr6u_4v.java\t2023-03-24 12:18:57.935823687 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", 3); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:18:59.587817726 +0100\n+++ /tmp/tmp_r1bte5_.java\t2023-03-24 12:18:59.587817726 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",2);\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", 100);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:01.543810661 +0100\n+++ /tmp/tmpu02v10ho.java\t2023-03-24 12:19:01.543810661 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", 100);\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", identifier; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:03.335804191 +0100\n+++ /tmp/tmpi3688q91.java\t2023-03-24 12:19:03.335804191 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", identifier; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",-1); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:04.983798238 +0100\n+++ /tmp/tmppkp96i7m.java\t2023-03-24 12:19:04.987798226 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",-1); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",2 precedence.put(\" 127",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:06.579792475 +0100\n+++ /tmp/tmplepahtkk.java\t2023-03-24 12:19:06.579792475 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",2 precedence.put(\" 127\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", static; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:08.123786894 +0100\n+++ /tmp/tmpw520urco.java\t2023-03-24 12:19:08.127786880 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", static; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",> precedence.getLast())) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:09.743781039 +0100\n+++ /tmp/tmpjsb2r1ph.java\t2023-03-24 12:19:09.743781039 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",> precedence.getLast())) {\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",scheduler); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:11.359775199 +0100\n+++ /tmp/tmpmkvn6f04.java\t2023-03-24 12:19:11.359775199 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",scheduler); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", 32) token; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:12.959769415 +0100\n+++ /tmp/tmpfnksv7lr.java\t2023-03-24 12:19:12.959769415 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", 32) token; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", new precedence); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:14.591763516 +0100\n+++ /tmp/tmpu28jyoul.java\t2023-03-24 12:19:14.591763516 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", new precedence); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",> precedence; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:16.179757774 +0100\n+++ /tmp/tmp9pezxj4z.java\t2023-03-24 12:19:16.179757774 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",> precedence; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",2 precedence.put(\"2",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:17.803751900 +0100\n+++ /tmp/tmpfkd862nm.java\t2023-03-24 12:19:17.803751900 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",2 precedence.put(\"2\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",1) token); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:19.431746011 +0100\n+++ /tmp/tmpgrvpqkdz.java\t2023-03-24 12:19:19.435745994 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",1) token); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", Allows; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:21.011740291 +0100\n+++ /tmp/tmpbh22898q.java\t2023-03-24 12:19:21.015740277 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", Allows; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",zoomFactor; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:22.579734617 +0100\n+++ /tmp/tmpdpprjdgc.java\t2023-03-24 12:19:22.583734603 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",zoomFactor; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",.\"); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:24.215728696 +0100\n+++ /tmp/tmpx_e_s4vr.java\t2023-03-24 12:19:24.215728696 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",.\"); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",218); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:25.823722878 +0100\n+++ /tmp/tmphxeq2npv.java\t2023-03-24 12:19:25.827722861 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",218); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", IN precedence; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:27.399717173 +0100\n+++ /tmp/tmpm4lo93pu.java\t2023-03-24 12:19:27.403717156 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", IN precedence; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\", new precedence",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:28.979711451 +0100\n+++ /tmp/tmpwr7ad1m4.java\t2023-03-24 12:19:28.979711451 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\", new precedence\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "precedence.put(\"+\",1); precedence.put(\"-\",.\");",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:30.603705567 +0100\n+++ /tmp/tmpuyr1c05t.java\t2023-03-24 12:19:30.603705567 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1); precedence.put(\"-\",.\");\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "precedence.put(\"+\",1) token; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:32.183699844 +0100\n+++ /tmp/tmpxy_e3q7x.java\t2023-03-24 12:19:32.183699844 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1) token; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "precedence.put(\"+\",1) token); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:33.747694179 +0100\n+++ /tmp/tmp8nx1o7fx.java\t2023-03-24 12:19:33.747694179 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1) token); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "precedence.put(\"+\",2); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:35.267688671 +0100\n+++ /tmp/tmpd6m_jtmp.java\t2023-03-24 12:19:35.271688657 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",2); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "precedence.put(\"+\",2) token; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:36.847682947 +0100\n+++ /tmp/tmp4smts82i.java\t2023-03-24 12:19:36.847682947 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",2) token; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "precedence.put(\"+\",2)) token; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:38.395677335 +0100\n+++ /tmp/tmpysffyt8p.java\t2023-03-24 12:19:38.399677322 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",2)) token; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "precedence.put(\"+\",1)) token; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:39.959671667 +0100\n+++ /tmp/tmp_kqwtox2.java\t2023-03-24 12:19:39.959671667 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1)) token; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "precedence.put(\"+\", 24, token); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:41.459666226 +0100\n+++ /tmp/tmp1ys06vlw.java\t2023-03-24 12:19:41.459666226 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\", 24, token); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "precedence.put(\"+\",LED; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:43.027660543 +0100\n+++ /tmp/tmp4vy9dw0f.java\t2023-03-24 12:19:43.027660543 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",LED; }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "precedence.put(\"+\",1)) token); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:44.575654927 +0100\n+++ /tmp/tmpjqybk3ni.java\t2023-03-24 12:19:44.575654927 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1)) token); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "precedence.put(\"+\",2)) token); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:46.123649312 +0100\n+++ /tmp/tmpyf4q04zw.java\t2023-03-24 12:19:46.123649312 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",2)) token); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "precedence.put(\"+\",1)); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:47.627643855 +0100\n+++ /tmp/tmph6ypcgfc.java\t2023-03-24 12:19:47.627643855 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",1)); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "precedence.put(\"+\", 2); }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:49.107638485 +0100\n+++ /tmp/tmp7hy0c24l.java\t2023-03-24 12:19:49.107638485 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\", 2); }\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "precedence.put(\"+\",()){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/shunting_yard/java_programs/SHUNTING_YARD.java\t2023-03-24 12:19:50.659632853 +0100\n+++ /tmp/tmpzy7cgvi0.java\t2023-03-24 12:19:50.659632853 +0100\n@@ -11,21 +11,11 @@\n  * @author derricklin\n  */\n public class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n         Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-        precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n-\n-        ArrayList rpntokens = new ArrayList(100);\n-        ArrayDeque opstack = new ArrayDeque();\n-\n-        for (Object token: tokens) {\n-            if (Integer.class.isInstance(token)) {\n-            // cover also Double case I guess?\n+precedence.put(\"+\",()){\n                 rpntokens.add((Integer) token);\n             } else {\n                 String operator = (String) token;\n                 while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                     rpntokens.add(opstack.pop());\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "precedence.put(\"+\", 1); precedence.put(\"-\", 1); precedence.put(\"*\", 2); precedence.put(\"/\", 2); ArrayList rpntokens = new ArrayList(100); ArrayDeque opstack = new ArrayDeque(); for (Object token : tokens) { if (Integer.class.isInstance(token)) { // cover also Double case I guess? rpntokens.add((Integer) token); } else { String operator = (String) token; while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) { rpntokens.add(opstack.pop()); } opstack.push(token); }"
    },
    "minimum_spanning_tree": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "groupByNode = node;groupByNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:02.331807818 +0100\n+++ /tmp/tmpuxehkbso.java\t2023-03-24 12:19:02.395807587 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node;groupByNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "groupByNode = nodeByNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:04.079801505 +0100\n+++ /tmp/tmpv5vft0i5.java\t2023-03-24 12:19:04.079801505 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeByNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "groupByNode = node,groupByNode, node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:05.799795292 +0100\n+++ /tmp/tmpmobn3t7b.java\t2023-03-24 12:19:05.799795292 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node,groupByNode, node;\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "groupByNode = update(groupByNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:07.591788815 +0100\n+++ /tmp/tmp9zrnwahr.java\t2023-03-24 12:19:07.591788815 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = update(groupByNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "groupByNode = node,groupByNode, node);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:09.479781993 +0100\n+++ /tmp/tmp964113q8.java\t2023-03-24 12:19:09.483781979 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node,groupByNode, node);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "groupByNode = node(groupByNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:11.215775719 +0100\n+++ /tmp/tmpt3bbwiwg.java\t2023-03-24 12:19:11.215775719 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node(groupByNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "groupByNode = update(node, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:12.979769343 +0100\n+++ /tmp/tmpanv2ofdb.java\t2023-03-24 12:19:12.979769343 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = update(node, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "groupByNode = update(node,groupByNode, node);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:14.651763299 +0100\n+++ /tmp/tmp00rp5stw.java\t2023-03-24 12:19:14.655763282 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = update(node,groupByNode, node);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "groupByNode = node nodeByNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:16.347757163 +0100\n+++ /tmp/tmp6kteqkzj.java\t2023-03-24 12:19:16.347757163 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node nodeByNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "groupByNode = node, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:17.991751218 +0100\n+++ /tmp/tmp07udodq9.java\t2023-03-24 12:19:17.991751218 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "groupByNode = node node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:19.575745488 +0100\n+++ /tmp/tmp41wswnnc.java\t2023-03-24 12:19:19.579745475 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node node;\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "groupByNode = update(node, node,groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:21.171739715 +0100\n+++ /tmp/tmpvm17vpm0.java\t2023-03-24 12:19:21.171739715 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = update(node, node,groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "groupByNode = node node,groupByNode, node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:22.855733620 +0100\n+++ /tmp/tmpyyhh3rir.java\t2023-03-24 12:19:22.859733607 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node node,groupByNode, node;\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "groupByNode = nodeAndNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:24.439727886 +0100\n+++ /tmp/tmp9q3e9xtf.java\t2023-03-24 12:19:24.439727886 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeAndNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "groupByNode = node node,groupByNode, node);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:26.047722065 +0100\n+++ /tmp/tmpn7p5h6oz.java\t2023-03-24 12:19:26.047722065 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node node,groupByNode, node);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "groupByNode = update(node,groupByNode, node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:27.667716200 +0100\n+++ /tmp/tmp0smufbtf.java\t2023-03-24 12:19:27.667716200 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = update(node,groupByNode, node;\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "groupByNode = node,groupByNode, vertex_u);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:29.279710363 +0100\n+++ /tmp/tmpvrlagam7.java\t2023-03-24 12:19:29.279710363 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node,groupByNode, vertex_u);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "groupByNode = node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:30.943704338 +0100\n+++ /tmp/tmpkxjoigek.java\t2023-03-24 12:19:30.943704338 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node;\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "groupByNode = node,groupByNode, node.id);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:32.671698077 +0100\n+++ /tmp/tmpa4eoznzn.java\t2023-03-24 12:19:32.671698077 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node,groupByNode, node.id);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "groupByNode = node nodeByNode,groupByNode, node);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:34.335692050 +0100\n+++ /tmp/tmpyuzysh0t.java\t2023-03-24 12:19:34.335692050 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node nodeByNode,groupByNode, node);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "groupByNode = node nodeAndNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:35.939686236 +0100\n+++ /tmp/tmpp3jnom7b.java\t2023-03-24 12:19:35.939686236 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node nodeAndNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "groupByNode = node,groupByNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:37.523680496 +0100\n+++ /tmp/tmpw9ojb4_h.java\t2023-03-24 12:19:37.523680496 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node,groupByNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "groupByNode = node instanceofgroupByNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:39.083674841 +0100\n+++ /tmp/tmp1uu7nrxv.java\t2023-03-24 12:19:39.083674841 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node instanceofgroupByNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "groupByNode = node;groupByNode, node, groupByNode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:40.619669272 +0100\n+++ /tmp/tmp1a1ni6f6.java\t2023-03-24 12:19:40.623669258 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node;groupByNode, node, groupByNode));\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "groupByNode = nodeToNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:42.299663181 +0100\n+++ /tmp/tmpoo0awtk3.java\t2023-03-24 12:19:42.303663168 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeToNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "groupByNode = nodeListNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:43.927657277 +0100\n+++ /tmp/tmp458kb89n.java\t2023-03-24 12:19:43.927657277 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeListNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "groupByNode = node nodeByNode,groupByNode, node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:45.439651792 +0100\n+++ /tmp/tmpkuo_h2za.java\t2023-03-24 12:19:45.439651792 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node nodeByNode,groupByNode, node;\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "groupByNode = node,groupByNode,vertex_u);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:46.971646235 +0100\n+++ /tmp/tmp1bzxovfv.java\t2023-03-24 12:19:46.971646235 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node,groupByNode,vertex_u);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "groupByNode = node node,groupByNode, vertex_u);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:48.571640430 +0100\n+++ /tmp/tmpx6mt7g_9.java\t2023-03-24 12:19:48.571640430 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node node,groupByNode, vertex_u);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "groupByNode = node <groupByNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:50.195634537 +0100\n+++ /tmp/tmpdhkkrvoi.java\t2023-03-24 12:19:50.195634537 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node <groupByNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "groupByNode = node.groupByNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:51.767628834 +0100\n+++ /tmp/tmp8buv6ns6.java\t2023-03-24 12:19:51.771628817 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node.groupByNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "groupByNode = node,groupByNode, node.id;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:53.515622486 +0100\n+++ /tmp/tmpmshzrdrt.java\t2023-03-24 12:19:53.515622486 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node,groupByNode, node.id;\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "groupByNode = node node,groupByNode, node.id);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:55.243616214 +0100\n+++ /tmp/tmp123_ag0y.java\t2023-03-24 12:19:55.243616214 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node node,groupByNode, node.id);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "groupByNode = node) updateByNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:56.871610304 +0100\n+++ /tmp/tmpoq72tstx.java\t2023-03-24 12:19:56.871610304 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node) updateByNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "groupByNode = node,groupByNode, node.c);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:19:58.483604448 +0100\n+++ /tmp/tmppp2ypavg.java\t2023-03-24 12:19:58.483604448 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node,groupByNode, node.c);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "groupByNode = node, node,groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:00.151598389 +0100\n+++ /tmp/tmp1mn0h5n3.java\t2023-03-24 12:20:00.151598389 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node, node,groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "groupByNode = nodeWithNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:01.739592620 +0100\n+++ /tmp/tmpi_qnzwud.java\t2023-03-24 12:20:01.739592620 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeWithNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "groupByNode = nodeMap,groupByNode, node);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:03.375586676 +0100\n+++ /tmp/tmpbthtl9hl.java\t2023-03-24 12:20:03.375586676 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeMap,groupByNode, node);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "groupByNode = node._groupByNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:04.923581051 +0100\n+++ /tmp/tmpnoghn7e7.java\t2023-03-24 12:20:04.923581051 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node._groupByNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "groupByNode = node node,groupByNode,vertex_u);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:06.483575384 +0100\n+++ /tmp/tmp0sjiujkh.java\t2023-03-24 12:20:06.483575384 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node node,groupByNode,vertex_u);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "groupByNode = node,groupByNode, node.y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:07.999569871 +0100\n+++ /tmp/tmpo4p4ddoq.java\t2023-03-24 12:20:08.003569857 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node,groupByNode, node.y);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "groupByNode = node, treeByNode, node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:09.559564200 +0100\n+++ /tmp/tmp48q9o69g.java\t2023-03-24 12:20:09.563564187 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node, treeByNode, node;\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "groupByNode = node;groupByNode, node, groupByNode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:11.099558602 +0100\n+++ /tmp/tmppy7f_z56.java\t2023-03-24 12:20:11.099558602 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node;groupByNode, node, groupByNode;\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "groupByNode = node nodeListNode,groupByNode, node);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:12.643552987 +0100\n+++ /tmp/tmpbt0qlq02.java\t2023-03-24 12:20:12.643552987 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node nodeListNode,groupByNode, node);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "groupByNode = node,groupByNode, node.value);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:14.211547282 +0100\n+++ /tmp/tmphj2efcxv.java\t2023-03-24 12:20:14.215547268 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node,groupByNode, node.value);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "groupByNode = node, vertex_u, nodeByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:15.859541287 +0100\n+++ /tmp/tmp9h1ql47g.java\t2023-03-24 12:20:15.863541273 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node, vertex_u, nodeByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "groupByNode = node nodeByNode,groupByNode, null);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:17.487535364 +0100\n+++ /tmp/tmpld5tb5ct.java\t2023-03-24 12:20:17.487535364 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node nodeByNode,groupByNode, null);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "groupByNode = node,groupByNode, node) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:19.087529543 +0100\n+++ /tmp/tmptvbkt4oh.java\t2023-03-24 12:20:19.087529543 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node,groupByNode, node) {\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "groupByNode = nodeByNode,groupByNode, node);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:20.655523839 +0100\n+++ /tmp/tmpjfat133i.java\t2023-03-24 12:20:20.659523821 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeByNode,groupByNode, node);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "groupByNode = nodeByNode, node,vertex_u);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:22.255518012 +0100\n+++ /tmp/tmpo9oejh4q.java\t2023-03-24 12:20:22.255518012 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeByNode, node,vertex_u);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "groupByNode = update(node,groupByNode, node) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:23.835512261 +0100\n+++ /tmp/tmp10szk850.java\t2023-03-24 12:20:23.839512247 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = update(node,groupByNode, node) {\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "groupByNode = nodeResourceNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:25.471506305 +0100\n+++ /tmp/tmpxpqjlyvf.java\t2023-03-24 12:20:25.471506305 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeResourceNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "groupByNode = node,groupByNode, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:27.147500202 +0100\n+++ /tmp/tmpt5va0upz.java\t2023-03-24 12:20:27.175500100 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node,groupByNode, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "groupByNode = nodeAnnotationNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:28.739494406 +0100\n+++ /tmp/tmp_bdjf0ds.java\t2023-03-24 12:20:28.739494406 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeAnnotationNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "groupByNode = nodeIndexNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:30.275488809 +0100\n+++ /tmp/tmpmn9pkl54.java\t2023-03-24 12:20:30.275488809 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeIndexNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "groupByNode = nodeInputByNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:31.887482937 +0100\n+++ /tmp/tmp2tq4q58a.java\t2023-03-24 12:20:31.891482924 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeInputByNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "groupByNode = node.startNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:38.367459324 +0100\n+++ /tmp/tmpbchiailm.java\t2023-03-24 12:20:38.367459324 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node.startNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "groupByNode = update(node, node,vertex_u);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:47.123427393 +0100\n+++ /tmp/tmp67pm88i1.java\t2023-03-24 12:20:47.123427393 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = update(node, node,vertex_u);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "groupByNode = node;groupByNode, node, elementNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:20:56.875391799 +0100\n+++ /tmp/tmpr6d6tao5.java\t2023-03-24 12:20:56.875391799 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node;groupByNode, node, elementNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "groupByNode = node,groupByNode, node.u);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:21:05.863358969 +0100\n+++ /tmp/tmp68cq9f2e.java\t2023-03-24 12:21:05.863358969 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node,groupByNode, node.u);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "groupByNode = node,groupByNode, node.value;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:21:15.187324887 +0100\n+++ /tmp/tmp_ijriz_n.java\t2023-03-24 12:21:15.195324857 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node,groupByNode, node.value;\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "groupByNode = nodeSpanNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:21:24.399291189 +0100\n+++ /tmp/tmpxld_37ne.java\t2023-03-24 12:21:24.399291189 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeSpanNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "groupByNode = groupByNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:21:33.255258766 +0100\n+++ /tmp/tmpny8kt5wq.java\t2023-03-24 12:21:33.255258766 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = groupByNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "groupByNode = node node node,groupByNode, node);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:21:41.759227615 +0100\n+++ /tmp/tmptdomfdga.java\t2023-03-24 12:21:41.759227615 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node node node,groupByNode, node);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "groupByNode = nodeRawNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:21:50.691194870 +0100\n+++ /tmp/tmp2v1hmibz.java\t2023-03-24 12:21:50.691194870 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeRawNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "groupByNode = nodeMap, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:21:58.715165438 +0100\n+++ /tmp/tmpyds17xz6.java\t2023-03-24 12:21:58.715165438 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeMap, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "groupByNode = node node node,groupByNode, node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:22:06.939135249 +0100\n+++ /tmp/tmpltwo7cl5.java\t2023-03-24 12:22:06.939135249 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node node node,groupByNode, node;\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "groupByNode = nodeToNonNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:22:14.943105853 +0100\n+++ /tmp/tmpi4f7nfmq.java\t2023-03-24 12:22:14.943105853 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeToNonNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "groupByNode = nodeTaskNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:22:22.459078236 +0100\n+++ /tmp/tmpv0iyhjxd.java\t2023-03-24 12:22:22.459078236 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeTaskNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "groupByNode = nodeModelNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:22:30.091050172 +0100\n+++ /tmp/tmp9f8osyre.java\t2023-03-24 12:22:30.091050172 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeModelNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "groupByNode = node node,groupByNode, node.c);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:22:37.371023391 +0100\n+++ /tmp/tmpx2f5d044.java\t2023-03-24 12:22:37.379023361 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node node,groupByNode, node.c);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "groupByNode = node nodeNode,groupByNode, node);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:22:44.242998101 +0100\n+++ /tmp/tmpw5a7rkck.java\t2023-03-24 12:22:44.242998101 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node nodeNode,groupByNode, node);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "groupByNode = node processNode,groupByNode, node);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:22:50.586974739 +0100\n+++ /tmp/tmp8jbva5eb.java\t2023-03-24 12:22:50.586974739 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node processNode,groupByNode, node);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "groupByNode = nodeListNode,groupByNode, node);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:22:56.478953034 +0100\n+++ /tmp/tmpu1pb8z_d.java\t2023-03-24 12:22:56.478953034 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeListNode,groupByNode, node);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "groupByNode = nodeByNode,groupByNode, node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:23:02.666930233 +0100\n+++ /tmp/tmpi4t3hc0u.java\t2023-03-24 12:23:02.666930233 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeByNode,groupByNode, node;\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "groupByNode = node;groupByNode, node, entityManagerNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:23:08.526908626 +0100\n+++ /tmp/tmp03znwipt.java\t2023-03-24 12:23:08.526908626 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node;groupByNode, node, entityManagerNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "groupByNode = node(node,groupByNode, node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:23:14.458886751 +0100\n+++ /tmp/tmpnzvqec8l.java\t2023-03-24 12:23:14.458886751 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node(node,groupByNode, node;\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "groupByNode = node;groupByNode, node, groupByNode,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:23:19.970866414 +0100\n+++ /tmp/tmp4snc0zii.java\t2023-03-24 12:23:19.970866414 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node;groupByNode, node, groupByNode,\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "groupByNode = nodeIncludesNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:23:25.586845680 +0100\n+++ /tmp/tmp0j3ox2p9.java\t2023-03-24 12:23:25.586845680 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeIncludesNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "groupByNode = nodeExpressionNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:23:31.210824915 +0100\n+++ /tmp/tmpu3ej60nh.java\t2023-03-24 12:23:31.218824885 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeExpressionNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "groupByNode = node processNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:23:36.898803908 +0100\n+++ /tmp/tmpirb7oss_.java\t2023-03-24 12:23:36.898803908 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node processNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "groupByNode = update(groupByNode, node, groupByNode));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:23:42.530783099 +0100\n+++ /tmp/tmplq4cx164.java\t2023-03-24 12:23:42.530783099 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = update(groupByNode, node, groupByNode));\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "groupByNode = node node,groupByNode, node.id;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:23:48.194762165 +0100\n+++ /tmp/tmp8ochp6ec.java\t2023-03-24 12:23:48.194762165 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node node,groupByNode, node.id;\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "groupByNode = node, nodeByNode, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:23:53.778741520 +0100\n+++ /tmp/tmp2p5odl3i.java\t2023-03-24 12:23:53.778741520 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node, nodeByNode, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "groupByNode = nodeMap,groupByNode, node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:23:59.322721015 +0100\n+++ /tmp/tmp1hjm34uj.java\t2023-03-24 12:23:59.322721015 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeMap,groupByNode, node;\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "groupByNode = node(node,groupByNode, node);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:24:04.670701230 +0100\n+++ /tmp/tmp6mx11kxq.java\t2023-03-24 12:24:04.670701230 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node(node,groupByNode, node);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "groupByNode = node;groupByNode, node, joinRequired",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:24:09.190684502 +0100\n+++ /tmp/tmp2bg_4gu_.java\t2023-03-24 12:24:09.190684502 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node;groupByNode, node, joinRequired\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "groupByNode = node nodeNode,groupByNode, node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:24:13.546668379 +0100\n+++ /tmp/tmp8sygqx6b.java\t2023-03-24 12:24:13.546668379 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node nodeNode,groupByNode, node;\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "groupByNode = nodeSqlNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:24:17.626653273 +0100\n+++ /tmp/tmp6z4gxujh.java\t2023-03-24 12:24:17.626653273 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeSqlNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "groupByNode = node2Node, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:24:21.786637865 +0100\n+++ /tmp/tmp405l15t2.java\t2023-03-24 12:24:21.786637865 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node2Node, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "groupByNode = nodeHandleNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:24:25.934622501 +0100\n+++ /tmp/tmpi52izqte.java\t2023-03-24 12:24:25.934622501 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeHandleNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "groupByNode = node node,groupByNode, node.value);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:24:29.530609176 +0100\n+++ /tmp/tmpzk49a19b.java\t2023-03-24 12:24:29.534609162 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node node,groupByNode, node.value);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "groupByNode = node nodeListNode,groupByNode, node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:24:33.298595213 +0100\n+++ /tmp/tmpc5tcmnm5.java\t2023-03-24 12:24:33.298595213 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node nodeListNode,groupByNode, node;\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "groupByNode = node nodeAndNode,groupByNode, node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:24:36.898581869 +0100\n+++ /tmp/tmpa25p71b3.java\t2023-03-24 12:24:36.898581869 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node nodeAndNode,groupByNode, node;\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "groupByNode = node node,groupByNode, node.y);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:24:40.342569101 +0100\n+++ /tmp/tmph_bkwpoo.java\t2023-03-24 12:24:40.342569101 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node node,groupByNode, node.y);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "groupByNode = nodeElementNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:24:43.746556480 +0100\n+++ /tmp/tmprt6igrv1.java\t2023-03-24 12:24:43.746556480 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeElementNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "groupByNode = nodeSupportNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:24:47.270543411 +0100\n+++ /tmp/tmpg17u3fj5.java\t2023-03-24 12:24:47.270543411 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodeSupportNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "groupByNode = node;groupByNode, node, joinRequired);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:24:50.586531110 +0100\n+++ /tmp/tmptsqjjcfj.java\t2023-03-24 12:24:50.586531110 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = node;groupByNode, node, joinRequired);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "groupByNode = nodelinkNode, node, groupByNode);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:24:53.454520471 +0100\n+++ /tmp/tmpnajyx1ls.java\t2023-03-24 12:24:53.454520471 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = nodelinkNode, node, groupByNode);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "groupByNode = update( node,groupByNode, node);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/minimum_spanning_tree/java_programs/MINIMUM_SPANNING_TREE.java\t2023-03-24 12:24:56.114510599 +0100\n+++ /tmp/tmpx181830r.java\t2023-03-24 12:24:56.114510599 +0100\n@@ -23,11 +23,11 @@\n \n             if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                 minSpanningTree.add(edge);\n                 groupByNode = update(groupByNode, vertex_u, vertex_v);\n                 for (Node node : groupByNode.get(vertex_v)) {\n-                    groupByNode = update(groupByNode, node, vertex_u);\n+groupByNode = update( node,groupByNode, node);\n                 }\n             }\n         }\n         return minSpanningTree;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "groupByNode.put(node, groupByNode.get(vertex_u));"
    },
    "kth": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "return kth(k, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:19:54.119620296 +0100\n+++ /tmp/tmp8i5jfr7g.java\t2023-03-24 12:19:54.155620164 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "return kth(above, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:19:55.771614298 +0100\n+++ /tmp/tmpo8sod55r.java\t2023-03-24 12:19:55.771614298 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(above, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "return kth(below, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:19:59.407601091 +0100\n+++ /tmp/tmp3607rxd5.java\t2023-03-24 12:19:59.407601091 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(below, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "return kth( metadata, kth",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:03.127587578 +0100\n+++ /tmp/tmp249nb9l1.java\t2023-03-24 12:20:03.127587578 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( metadata, kth\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "return kth(above, k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:04.659582010 +0100\n+++ /tmp/tmp7r1_iyew.java\t2023-03-24 12:20:04.659582010 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(above, k;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "return kth(k, k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:06.239576268 +0100\n+++ /tmp/tmp1wdknn5d.java\t2023-03-24 12:20:06.239576268 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, k;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "return kth(k, w);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:07.731570846 +0100\n+++ /tmp/tmpn5rrlcox.java\t2023-03-24 12:20:07.731570846 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, w);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "return kth(Util, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:09.331565031 +0100\n+++ /tmp/tmpin2vhelw.java\t2023-03-24 12:20:09.331565031 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(Util, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "return kth(above, k/2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:10.987559007 +0100\n+++ /tmp/tmpbfftikek.java\t2023-03-24 12:20:10.987559007 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(above, k/2);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "return kth(below, k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:14.723545420 +0100\n+++ /tmp/tmpzun70ton.java\t2023-03-24 12:20:14.723545420 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(below, k;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "return kth(above, kth",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:16.239539905 +0100\n+++ /tmp/tmpsstppqks.java\t2023-03-24 12:20:16.243539891 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(above, kth\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "return kth( converter, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:17.711534552 +0100\n+++ /tmp/tmp_qfn92cm.java\t2023-03-24 12:20:17.711534552 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( converter, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "return kth(k, kth",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:19.303528759 +0100\n+++ /tmp/tmp6cnv8dn4.java\t2023-03-24 12:20:19.303528759 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, kth\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "return kth( ids, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:20.827523211 +0100\n+++ /tmp/tmpi_amof5o.java\t2023-03-24 12:20:20.831523198 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( ids, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "return kth( already, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:22.451517301 +0100\n+++ /tmp/tmpvwzoylgh.java\t2023-03-24 12:20:22.455517284 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( already, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "return kth(k, j);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:24.027511564 +0100\n+++ /tmp/tmphupe40lu.java\t2023-03-24 12:20:24.027511564 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, j);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "return kth(COMMAND, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:25.607505809 +0100\n+++ /tmp/tmpvvnw_wpj.java\t2023-03-24 12:20:25.607505809 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(COMMAND, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "return kth(module, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:27.203500000 +0100\n+++ /tmp/tmp232soh_b.java\t2023-03-24 12:20:27.203500000 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(module, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "return kth(3.0, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:28.827494083 +0100\n+++ /tmp/tmp4vjcl2xw.java\t2023-03-24 12:20:28.827494083 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(3.0, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "return kth(Offerq, kth",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:30.363488489 +0100\n+++ /tmp/tmpi8a6f14y.java\t2023-03-24 12:20:30.363488489 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(Offerq, kth\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "return kth( decl, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:31.863483026 +0100\n+++ /tmp/tmpvcrwc22o.java\t2023-03-24 12:20:31.863483026 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( decl, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "return kth(above, k/2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:39.051456828 +0100\n+++ /tmp/tmp875yw_x1.java\t2023-03-24 12:20:39.051456828 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(above, k/2;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "return kth(k, i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:47.847424749 +0100\n+++ /tmp/tmp_y66_p16.java\t2023-03-24 12:20:47.847424749 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, i;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "return kth(COLUMNS, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:20:57.087391027 +0100\n+++ /tmp/tmpheyk0e5m.java\t2023-03-24 12:20:57.095390996 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(COLUMNS, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "return kth(k, pivot);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:21:05.571360037 +0100\n+++ /tmp/tmpyeh1eh90.java\t2023-03-24 12:21:05.579360007 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, pivot);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "return kth(k, resourceId);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:21:14.687326717 +0100\n+++ /tmp/tmpxvxqm2l0.java\t2023-03-24 12:21:14.687326717 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, resourceId);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "return kth(mask, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:21:22.815296983 +0100\n+++ /tmp/tmpn672xgxu.java\t2023-03-24 12:21:22.815296983 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(mask, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "return kth(GROUP, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:21:31.867263849 +0100\n+++ /tmp/tmp0easc9xy.java\t2023-03-24 12:21:31.867263849 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(GROUP, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "return kth( Sampleq, kth",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:21:40.779231204 +0100\n+++ /tmp/tmplzlvkx67.java\t2023-03-24 12:21:40.779231204 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( Sampleq, kth\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "return kth( one, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:21:49.139200560 +0100\n+++ /tmp/tmpsgi1ea89.java\t2023-03-24 12:21:49.139200560 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( one, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "return kth(ArrayType, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:21:57.351170440 +0100\n+++ /tmp/tmp6shs2m91.java\t2023-03-24 12:21:57.351170440 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(ArrayType, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "return kth(LOGICAL, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:22:05.119141934 +0100\n+++ /tmp/tmpck9kc1bo.java\t2023-03-24 12:22:05.119141934 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(LOGICAL, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "return kth(k, log);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:22:13.275111983 +0100\n+++ /tmp/tmpgr6bw9m4.java\t2023-03-24 12:22:13.275111983 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, log);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "return kth( Compressionq, kth",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:22:21.039083456 +0100\n+++ /tmp/tmplfsowa8n.java\t2023-03-24 12:22:21.043083438 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( Compressionq, kth\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "return kth(automq, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:22:29.123053732 +0100\n+++ /tmp/tmpee1kr22j.java\t2023-03-24 12:22:29.123053732 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(automq, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "return kth( decl, k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:22:36.679025940 +0100\n+++ /tmp/tmpffh60dju.java\t2023-03-24 12:22:36.679025940 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( decl, k;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "return kth( If, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:22:43.275001662 +0100\n+++ /tmp/tmpnehpf0wm.java\t2023-03-24 12:22:43.275001662 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( If, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "return kth(k, mask;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:22:50.090976568 +0100\n+++ /tmp/tmp_imsohkl.java\t2023-03-24 12:22:50.090976568 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, mask;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "return kth( partial, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:22:55.982954861 +0100\n+++ /tmp/tmp22q32msj.java\t2023-03-24 12:22:55.982954861 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( partial, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "return kth(k, modifiable);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:23:01.706933769 +0100\n+++ /tmp/tmp87robz3m.java\t2023-03-24 12:23:01.706933769 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, modifiable);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "return kth( alreadyq, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:23:07.554912210 +0100\n+++ /tmp/tmprd329l3g.java\t2023-03-24 12:23:07.554912210 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( alreadyq, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "return kth(k, reason);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:23:13.302891015 +0100\n+++ /tmp/tmp2ue0whvk.java\t2023-03-24 12:23:13.302891015 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, reason);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "return kth( 7, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:23:19.078869703 +0100\n+++ /tmp/tmpaf31wbgp.java\t2023-03-24 12:23:19.078869703 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( 7, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "return kth( ids, kth",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:23:24.998847851 +0100\n+++ /tmp/tmpigs8tpbg.java\t2023-03-24 12:23:24.998847851 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( ids, kth\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "return kth( comparator, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:23:30.374828003 +0100\n+++ /tmp/tmp5h_412ic.java\t2023-03-24 12:23:30.374828003 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( comparator, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "return kth(MSG, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:23:36.270806227 +0100\n+++ /tmp/tmptfglo6xi.java\t2023-03-24 12:23:36.274806211 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(MSG, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "return kthPaneq, kth",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:23:41.770785906 +0100\n+++ /tmp/tmplb5p0m1u.java\t2023-03-24 12:23:41.770785906 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kthPaneq, kth\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "return kth(v, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:23:47.406765078 +0100\n+++ /tmp/tmpog1sbtpa.java\t2023-03-24 12:23:47.406765078 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(v, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "return kth( incr, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:23:53.078744107 +0100\n+++ /tmp/tmpdjxzr3ib.java\t2023-03-24 12:23:53.078744107 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( incr, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "return kth( grouping, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:23:58.682723382 +0100\n+++ /tmp/tmpfxv53p1i.java\t2023-03-24 12:23:58.686723368 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( grouping, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "return kth( does, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:24:04.342702443 +0100\n+++ /tmp/tmpnhjpi1qc.java\t2023-03-24 12:24:04.342702443 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( does, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "return kth(below, kth",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:24:08.894685598 +0100\n+++ /tmp/tmpy6okzhxv.java\t2023-03-24 12:24:08.898685583 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(below, kth\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "return kth( ids, k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:24:13.226669562 +0100\n+++ /tmp/tmp2masl_wd.java\t2023-03-24 12:24:13.226669562 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( ids, k;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "return kth(detect, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:24:16.886656012 +0100\n+++ /tmp/tmpib8q64mq.java\t2023-03-24 12:24:16.886656012 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(detect, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "return kth( metadata, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:24:20.898641154 +0100\n+++ /tmp/tmpmrrtu86r.java\t2023-03-24 12:24:20.898641154 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( metadata, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "return kth(k, pp);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:24:25.458624264 +0100\n+++ /tmp/tmp2_8vnaac.java\t2023-03-24 12:24:25.458624264 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, pp);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "return kth(Util, k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:24:29.282610095 +0100\n+++ /tmp/tmp1jzvwo2o.java\t2023-03-24 12:24:29.314609978 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(Util, k;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "return kth( level, kth",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:24:33.122595866 +0100\n+++ /tmp/tmp1chu6bl1.java\t2023-03-24 12:24:33.122595866 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( level, kth\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "return kth( includes, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:24:36.178584538 +0100\n+++ /tmp/tmp9cvan5c_.java\t2023-03-24 12:24:36.262584227 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( includes, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "return kth( when, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:24:40.038570228 +0100\n+++ /tmp/tmpos96s8uo.java\t2023-03-24 12:24:40.038570228 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( when, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "return kth(k, row);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:24:43.714556599 +0100\n+++ /tmp/tmpbyofpmc1.java\t2023-03-24 12:24:43.714556599 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, row);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "return kth( vi, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:24:47.254543470 +0100\n+++ /tmp/tmpry94b8ev.java\t2023-03-24 12:24:47.254543470 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( vi, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "return kth(k, target);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:24:50.542531273 +0100\n+++ /tmp/tmpli1j1b5e.java\t2023-03-24 12:24:50.542531273 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, target);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "return kth(64\", k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:24:53.406520647 +0100\n+++ /tmp/tmpxve7otf4.java\t2023-03-24 12:24:53.406520647 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(64\", k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "return kth(63, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:24:55.922511312 +0100\n+++ /tmp/tmp3q6z909m.java\t2023-03-24 12:24:55.922511312 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(63, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "return kth( converter, k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:24:58.414502064 +0100\n+++ /tmp/tmp2f6zsrtt.java\t2023-03-24 12:24:58.414502064 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( converter, k;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "return kth( CR, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:01.242491568 +0100\n+++ /tmp/tmpxd6qo44v.java\t2023-03-24 12:25:01.242491568 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( CR, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "return kth(k, pivot;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:03.974481428 +0100\n+++ /tmp/tmp2fex54l_.java\t2023-03-24 12:25:03.974481428 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, pivot;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "return kth( cycles, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:05.838474508 +0100\n+++ /tmp/tmpunawc32g.java\t2023-03-24 12:25:05.838474508 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( cycles, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "return kth( Confirm, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:07.950466665 +0100\n+++ /tmp/tmpivof_wcy.java\t2023-03-24 12:25:07.950466665 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( Confirm, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "return kth(k, 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:10.046458883 +0100\n+++ /tmp/tmpzq6ker2i.java\t2023-03-24 12:25:10.046458883 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, 1;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "return kth( parsing, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:11.894452019 +0100\n+++ /tmp/tmprso0vg23.java\t2023-03-24 12:25:11.898452005 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( parsing, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "return kth(k, nestedName);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:13.878444651 +0100\n+++ /tmp/tmpppxvxnog.java\t2023-03-24 12:25:13.878444651 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, nestedName);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "return kth(Jar, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:15.802437504 +0100\n+++ /tmp/tmpp372ku6a.java\t2023-03-24 12:25:15.806437490 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(Jar, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "return kth( looking, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:17.830429971 +0100\n+++ /tmp/tmpek64ke1s.java\t2023-03-24 12:25:17.834429956 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( looking, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "return kth( Bookmark, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:19.890422318 +0100\n+++ /tmp/tmpn5kqj_2j.java\t2023-03-24 12:25:19.890422318 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( Bookmark, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "return kth( INFO, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:21.786415274 +0100\n+++ /tmp/tmph1x71z0j.java\t2023-03-24 12:25:21.786415274 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( INFO, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "return kth(SerializedSize, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:23.774407887 +0100\n+++ /tmp/tmp1w6_jcip.java\t2023-03-24 12:25:23.774407887 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(SerializedSize, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "return kth( action, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:25.730400617 +0100\n+++ /tmp/tmp9dgbegfc.java\t2023-03-24 12:25:25.734400603 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( action, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "return kth( alreadyq, kth",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:27.730393185 +0100\n+++ /tmp/tmp3wodm_16.java\t2023-03-24 12:25:27.730393185 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( alreadyq, kth\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "return kth(k, previousMiddle;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:29.698385869 +0100\n+++ /tmp/tmpku17157a.java\t2023-03-24 12:25:29.698385869 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, previousMiddle;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "return kth(Offerq, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:31.710378391 +0100\n+++ /tmp/tmp95oodpa7.java\t2023-03-24 12:25:31.710378391 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(Offerq, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "return kth(COLUMNS, kth",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:33.674371088 +0100\n+++ /tmp/tmptgarqf8d.java\t2023-03-24 12:25:33.674371088 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(COLUMNS, kth\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "return kth(k, previousMiddle",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:35.518364233 +0100\n+++ /tmp/tmpx6swwnck.java\t2023-03-24 12:25:35.518364233 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, previousMiddle\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "return kth( 32, kth",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:37.358357392 +0100\n+++ /tmp/tmph7ehv52d.java\t2023-03-24 12:25:37.362357376 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( 32, kth\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "return kth( Compressionq, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:39.142350757 +0100\n+++ /tmp/tmpx7srzsy7.java\t2023-03-24 12:25:39.146350741 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( Compressionq, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "return kth(LOGICAL, kth",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:41.070343587 +0100\n+++ /tmp/tmpib460ihp.java\t2023-03-24 12:25:41.070343587 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(LOGICAL, kth\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "return kth( Sampleq, k);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:42.946336610 +0100\n+++ /tmp/tmp78qiekog.java\t2023-03-24 12:25:42.946336610 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( Sampleq, k);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "return kth(COLUMNS, k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:44.930329229 +0100\n+++ /tmp/tmpz79kdr79.java\t2023-03-24 12:25:44.930329229 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(COLUMNS, k;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "return kth(automq, kth",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:46.794322296 +0100\n+++ /tmp/tmpaw_ufpwj.java\t2023-03-24 12:25:46.794322296 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(automq, kth\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "return kth(k, nestedName));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:48.674315300 +0100\n+++ /tmp/tmp5vtxjdy1.java\t2023-03-24 12:25:48.674315300 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, nestedName));\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "return kth(above, kth;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:50.478308589 +0100\n+++ /tmp/tmpyj6ngx9_.java\t2023-03-24 12:25:50.478308589 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(above, kth;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "return kth(LOGICAL, k;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:52.274301905 +0100\n+++ /tmp/tmp947ks477.java\t2023-03-24 12:25:52.274301905 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(LOGICAL, k;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "return kth(k, nestedName;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:54.178294821 +0100\n+++ /tmp/tmpj_tyeypp.java\t2023-03-24 12:25:54.182294805 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, nestedName;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "return kth(k, nestedJar);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:56.098287675 +0100\n+++ /tmp/tmpszs1mfeh.java\t2023-03-24 12:25:56.098287675 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, nestedJar);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "return kth( 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:58.014280544 +0100\n+++ /tmp/tmpp7pns5uw.java\t2023-03-24 12:25:58.018280528 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth( 1;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "return kth(k, previousMiddle);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:25:59.778273977 +0100\n+++ /tmp/tmponu0na2h.java\t2023-03-24 12:25:59.778273977 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(k, previousMiddle);\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "return kth;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:26:01.574267290 +0100\n+++ /tmp/tmp7cbzi2mg.java\t2023-03-24 12:26:01.574267290 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth;\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "return kth(\");",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:26:03.442260337 +0100\n+++ /tmp/tmphrs114xh.java\t2023-03-24 12:26:03.442260337 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth(\");\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "return kth",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/kth/java_programs/KTH.java\t2023-03-24 12:26:05.106254142 +0100\n+++ /tmp/tmpqfe6_frp.java\t2023-03-24 12:26:05.106254142 +0100\n@@ -27,11 +27,11 @@\n         int num_less = below.size();\n         int num_lessoreq = arr.size() - above.size();\n         if (k < num_less) {\n             return kth(below, k);\n         } else if (k >= num_lessoreq) {\n-            return kth(above, k);\n+return kth\n         } else {\n             return pivot;\n         }\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "return kth(above, k-num_lessoreq);"
    },
    "wrap": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "if (line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:02.430487158 +0100\n+++ /tmp/tmpd4ltafbh.java\t2023-03-24 12:25:02.494486920 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": ";",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:04.654478903 +0100\n+++ /tmp/tmp74dvljor.java\t2023-03-24 12:25:04.654478903 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "if (text;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:09.386461334 +0100\n+++ /tmp/tmpicxm4zdt.java\t2023-03-24 12:25:09.390461318 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (text;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "if (prev) line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:11.342454069 +0100\n+++ /tmp/tmpz3j3sp9o.java\t2023-03-24 12:25:11.342454069 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (prev) line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "if (completed) text;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:13.378446509 +0100\n+++ /tmp/tmpk6wym6sr.java\t2023-03-24 12:25:13.382446493 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (completed) text;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "if (text) lines;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:15.370439109 +0100\n+++ /tmp/tmp4c3f7g7f.java\t2023-03-24 12:25:15.370439109 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (text) lines;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:17.362431710 +0100\n+++ /tmp/tmpkmibvi3g.java\t2023-03-24 12:25:17.362431710 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "file file;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:19.242424725 +0100\n+++ /tmp/tmp5sjd8ipp.java\t2023-03-24 12:25:19.242424725 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+file file;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "(line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:21.274417175 +0100\n+++ /tmp/tmplbfvhb1z.java\t2023-03-24 12:25:21.274417175 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+(line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "(\"line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:23.182410085 +0100\n+++ /tmp/tmpfxdl6tip.java\t2023-03-24 12:25:23.182410085 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+(\"line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "if (prev) text;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:25.198402595 +0100\n+++ /tmp/tmpdgq5zmtn.java\t2023-03-24 12:25:25.198402595 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (prev) text;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": ";//line = line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:27.110395488 +0100\n+++ /tmp/tmp386si6dg.java\t2023-03-24 12:25:27.110395488 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+;//line = line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "if (started) text;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:31.754378226 +0100\n+++ /tmp/tmpr80webjm.java\t2023-03-24 12:25:31.754378226 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (started) text;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "final int lines;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:33.690371030 +0100\n+++ /tmp/tmp8ns78lxr.java\t2023-03-24 12:25:33.690371030 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+final int lines;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "if (html) lines;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:35.622363846 +0100\n+++ /tmp/tmpbjc4vpgl.java\t2023-03-24 12:25:35.626363832 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (html) lines;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "if (text.line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:37.478356945 +0100\n+++ /tmp/tmpq0zmgoe4.java\t2023-03-24 12:25:37.478356945 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (text.line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "if (endsWith) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:39.330350057 +0100\n+++ /tmp/tmpnf65wtf6.java\t2023-03-24 12:25:39.330350057 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (endsWith) {\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "return line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:41.162343244 +0100\n+++ /tmp/tmp76cv2evo.java\t2023-03-24 12:25:41.162343244 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+return line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": ";//line = lines;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:43.106336014 +0100\n+++ /tmp/tmp_ng8afoj.java\t2023-03-24 12:25:43.106336014 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+;//line = lines;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "if (text!= lines;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:47.614319244 +0100\n+++ /tmp/tmpk7akeqc3.java\t2023-03-24 12:25:47.614319244 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (text!= lines;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "+ line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:49.406312576 +0100\n+++ /tmp/tmp58odlf56.java\t2023-03-24 12:25:49.406312576 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n++ line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "",
                "patch": "",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "if (started) line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:55.722289074 +0100\n+++ /tmp/tmpw9er8due.java\t2023-03-24 12:25:55.722289074 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (started) line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "if (completed) line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:57.570282196 +0100\n+++ /tmp/tmpkuqxreaj.java\t2023-03-24 12:25:57.570282196 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (completed) line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "if (text) line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:25:59.474275108 +0100\n+++ /tmp/tmp_8stdrcl.java\t2023-03-24 12:25:59.478275094 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (text) line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "if (lineline;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:01.402267931 +0100\n+++ /tmp/tmp1njzimp1.java\t2023-03-24 12:26:01.402267931 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (lineline;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "EVALUATED;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:03.214261186 +0100\n+++ /tmp/tmpggllr9z3.java\t2023-03-24 12:26:03.218261170 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+EVALUATED;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "if (text; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:05.118254097 +0100\n+++ /tmp/tmp7qwl7cwf.java\t2023-03-24 12:26:05.122254081 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (text; }\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "; line.line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:06.810247797 +0100\n+++ /tmp/tmptov74xlw.java\t2023-03-24 12:26:06.810247797 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+; line.line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "; line.valu;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:08.806240364 +0100\n+++ /tmp/tmp8z6fo3ae.java\t2023-03-24 12:26:08.834240258 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+; line.valu;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "else if (line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:10.522233972 +0100\n+++ /tmp/tmpji0mg4b4.java\t2023-03-24 12:26:10.522233972 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+else if (line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "!= line; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:12.222227641 +0100\n+++ /tmp/tmpth0d9rup.java\t2023-03-24 12:26:12.226227627 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+!= line; }\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "; line.valueSet;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:13.994221041 +0100\n+++ /tmp/tmpccp31be0.java\t2023-03-24 12:26:13.994221041 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+; line.valueSet;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "if (prevline;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:15.746214515 +0100\n+++ /tmp/tmpbfttdmt9.java\t2023-03-24 12:26:15.746214515 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (prevline;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "if (lines;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:17.510207944 +0100\n+++ /tmp/tmpt50yc2fh.java\t2023-03-24 12:26:17.514207928 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (lines;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "; line.next;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:19.234201521 +0100\n+++ /tmp/tmp8l4nok9_.java\t2023-03-24 12:26:19.234201521 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+; line.next;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "; // line line wasNegative",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:20.946195142 +0100\n+++ /tmp/tmph3oprzwu.java\t2023-03-24 12:26:20.950195126 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+; // line line wasNegative\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "; // line.g.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:25.038179893 +0100\n+++ /tmp/tmpkwumcy92.java\t2023-03-24 12:26:25.038179893 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+; // line.g.\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "if (text) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:29.098164761 +0100\n+++ /tmp/tmp070clemf.java\t2023-03-24 12:26:29.098164761 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (text) {\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "; // text (line)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:30.838158275 +0100\n+++ /tmp/tmpe7vywnxm.java\t2023-03-24 12:26:30.842158262 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+; // text (line)\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "; // line line",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:34.926143035 +0100\n+++ /tmp/tmp67id9a_e.java\t2023-03-24 12:26:34.926143035 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+; // line line\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "if (text);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:39.034127718 +0100\n+++ /tmp/tmp70zyp3h1.java\t2023-03-24 12:26:39.038127704 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (text);\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "(text;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:40.846120961 +0100\n+++ /tmp/tmpuwz_chid.java\t2023-03-24 12:26:40.846120961 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+(text;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "if (textArea;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:42.550114606 +0100\n+++ /tmp/tmpz2wy5vfe.java\t2023-03-24 12:26:42.550114606 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (textArea;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "; line. enable;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:44.246108282 +0100\n+++ /tmp/tmpp2f9r3ye.java\t2023-03-24 12:26:44.258108236 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+; line. enable;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "line; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:45.946101939 +0100\n+++ /tmp/tmpduvqjrq0.java\t2023-03-24 12:26:45.950101925 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+line; }\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "; line.y;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:47.618095702 +0100\n+++ /tmp/tmp2l2pu7tr.java\t2023-03-24 12:26:47.618095702 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+; line.y;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "(prevElementModels;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:49.318089362 +0100\n+++ /tmp/tmpfx_s1kkh.java\t2023-03-24 12:26:49.318089362 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+(prevElementModels;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "if (prevline) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:50.990083122 +0100\n+++ /tmp/tmp85up71fv.java\t2023-03-24 12:26:50.990083122 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (prevline) {\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "if (running) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:52.622077034 +0100\n+++ /tmp/tmpg339m2py.java\t2023-03-24 12:26:52.622077034 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (running) {\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "TOKEN TOKEN_END;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:54.266070900 +0100\n+++ /tmp/tmpwxbvzjq5.java\t2023-03-24 12:26:54.266070900 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+TOKEN TOKEN_END;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "; line.prev;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:56.018064362 +0100\n+++ /tmp/tmprt7hbut0.java\t2023-03-24 12:26:56.018064362 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+; line.prev;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "while (line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:57.666058212 +0100\n+++ /tmp/tmp85c35n0l.java\t2023-03-24 12:26:57.666058212 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+while (line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "if (prev object) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:26:59.322052033 +0100\n+++ /tmp/tmpgv14qrlz.java\t2023-03-24 12:26:59.322052033 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (prev object) {\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "; // line of the text",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:01.010045732 +0100\n+++ /tmp/tmpeilbx46r.java\t2023-03-24 12:27:01.010045732 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+; // line of the text\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "if (suffix;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:05.050030651 +0100\n+++ /tmp/tmpj27qhli3.java\t2023-03-24 12:27:05.050030651 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (suffix;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "return text;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:06.666024619 +0100\n+++ /tmp/tmpagejwsr5.java\t2023-03-24 12:27:06.666024619 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+return text;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "TOKEN_END;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:08.394018168 +0100\n+++ /tmp/tmp_kmufdmo.java\t2023-03-24 12:27:08.394018168 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+TOKEN_END;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "&& line; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:10.118011731 +0100\n+++ /tmp/tmp3ls0rg4g.java\t2023-03-24 12:27:10.122011715 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+&& line; }\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "this.lines;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:11.818005384 +0100\n+++ /tmp/tmp_t2qkw5x.java\t2023-03-24 12:27:11.818005384 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+this.lines;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "int line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:13.545998931 +0100\n+++ /tmp/tmp9msucow2.java\t2023-03-24 12:27:13.545998931 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+int line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "memoizedSize;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:15.365992133 +0100\n+++ /tmp/tmp2m4agpav.java\t2023-03-24 12:27:15.365992133 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+memoizedSize;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "if (ids;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:17.121985576 +0100\n+++ /tmp/tmp0yv25z8p.java\t2023-03-24 12:27:17.121985576 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (ids;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "[END_BUGGY] line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:18.841979151 +0100\n+++ /tmp/tmpfuv0pnd3.java\t2023-03-24 12:27:18.841979151 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+[END_BUGGY] line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "if (tmp;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:20.549972772 +0100\n+++ /tmp/tmp0tzywe37.java\t2023-03-24 12:27:20.549972772 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+if (tmp;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "E added;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:22.249966421 +0100\n+++ /tmp/tmp0s8psdz8.java\t2023-03-24 12:27:22.253966407 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+E added;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "int lines;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:24.065959638 +0100\n+++ /tmp/tmppj8xiwtg.java\t2023-03-24 12:27:24.065959638 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+int lines;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "(lines;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:25.957952568 +0100\n+++ /tmp/tmp83sd9t5z.java\t2023-03-24 12:27:25.957952568 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+(lines;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "> line; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:27.625946337 +0100\n+++ /tmp/tmp2e1x3nr8.java\t2023-03-24 12:27:27.625946337 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+> line; }\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "DATE_FORMAT;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:29.301940075 +0100\n+++ /tmp/tmp986585f2.java\t2023-03-24 12:27:29.301940075 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+DATE_FORMAT;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "; // text...",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:30.941933946 +0100\n+++ /tmp/tmpbkkpvxtq.java\t2023-03-24 12:27:30.941933946 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+; // text...\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "<>(text;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:35.125918310 +0100\n+++ /tmp/tmpexprlopu.java\t2023-03-24 12:27:35.125918310 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+<>(text;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "D lines;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:36.725912330 +0100\n+++ /tmp/tmpu8qbn28o.java\t2023-03-24 12:27:36.729912314 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+D lines;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "|| line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:38.421905991 +0100\n+++ /tmp/tmpz9rtlltk.java\t2023-03-24 12:27:38.421905991 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+|| line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "(text;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:40.077899799 +0100\n+++ /tmp/tmppl3swuth.java\t2023-03-24 12:27:40.077899799 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+(text;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "file;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:41.725893639 +0100\n+++ /tmp/tmp1haywmpe.java\t2023-03-24 12:27:41.725893639 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+file;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "caseInsensitive;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:43.393887404 +0100\n+++ /tmp/tmpvsvje6f_.java\t2023-03-24 12:27:43.417887314 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+caseInsensitive;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "final text;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:45.073881123 +0100\n+++ /tmp/tmp98jvr9mm.java\t2023-03-24 12:27:45.073881123 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+final text;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": ", line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:46.793874690 +0100\n+++ /tmp/tmpruaf73zv.java\t2023-03-24 12:27:46.793874690 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+, line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": ").line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:48.457868469 +0100\n+++ /tmp/tmp24ltdmpx.java\t2023-03-24 12:27:48.457868469 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+).line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:50.105862307 +0100\n+++ /tmp/tmp02wpac9q.java\t2023-03-24 12:27:50.109862291 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "text;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:51.777856054 +0100\n+++ /tmp/tmperc7oa_a.java\t2023-03-24 12:27:51.777856054 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+text;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "> line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:53.397849995 +0100\n+++ /tmp/tmp8iufw_13.java\t2023-03-24 12:27:53.397849995 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+> line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "E text;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:55.109843591 +0100\n+++ /tmp/tmp621fqwhs.java\t2023-03-24 12:27:55.109843591 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+E text;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "final line;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:56.861837039 +0100\n+++ /tmp/tmpge1yc0du.java\t2023-03-24 12:27:56.861837039 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+final line;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "eend;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:27:58.497830919 +0100\n+++ /tmp/tmpprlzlqw4.java\t2023-03-24 12:27:58.497830919 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+eend;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "\", text;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:28:00.157824710 +0100\n+++ /tmp/tmp9mo25m1i.java\t2023-03-24 12:28:00.157824710 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+\", text;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "\"\", lines;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:28:01.905818169 +0100\n+++ /tmp/tmpdz_de8el.java\t2023-03-24 12:28:01.905818169 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+\"\", lines;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "+ lines;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:28:03.757811240 +0100\n+++ /tmp/tmpj9gphsmn.java\t2023-03-24 12:28:03.757811240 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n++ lines;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "isline;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:28:05.537804582 +0100\n+++ /tmp/tmpyum18o44.java\t2023-03-24 12:28:05.541804565 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+isline;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "STRING;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:28:07.213798309 +0100\n+++ /tmp/tmpr3dmxr__.java\t2023-03-24 12:28:07.213798309 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+STRING;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "core;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:28:08.925791904 +0100\n+++ /tmp/tmpeeb4twsb.java\t2023-03-24 12:28:08.929791888 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+core;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "RULE;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:28:10.705785243 +0100\n+++ /tmp/tmp3rvr79ie.java\t2023-03-24 12:28:10.705785243 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+RULE;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "edge;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:28:12.289779313 +0100\n+++ /tmp/tmp0dshyse5.java\t2023-03-24 12:28:12.293779299 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+edge;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "500;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:28:14.013772860 +0100\n+++ /tmp/tmpehp36gco.java\t2023-03-24 12:28:14.013772860 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+500;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "char;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:28:15.797766184 +0100\n+++ /tmp/tmpu0t8yizq.java\t2023-03-24 12:28:15.797766184 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+char;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "Up;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:28:17.597759445 +0100\n+++ /tmp/tmp38m5ilu1.java\t2023-03-24 12:28:17.597759445 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+Up;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "20;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:28:19.297753082 +0100\n+++ /tmp/tmpb2e5ksih.java\t2023-03-24 12:28:19.297753082 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+20;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "Delay;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:28:21.053746509 +0100\n+++ /tmp/tmpob04h2cs.java\t2023-03-24 12:28:21.057746493 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+Delay;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "country;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/wrap/java_programs/WRAP.java\t2023-03-24 12:28:22.725740248 +0100\n+++ /tmp/tmpv1dp93h5.java\t2023-03-24 12:28:22.725740248 +0100\n@@ -26,9 +26,9 @@\n             }\n             line = text.substring(0,end);\n             text = text.substring(end);\n             lines.add(line);\n         }\n-\n+country;\n         return lines;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "lines.add(text);"
    },
    "depth_first_search": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "if (node.tupleors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:08.758240542 +0100\n+++ /tmp/tmpw_5a4a43.java\t2023-03-24 12:26:08.758240542 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.tupleors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "if (node.flushors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:10.526233959 +0100\n+++ /tmp/tmphgdjyd5u.java\t2023-03-24 12:26:10.526233959 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.flushors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "if (node.directlyRelated) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:12.226227627 +0100\n+++ /tmp/tmpk4lu04xc.java\t2023-03-24 12:26:12.226227627 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.directlyRelated) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "if (node.directlyRelatedClasses;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:13.982221087 +0100\n+++ /tmp/tmpif6axtym.java\t2023-03-24 12:26:13.986221071 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.directlyRelatedClasses;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "if (node.cacheors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:15.730214575 +0100\n+++ /tmp/tmpw_k5s2d2.java\t2023-03-24 12:26:15.730214575 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.cacheors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "if (node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:17.482208047 +0100\n+++ /tmp/tmp2q414pym.java\t2023-03-24 12:26:17.482208047 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "if (node; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:19.142201864 +0100\n+++ /tmp/tmpem0prhg7.java\t2023-03-24 12:26:19.142201864 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node; } else {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "if (node.sortors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:20.814195634 +0100\n+++ /tmp/tmpp1orvn5x.java\t2023-03-24 12:26:20.814195634 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.sortors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "if (node.reachableors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:22.458189507 +0100\n+++ /tmp/tmp567r3096.java\t2023-03-24 12:26:22.458189507 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.reachableors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "if (node.settingsors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:24.082183455 +0100\n+++ /tmp/tmpfdgbxfx0.java\t2023-03-24 12:26:24.086183441 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.settingsors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "if (node.isNetworkors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:25.754177225 +0100\n+++ /tmp/tmp39g6z5n0.java\t2023-03-24 12:26:25.758177209 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.isNetworkors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "if (node.directed) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:27.458170874 +0100\n+++ /tmp/tmp665zphc_.java\t2023-03-24 12:26:27.458170874 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.directed) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "if (node.flagsors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:29.194164404 +0100\n+++ /tmp/tmp47_gjxmt.java\t2023-03-24 12:26:29.194164404 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.flagsors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "if (node. getDevice) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:30.882158111 +0100\n+++ /tmp/tmpaag963qq.java\t2023-03-24 12:26:30.882158111 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node. getDevice) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "[END_BUGGY] Node successor.contains(node) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:32.558151863 +0100\n+++ /tmp/tmpgmij5k0_.java\t2023-03-24 12:26:32.562151849 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+[END_BUGGY] Node successor.contains(node) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "if (node.isDirected) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:34.238145602 +0100\n+++ /tmp/tmp51h57fgj.java\t2023-03-24 12:26:34.238145602 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.isDirected) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "if (node.excessors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:35.906139382 +0100\n+++ /tmp/tmplhstgxp_.java\t2023-03-24 12:26:35.906139382 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.excessors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "if (node.returnreturnType) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:37.630132954 +0100\n+++ /tmp/tmp3_yb89zq.java\t2023-03-24 12:26:37.630132954 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.returnreturnType) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "if (node. getWriteors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:39.274126823 +0100\n+++ /tmp/tmp3tuqqwz0.java\t2023-03-24 12:26:39.274126823 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node. getWriteors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "if (node. theyors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:40.862120901 +0100\n+++ /tmp/tmppgi12yzp.java\t2023-03-24 12:26:40.862120901 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node. theyors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "if (node == goalnode) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:42.538114652 +0100\n+++ /tmp/tmpurp8479t.java\t2023-03-24 12:26:42.538114652 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node == goalnode) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "if (node.getSuccessors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:44.170108563 +0100\n+++ /tmp/tmpibxu3lzw.java\t2023-03-24 12:26:44.170108563 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.getSuccessors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "if (node.cellors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:45.830102371 +0100\n+++ /tmp/tmpa8drhn4g.java\t2023-03-24 12:26:45.830102371 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.cellors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "if (node.alwaysors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:47.554095942 +0100\n+++ /tmp/tmp08wyq26u.java\t2023-03-24 12:26:47.554095942 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.alwaysors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "if (node.velors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:49.210089764 +0100\n+++ /tmp/tmpj1kdz3xs.java\t2023-03-24 12:26:49.210089764 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.velors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "if (node. '1'ors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:50.886083511 +0100\n+++ /tmp/tmpdsxuyucy.java\t2023-03-24 12:26:50.886083511 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node. '1'ors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "if (node.offsetors;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:52.538077347 +0100\n+++ /tmp/tmpnd_4xhz8.java\t2023-03-24 12:26:52.538077347 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.offsetors;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "if (node.offsetors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:54.206071124 +0100\n+++ /tmp/tmp9ma7nd3t.java\t2023-03-24 12:26:54.206071124 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.offsetors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "[END_BUGGY] Node successor.contains(node)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:55.930064691 +0100\n+++ /tmp/tmpyf1o9ipb.java\t2023-03-24 12:26:55.930064691 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+[END_BUGGY] Node successor.contains(node)) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "if (node.process) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:57.642058301 +0100\n+++ /tmp/tmpdz1nd2va.java\t2023-03-24 12:26:57.642058301 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.process) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "if (node.10000ors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:26:59.266052241 +0100\n+++ /tmp/tmpgts00k93.java\t2023-03-24 12:26:59.266052241 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.10000ors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "if (node.enums) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:00.998045776 +0100\n+++ /tmp/tmp42b0yeck.java\t2023-03-24 12:27:00.998045776 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.enums) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "} else if (node; } else {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:02.730039313 +0100\n+++ /tmp/tmps3c80kmj.java\t2023-03-24 12:27:02.730039313 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+} else if (node; } else {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "if (node.restartors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:04.410033040 +0100\n+++ /tmp/tmp5c8y9fwu.java\t2023-03-24 12:27:04.410033040 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.restartors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "} else if (node.cell) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:06.122026649 +0100\n+++ /tmp/tmpevb0q2r2.java\t2023-03-24 12:27:06.122026649 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+} else if (node.cell) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "if (node.sors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:07.818020317 +0100\n+++ /tmp/tmpldehh4f5.java\t2023-03-24 12:27:07.818020317 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.sors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "if (node.returnreturnType;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:09.502014031 +0100\n+++ /tmp/tmppsdgzkgn.java\t2023-03-24 12:27:09.502014031 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.returnreturnType;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "if (node.cell == goalnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:11.110008027 +0100\n+++ /tmp/tmpqohdo4kh.java\t2023-03-24 12:27:11.110008027 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.cell == goalnode;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "if (node.prevorClause) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:12.774001814 +0100\n+++ /tmp/tmpeqx9vpia.java\t2023-03-24 12:27:12.774001814 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.prevorClause) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "if (node.closingors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:14.405995718 +0100\n+++ /tmp/tmp4a92n1my.java\t2023-03-24 12:27:14.409995705 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.closingors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "if (node.visibleors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:16.033989639 +0100\n+++ /tmp/tmp0r0xip6k.java\t2023-03-24 12:27:16.033989639 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.visibleors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "if (node.Replaceors;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:17.669983530 +0100\n+++ /tmp/tmpifskr7h4.java\t2023-03-24 12:27:17.673983513 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.Replaceors;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "if (node.enumors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:19.281977507 +0100\n+++ /tmp/tmp5g8vdvfn.java\t2023-03-24 12:27:19.285977494 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.enumors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "if (node.openElement) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:20.829971725 +0100\n+++ /tmp/tmpyakw2o73.java\t2023-03-24 12:27:20.829971725 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.openElement) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "if (node.Replaceors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:22.469965600 +0100\n+++ /tmp/tmp8_y_bt1p.java\t2023-03-24 12:27:22.469965600 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.Replaceors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "return false;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:24.093959532 +0100\n+++ /tmp/tmpukvl_g2o.java\t2023-03-24 12:27:24.093959532 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+return false;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "if (node. operandors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:25.913952733 +0100\n+++ /tmp/tmpudoj5yx6.java\t2023-03-24 12:27:25.917952717 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node. operandors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "if (node.cacheEdges) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:27.597946442 +0100\n+++ /tmp/tmpjgx2_y97.java\t2023-03-24 12:27:27.601946426 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.cacheEdges) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "if (node, goalnode) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:29.301940075 +0100\n+++ /tmp/tmp9142rntd.java\t2023-03-24 12:27:29.301940075 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node, goalnode) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "if (node.isNode) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:31.025933633 +0100\n+++ /tmp/tmpsznkhq35.java\t2023-03-24 12:27:31.025933633 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.isNode) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "if (node.generate(node) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:32.701927369 +0100\n+++ /tmp/tmp9wx3kwho.java\t2023-03-24 12:27:32.701927369 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.generate(node) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "if (node.headors) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:34.453920822 +0100\n+++ /tmp/tmpkzuzj0nv.java\t2023-03-24 12:27:34.453920822 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.headors) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "if (node.directlySet) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:36.225914198 +0100\n+++ /tmp/tmpopk89h70.java\t2023-03-24 12:27:36.225914198 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.directlySet) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "if (node.directlyRelatedValues;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:37.921907859 +0100\n+++ /tmp/tmp2zbuuv9y.java\t2023-03-24 12:27:37.921907859 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.directlyRelatedValues;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "if (node.name == goal) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:39.609901550 +0100\n+++ /tmp/tmp830xd1wh.java\t2023-03-24 12:27:39.613901534 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.name == goal) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "if (node.nulled) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:41.269895344 +0100\n+++ /tmp/tmpvmevzytu.java\t2023-03-24 12:27:41.269895344 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.nulled) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "if (node.c == goal) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:42.905889227 +0100\n+++ /tmp/tmp92sae_6a.java\t2023-03-24 12:27:42.905889227 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.c == goal) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "if (node.tuple) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:44.537883127 +0100\n+++ /tmp/tmp9apxfqvo.java\t2023-03-24 12:27:44.537883127 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.tuple) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "if (node.cell) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:46.245876741 +0100\n+++ /tmp/tmp4h09q8uw.java\t2023-03-24 12:27:46.249876725 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.cell) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "if (node.name == goalnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:47.889870592 +0100\n+++ /tmp/tmpwrxex167.java\t2023-03-24 12:27:47.889870592 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.name == goalnode;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "if (node.generate(node)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:49.505864549 +0100\n+++ /tmp/tmpv320z07r.java\t2023-03-24 12:27:49.509864536 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.generate(node)) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "if (node.route) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:51.217858147 +0100\n+++ /tmp/tmpj0cveaqt.java\t2023-03-24 12:27:51.217858147 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.route) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "if (node.ps) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:52.897851865 +0100\n+++ /tmp/tmpy5nkbjz_.java\t2023-03-24 12:27:52.897851865 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.ps) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "} else if (node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:54.477845957 +0100\n+++ /tmp/tmp14avvh7i.java\t2023-03-24 12:27:54.477845957 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+} else if (node;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "[END_BUGGY] Node successor.contains(node);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:56.125839791 +0100\n+++ /tmp/tmpu5jmogxd.java\t2023-03-24 12:27:56.125839791 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+[END_BUGGY] Node successor.contains(node);\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "if (node.cellNode) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:57.845833357 +0100\n+++ /tmp/tmpkky3aabq.java\t2023-03-24 12:27:57.845833357 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.cellNode) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:27:59.501827164 +0100\n+++ /tmp/tmp55ye6hrc.java\t2023-03-24 12:27:59.501827164 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "if (node.ps;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:03.741811300 +0100\n+++ /tmp/tmprsay__5y.java\t2023-03-24 12:28:03.741811300 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.ps;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "// we don't lose information",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:05.493804746 +0100\n+++ /tmp/tmpxyii3fac.java\t2023-03-24 12:28:05.493804746 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+// we don't lose information\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "if (node. connected) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:09.449789943 +0100\n+++ /tmp/tmpz83ij0d9.java\t2023-03-24 12:28:09.449789943 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node. connected) {\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "if (node.cacheors;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:11.061783911 +0100\n+++ /tmp/tmpaw34gbq5.java\t2023-03-24 12:28:11.061783911 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.cacheors;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "if (node.directlySet;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:12.697777786 +0100\n+++ /tmp/tmpc2z5dm_m.java\t2023-03-24 12:28:12.697777786 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.directlySet;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "if (nodenode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:14.285771844 +0100\n+++ /tmp/tmpk_cj100l.java\t2023-03-24 12:28:14.285771844 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (nodenode;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "if (node.kind == goalnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:15.893765825 +0100\n+++ /tmp/tmpboj6nbcn.java\t2023-03-24 12:28:15.893765825 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.kind == goalnode;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "if (node.flagsors;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:17.589759475 +0100\n+++ /tmp/tmpblr5evy9.java\t2023-03-24 12:28:17.589759475 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.flagsors;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "if (node.instance;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:19.285753128 +0100\n+++ /tmp/tmpnbdwqndl.java\t2023-03-24 12:28:19.285753128 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.instance;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "if (node.parent;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:20.977746792 +0100\n+++ /tmp/tmpgd7qckhd.java\t2023-03-24 12:28:21.013746657 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.parent;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "if (node.cellNode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:22.649740534 +0100\n+++ /tmp/tmpfsl6c69f.java\t2023-03-24 12:28:22.693740370 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.cellNode;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "if (node.next;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:24.389734018 +0100\n+++ /tmp/tmpaqt3vgtj.java\t2023-03-24 12:28:24.393734005 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.next;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "[END_BUGGY] Node successor.instance;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:26.261727009 +0100\n+++ /tmp/tmp25z022q3.java\t2023-03-24 12:28:26.261727009 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+[END_BUGGY] Node successor.instance;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "if (node. getDevice;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:28.229719641 +0100\n+++ /tmp/tmphwq9y1h_.java\t2023-03-24 12:28:28.229719641 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node. getDevice;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "if (node.parent == goalnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:29.905713363 +0100\n+++ /tmp/tmp3dl_2ek0.java\t2023-03-24 12:28:29.905713363 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.parent == goalnode;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "if (node.props == true;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:31.585707073 +0100\n+++ /tmp/tmpoqabmw_8.java\t2023-03-24 12:28:31.589707058 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.props == true;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "if (node.cell;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:33.265700779 +0100\n+++ /tmp/tmpdpkjnwek.java\t2023-03-24 12:28:33.265700779 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.cell;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "if (node.enumNode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:34.965694412 +0100\n+++ /tmp/tmp7ofj3uc4.java\t2023-03-24 12:28:34.965694412 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.enumNode;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "if (node.member;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:36.705687895 +0100\n+++ /tmp/tmpy13cdh4d.java\t2023-03-24 12:28:36.705687895 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.member;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "if (node.enums;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:38.313681871 +0100\n+++ /tmp/tmp87trib4l.java\t2023-03-24 12:28:38.313681871 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.enums;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "if (node.parent!= goalnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:39.953675728 +0100\n+++ /tmp/tmphatxld6m.java\t2023-03-24 12:28:39.953675728 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.parent!= goalnode;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "if (node.c == goalnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:41.561669705 +0100\n+++ /tmp/tmpvhqwjy16.java\t2023-03-24 12:28:41.561669705 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.c == goalnode;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "if (node.returnreturnreturnType;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:43.233663441 +0100\n+++ /tmp/tmpz7tqpo1x.java\t2023-03-24 12:28:43.233663441 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.returnreturnreturnType;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "[END_BUGGY] Node successorIndex;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:44.961656965 +0100\n+++ /tmp/tmpgvm8w_4r.java\t2023-03-24 12:28:44.961656965 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+[END_BUGGY] Node successorIndex;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "if (node.return",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:46.669650567 +0100\n+++ /tmp/tmpnk_6oeqh.java\t2023-03-24 12:28:46.673650551 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node.return\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "if (node);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:48.401644075 +0100\n+++ /tmp/tmpk79e80tf.java\t2023-03-24 12:28:48.401644075 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+if (node);\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "return true;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:50.201637330 +0100\n+++ /tmp/tmpjknkrcvj.java\t2023-03-24 12:28:50.201637330 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+return true;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "\", false;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:51.957630750 +0100\n+++ /tmp/tmphcev7o5k.java\t2023-03-24 12:28:51.957630750 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+\", false;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "STRINGors;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:53.605624574 +0100\n+++ /tmp/tmpx8va_p29.java\t2023-03-24 12:28:53.609624560 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+STRINGors;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "// even vertex",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:55.185618651 +0100\n+++ /tmp/tmpbit6o8he.java\t2023-03-24 12:28:55.185618651 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+// even vertex\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "refreshors;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:28:59.161603748 +0100\n+++ /tmp/tmp9an_58ba.java\t2023-03-24 12:28:59.161603748 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+refreshors;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": ";",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:29:00.837597465 +0100\n+++ /tmp/tmp4g1sx4r_.java\t2023-03-24 12:29:00.841597452 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+;\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "};",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/depth_first_search/java_programs/DEPTH_FIRST_SEARCH.java\t2023-03-24 12:29:04.765582739 +0100\n+++ /tmp/tmp_lh91su7.java\t2023-03-24 12:29:04.765582739 +0100\n@@ -17,10 +17,11 @@\n                 if (nodesvisited.contains(node)) {\n                     return false;\n                 } else if (node == goalnode) {\n                     return true;\n                 } else {\n+};\n                     for (Node successornodes : node.getSuccessors()) {\n                         if (search(successornodes)) { return true; }\n                     }\n                 }\n                 return false;\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "nodesvisited.add(node);"
    },
    "next_permutation": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "if (perm.get(j) < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:28:28.021720420 +0100\n+++ /tmp/tmps8_71u5m.java\t2023-03-24 12:28:28.057720285 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j) < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "if (perm.get(j). < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:28:32.221704691 +0100\n+++ /tmp/tmpmnumypzm.java\t2023-03-24 12:28:32.221704691 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j). < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "if (perm.get(j) > perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:28:33.865698534 +0100\n+++ /tmp/tmpfxxp4fq4.java\t2023-03-24 12:28:33.869698518 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j) > perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": true,
                "identical": true
            },
            {
                "k": 4,
                "tentative_fix": "if (perm.get(j), perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:28:38.017682981 +0100\n+++ /tmp/tmpysihqvyk.java\t2023-03-24 12:28:38.017682981 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j), perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "if (perm.get(j - perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:28:39.733676553 +0100\n+++ /tmp/tmp8b8mjxl7.java\t2023-03-24 12:28:39.733676553 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "if (perm.get(j). <= perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:28:41.505669915 +0100\n+++ /tmp/tmpmjmv47pg.java\t2023-03-24 12:28:41.533669810 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j). <= perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "if (perm.get(j - < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:28:43.281663261 +0100\n+++ /tmp/tmpmgd0czi7.java\t2023-03-24 12:28:43.309663156 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "if (perm.get(j, i < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:28:44.961656965 +0100\n+++ /tmp/tmpo0aotvo4.java\t2023-03-24 12:28:44.961656965 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j, i < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "if (perm.get(j - 1) < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:28:46.685650505 +0100\n+++ /tmp/tmpnwad2tqr.java\t2023-03-24 12:28:46.685650505 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - 1) < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "if (perm.get(j) <= perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:28:50.801635083 +0100\n+++ /tmp/tmp340aids4.java\t2023-03-24 12:28:50.801635083 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j) <= perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "if (perm.get(j - <= perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:28:54.985619403 +0100\n+++ /tmp/tmp1f4fs6e6.java\t2023-03-24 12:28:54.985619403 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - <= perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "if (perm.get(j) == perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:28:56.777612686 +0100\n+++ /tmp/tmp64lggdzt.java\t2023-03-24 12:28:56.781612669 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j) == perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "if (perm.get(j - 1, perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:01.001596851 +0100\n+++ /tmp/tmpas9mqvj_.java\t2023-03-24 12:29:01.001596851 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - 1, perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "if (perm.get(j + 1, perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:02.701590479 +0100\n+++ /tmp/tmpm4vdaab4.java\t2023-03-24 12:29:02.701590479 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j + 1, perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "if (perm.get(j < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:04.517583669 +0100\n+++ /tmp/tmp5lu9uuw_.java\t2023-03-24 12:29:04.517583669 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "if (perm.get(j || perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:06.265577117 +0100\n+++ /tmp/tmpt99ubaqt.java\t2023-03-24 12:29:06.269577100 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j || perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "if (perm.get(j - -perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:08.205569843 +0100\n+++ /tmp/tmpzykv99pn.java\t2023-03-24 12:29:08.209569827 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - -perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "if (perm.get(j, i.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:09.949563303 +0100\n+++ /tmp/tmpf9cvgrov.java\t2023-03-24 12:29:09.989563152 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j, i.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "if (perm.get(j)!= perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:11.773556463 +0100\n+++ /tmp/tmp1urfh5_5.java\t2023-03-24 12:29:11.773556463 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j)!= perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "if (perm.get(j) < perm.get(i - 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:15.969540727 +0100\n+++ /tmp/tmpacv_et11.java\t2023-03-24 12:29:15.969540727 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j) < perm.get(i - 1) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "if (perm.get(j + 1) < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:17.777533944 +0100\n+++ /tmp/tmpxn4kf9vc.java\t2023-03-24 12:29:17.777533944 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j + 1) < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "if (perm.get(j). > perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:21.933518355 +0100\n+++ /tmp/tmp3zl2a_im.java\t2023-03-24 12:29:21.933518355 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j). > perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "if (perm.get(jj < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:23.653511905 +0100\n+++ /tmp/tmpsszxtfbb.java\t2023-03-24 12:29:23.653511905 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(jj < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "if (perm.get(j, perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:25.369505465 +0100\n+++ /tmp/tmpva3ze7ry.java\t2023-03-24 12:29:25.369505465 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j, perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "if (perm.get(j - - perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:27.145498803 +0100\n+++ /tmp/tmpx6cx_x7s.java\t2023-03-24 12:29:27.145498803 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - - perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "if (perm.get(j -> perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:28.901492215 +0100\n+++ /tmp/tmp7x3k6lsl.java\t2023-03-24 12:29:28.901492215 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j -> perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "if (perm.get(j) < perm.get(ii)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:30.601485836 +0100\n+++ /tmp/tmprlsjg2qu.java\t2023-03-24 12:29:30.601485836 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j) < perm.get(ii)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "if (perm.get(j - Math.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:32.437478945 +0100\n+++ /tmp/tmpwmg43u5c.java\t2023-03-24 12:29:32.437478945 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - Math.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "if (perm.get(j= <= perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:34.085472762 +0100\n+++ /tmp/tmpisdnp2vv.java\t2023-03-24 12:29:34.085472762 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j= <= perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "if (perm.get(j - 1 < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:35.905465931 +0100\n+++ /tmp/tmpqyr5grji.java\t2023-03-24 12:29:35.905465931 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - 1 < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "if (perm.get(j - & perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:37.601459568 +0100\n+++ /tmp/tmp2jx1up4l.java\t2023-03-24 12:29:37.605459552 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - & perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "if (perm.get(j); == perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:39.461452586 +0100\n+++ /tmp/tmpx0jowi1b.java\t2023-03-24 12:29:39.461452586 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j); == perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "if (perm.get(j > perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:41.161446205 +0100\n+++ /tmp/tmp_y19wvqx.java\t2023-03-24 12:29:41.165446191 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j > perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "if (perm.get(j); < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:42.925439585 +0100\n+++ /tmp/tmpmt6vyjrt.java\t2023-03-24 12:29:42.925439585 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j); < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "if (perm.get(j - == perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:44.581433368 +0100\n+++ /tmp/tmptb61vcqk.java\t2023-03-24 12:29:44.581433368 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - == perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "if (perm.get(j1 < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:46.245427122 +0100\n+++ /tmp/tmpw98tz62u.java\t2023-03-24 12:29:46.245427122 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j1 < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "if (perm.get(j); perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:48.077420243 +0100\n+++ /tmp/tmpvv4kml_a.java\t2023-03-24 12:29:48.077420243 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j); perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "if (perm.get(j).!= perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:49.813413725 +0100\n+++ /tmp/tmp7fvi0ipz.java\t2023-03-24 12:29:49.817413712 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j).!= perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "if (perm.get(j). == perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:51.541407238 +0100\n+++ /tmp/tmp86h0xnlj.java\t2023-03-24 12:29:51.541407238 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j). == perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "if (perm.get(j || & perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:53.281400704 +0100\n+++ /tmp/tmpjrbrp63p.java\t2023-03-24 12:29:53.281400704 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j || & perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "if (perm.get(j) < perm.get(i) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:55.077393961 +0100\n+++ /tmp/tmplstauquf.java\t2023-03-24 12:29:55.081393947 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j) < perm.get(i) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "if (perm.get(j) < perm.get(i;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:56.757387654 +0100\n+++ /tmp/tmpwjijnzpq.java\t2023-03-24 12:29:56.757387654 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j) < perm.get(i;\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "if (perm.get(j + 1 < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:29:58.393381508 +0100\n+++ /tmp/tmp9c66ax84.java\t2023-03-24 12:29:58.393381508 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j + 1 < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "if (perm.get(j). >= perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:00.133374976 +0100\n+++ /tmp/tmp9dqpz30h.java\t2023-03-24 12:30:00.133374976 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j). >= perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "if (perm.get(j -!= perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:01.901368336 +0100\n+++ /tmp/tmp1ao6n45p.java\t2023-03-24 12:30:01.901368336 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j -!= perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "if (perm.get(j - 1), perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:03.729361470 +0100\n+++ /tmp/tmp4r63suv0.java\t2023-03-24 12:30:03.729361470 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - 1), perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "if (perm.get(j) >= perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:05.433355069 +0100\n+++ /tmp/tmpshxg1lsw.java\t2023-03-24 12:30:05.437355053 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j) >= perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": true,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "if (perm.get(jopposite.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:09.541339639 +0100\n+++ /tmp/tmpd6lmvf3y.java\t2023-03-24 12:30:09.541339639 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(jopposite.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "if (perm.get(j -perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:11.309332997 +0100\n+++ /tmp/tmpgp_xi8rr.java\t2023-03-24 12:30:11.313332981 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j -perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "if (perm.get(j -> < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:13.057326431 +0100\n+++ /tmp/tmpovzyhshf.java\t2023-03-24 12:30:13.057326431 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j -> < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "if (perm.get(j -> perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:14.801319878 +0100\n+++ /tmp/tmphv_s_a_0.java\t2023-03-24 12:30:14.805319861 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j -> perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "if (perm.get(j); i < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:16.421313791 +0100\n+++ /tmp/tmp8oblssv9.java\t2023-03-24 12:30:16.425313774 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j); i < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "if (perm.get(j; i < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:18.153307284 +0100\n+++ /tmp/tmpj6uc7adf.java\t2023-03-24 12:30:18.157307268 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j; i < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "if (perm.get(jDeclaration < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:19.849300909 +0100\n+++ /tmp/tmpok3pysng.java\t2023-03-24 12:30:19.849300909 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(jDeclaration < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "if (perm.get(j - sn <= perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:21.541294553 +0100\n+++ /tmp/tmpwyvwg5hq.java\t2023-03-24 12:30:21.541294553 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - sn <= perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "if (perm.get(j - sn < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:23.225288225 +0100\n+++ /tmp/tmpspzzcgs0.java\t2023-03-24 12:30:23.225288225 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - sn < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "if (perm.get(j, i, perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:24.933281804 +0100\n+++ /tmp/tmpo06dk9ut.java\t2023-03-24 12:30:24.937281791 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j, i, perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "if (perm.get(j)) <= perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:26.665275296 +0100\n+++ /tmp/tmpekb2vljt.java\t2023-03-24 12:30:26.665275296 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j)) <= perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "if (perm.get(j - 1).perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:28.341268997 +0100\n+++ /tmp/tmpcgb1ij33.java\t2023-03-24 12:30:28.341268997 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - 1).perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "if (perm.get(j - 1) == perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:30.137262247 +0100\n+++ /tmp/tmp2hmtnawh.java\t2023-03-24 12:30:30.137262247 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - 1) == perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "if (perm.get(jBy i < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:34.245246804 +0100\n+++ /tmp/tmpejvc33jh.java\t2023-03-24 12:30:34.249246790 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(jBy i < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "if (perm.get(j ->perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:36.045240037 +0100\n+++ /tmp/tmpuric_bnh.java\t2023-03-24 12:30:36.045240037 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j ->perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "if (perm.get(j) < perm.get(i / perm;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:37.725233724 +0100\n+++ /tmp/tmp89d0q1ib.java\t2023-03-24 12:30:37.725233724 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j) < perm.get(i / perm;\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "if (perm.get(j_1 < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:39.485227106 +0100\n+++ /tmp/tmp2fewl329.java\t2023-03-24 12:30:39.485227106 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j_1 < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "if (perm.get(j column > perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:41.153220835 +0100\n+++ /tmp/tmp1hij3izg.java\t2023-03-24 12:30:41.153220835 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j column > perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "if (perm.get(jBuilder!= perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:42.877214353 +0100\n+++ /tmp/tmplrls5ctw.java\t2023-03-24 12:30:42.877214353 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(jBuilder!= perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "if (perm.get(j - >> perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:44.637207735 +0100\n+++ /tmp/tmpq7r7xx3e.java\t2023-03-24 12:30:44.641207719 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - >> perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "if ( perm.get(j) < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:46.365201236 +0100\n+++ /tmp/tmp15d0crc3.java\t2023-03-24 12:30:46.365201236 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if ( perm.get(j) < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "if (perm.get(j). perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:50.589185353 +0100\n+++ /tmp/tmpx6c84fqg.java\t2023-03-24 12:30:50.589185353 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j). perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "if (perm.get(j] < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:52.209179261 +0100\n+++ /tmp/tmpcq3ho11n.java\t2023-03-24 12:30:52.209179261 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j] < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "if (perm.get(j '\\ < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:54.161171918 +0100\n+++ /tmp/tmpk_r_jb7o.java\t2023-03-24 12:30:54.261171541 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j '\\ < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "if (perm.get(j!= perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:56.593162771 +0100\n+++ /tmp/tmpxqerxadz.java\t2023-03-24 12:30:56.593162771 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j!= perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "if (perm.get(j) < perm.get(ii) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:30:58.673154947 +0100\n+++ /tmp/tmpconpr6ms.java\t2023-03-24 12:30:58.733154721 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j) < perm.get(ii) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "if (perm.get(j column & perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:00.781147019 +0100\n+++ /tmp/tmp4kzi6s7f.java\t2023-03-24 12:31:00.957146357 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j column & perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "if (perm.get(j2, perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:02.545140382 +0100\n+++ /tmp/tmpmfmb2bor.java\t2023-03-24 12:31:02.545140382 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j2, perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "if (perm.get(j column - perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:04.361133551 +0100\n+++ /tmp/tmph4tysb9u.java\t2023-03-24 12:31:04.433133279 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j column - perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "if (perm.get(j method method method.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:06.481125574 +0100\n+++ /tmp/tmp664wqdq9.java\t2023-03-24 12:31:06.485125561 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j method method method.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "if (perm.get(jlatitude < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:08.953116273 +0100\n+++ /tmp/tmpmvjjzie9.java\t2023-03-24 12:31:09.133115598 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(jlatitude < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "if (perm.get(j - column.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:11.185107875 +0100\n+++ /tmp/tmprfxmvnv0.java\t2023-03-24 12:31:11.185107875 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - column.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "if (perm.get(j); >= perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:12.777101887 +0100\n+++ /tmp/tmp5pp67e4e.java\t2023-03-24 12:31:12.777101887 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j); >= perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "if (perm.get(j - >= perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:14.505095383 +0100\n+++ /tmp/tmp0fkt00t3.java\t2023-03-24 12:31:14.505095383 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - >= perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "if (perm.get(j. < perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:16.713087074 +0100\n+++ /tmp/tmpnk_xuv8s.java\t2023-03-24 12:31:16.717087061 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j. < perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "if (perm.get(j)) > perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:18.233081355 +0100\n+++ /tmp/tmp5soynhwt.java\t2023-03-24 12:31:18.237081339 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j)) > perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "if (perm.get(j || || perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:19.973074805 +0100\n+++ /tmp/tmp5qba92jn.java\t2023-03-24 12:31:19.973074805 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j || || perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "if (perm.get(j - e.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:22.105066783 +0100\n+++ /tmp/tmprgk0afeh.java\t2023-03-24 12:31:22.233066302 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - e.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "if (perm.get(j -> >= perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:23.885060083 +0100\n+++ /tmp/tmp3okf36gr.java\t2023-03-24 12:31:23.885060083 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j -> >= perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "if (perm.get(j method method.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:25.745053082 +0100\n+++ /tmp/tmp8ie4menw.java\t2023-03-24 12:31:25.745053082 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j method method.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "if (perm.get(j & perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:27.933044847 +0100\n+++ /tmp/tmphu6zarkx.java\t2023-03-24 12:31:28.073044318 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j & perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "if (perm.get(j);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:29.629038463 +0100\n+++ /tmp/tmp3ubkq9je.java\t2023-03-24 12:31:29.645038400 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j);\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "if (perm.get(jabstract perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:31.969029653 +0100\n+++ /tmp/tmpp4syxowf.java\t2023-03-24 12:31:31.969029653 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(jabstract perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "if (perm.get(j - root.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:33.997022019 +0100\n+++ /tmp/tmpacov916y.java\t2023-03-24 12:31:34.001022002 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - root.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "if (perm.get(j to perm.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:36.521012516 +0100\n+++ /tmp/tmppw25hupm.java\t2023-03-24 12:31:36.657012002 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j to perm.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "if (perm.get(j -gp.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:38.889003600 +0100\n+++ /tmp/tmphtzezh1n.java\t2023-03-24 12:31:39.069002922 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j -gp.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "if (perm.get(j -ued.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:40.628997049 +0100\n+++ /tmp/tmpudkwexxs.java\t2023-03-24 12:31:40.632997032 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j -ued.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "if (perm.get(j - resultList.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:42.736989111 +0100\n+++ /tmp/tmp8ziini_f.java\t2023-03-24 12:31:42.764989004 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - resultList.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "if (perm.get(j - formats.get(i)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:44.844981171 +0100\n+++ /tmp/tmpw9o1nn6m.java\t2023-03-24 12:31:44.848981158 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j - formats.get(i)) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "if (perm.get(j) < perm.get(i + 1) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:47.108972645 +0100\n+++ /tmp/tmp_0pasq5d.java\t2023-03-24 12:31:47.200972299 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j) < perm.get(i + 1) {\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "if (perm.get(j) < perm.get(i + j;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:48.988965567 +0100\n+++ /tmp/tmpda9yl102.java\t2023-03-24 12:31:49.132965023 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j) < perm.get(i + j;\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "if (perm.get(j) < perm.get(i % column;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:51.412956436 +0100\n+++ /tmp/tmpxn242ryj.java\t2023-03-24 12:31:51.548955926 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j) < perm.get(i % column;\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "if (perm.get(j) < perm.get(i + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/next_permutation/java_programs/NEXT_PERMUTATION.java\t2023-03-24 12:31:53.700947820 +0100\n+++ /tmp/tmppu18ef4l.java\t2023-03-24 12:31:53.700947820 +0100\n@@ -14,11 +14,11 @@\n public class NEXT_PERMUTATION {\n     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i; j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+if (perm.get(j) < perm.get(i + 1;\n                         ArrayList<Integer> next_perm = perm;\n                         int temp_j = perm.get(j);\n                         int temp_i = perm.get(i);\n                         next_perm.set(i,temp_j);\n                         next_perm.set(j,temp_i);\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "if (perm.get(j) > perm.get(i)) {"
    },
    "is_valid_parenthesization": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "return false;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:29:08.389569151 +0100\n+++ /tmp/tmp69dvln69.java\t2023-03-24 12:29:08.389569151 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "return false; // e.g. return false;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:29:12.329554378 +0100\n+++ /tmp/tmpbu3kervr.java\t2023-03-24 12:29:12.333554362 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // e.g. return false;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "return false; // just to add an error here",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:29:16.441538957 +0100\n+++ /tmp/tmpxi2b6axq.java\t2023-03-24 12:29:16.445538941 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to add an error here\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "return false; // just to ensure we don't deposit",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:29:20.377524192 +0100\n+++ /tmp/tmpbkyoeyev.java\t2023-03-24 12:29:20.377524192 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure we don't deposit\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "return false; // e.g. return false);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:29:24.249509667 +0100\n+++ /tmp/tmpol34dpjn.java\t2023-03-24 12:29:24.249509667 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // e.g. return false);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "return false; // just to add at the end of list",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:29:28.089495261 +0100\n+++ /tmp/tmp9vs5ijzf.java\t2023-03-24 12:29:28.089495261 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to add at the end of list\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "return false; //conversion node.g. return false;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:29:32.137480073 +0100\n+++ /tmp/tmpg8fwvkr2.java\t2023-03-24 12:29:32.137480073 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; //conversion node.g. return false;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "return false; //conversion node.g. return false);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:29:36.145465032 +0100\n+++ /tmp/tmpqhq9y_kl.java\t2023-03-24 12:29:36.145465032 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; //conversion node.g. return false);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "return false; // just to ensure the end of list",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:29:40.109450155 +0100\n+++ /tmp/tmpp30rotvt.java\t2023-03-24 12:29:40.109450155 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure the end of list\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "return false; // just to ensure we don't accept",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:29:44.141435021 +0100\n+++ /tmp/tmp5mks7qwb.java\t2023-03-24 12:29:44.141435021 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure we don't accept\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "return false; // just assume at the end of list",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:29:48.181419853 +0100\n+++ /tmp/tmpj6uhy9na.java\t2023-03-24 12:29:48.181419853 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just assume at the end of list\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "return false; // just to add an error here but...",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:29:52.089405181 +0100\n+++ /tmp/tmpyw55z4bu.java\t2023-03-24 12:29:52.089405181 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to add an error here but...\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "return false; // skip first at the end of list",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:29:55.965390628 +0100\n+++ /tmp/tmp36h9lsyv.java\t2023-03-24 12:29:55.965390628 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // skip first at the end of list\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "return false; // just to ensure it's matched.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:29:59.945375681 +0100\n+++ /tmp/tmpu7rkrn1k.java\t2023-03-24 12:29:59.949375665 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure it's matched.\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "return false; // just to first at the end of list",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:30:03.929360719 +0100\n+++ /tmp/tmpcoub391o.java\t2023-03-24 12:30:03.929360719 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to first at the end of list\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "return false; // just to ensure in the end of list",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:30:07.897345813 +0100\n+++ /tmp/tmp9gp4zcp9.java\t2023-03-24 12:30:07.897345813 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure in the end of list\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "return false; // just to ensure we don't stack",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:30:11.909330742 +0100\n+++ /tmp/tmph9sf6njn.java\t2023-03-24 12:30:11.909330742 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure we don't stack\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "return false; // just to ensure it's current order",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:30:15.809316089 +0100\n+++ /tmp/tmpfp1q9xge.java\t2023-03-24 12:30:15.813316075 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure it's current order\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "return false; // just to ensure with the end of list",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:30:19.749301286 +0100\n+++ /tmp/tmpwx9tk8t7.java\t2023-03-24 12:30:19.753301270 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure with the end of list\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "return false; // Math.g. return false);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:30:23.721286360 +0100\n+++ /tmp/tmpbn8mu4_b.java\t2023-03-24 12:30:23.721286360 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // Math.g. return false);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "return false; // just to ensure we don'tThere",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:30:27.509272124 +0100\n+++ /tmp/tmppaos6b2c.java\t2023-03-24 12:30:27.509272124 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure we don'tThere\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "return false; // must be an error here",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:30:31.409257466 +0100\n+++ /tmp/tmpumb636zx.java\t2023-03-24 12:30:31.409257466 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // must be an error here\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "return false; // recurse to add an error here",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:30:35.465242219 +0100\n+++ /tmp/tmp0hs1ec9_.java\t2023-03-24 12:30:35.465242219 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // recurse to add an error here\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "return false; // add an error here",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:30:39.337227663 +0100\n+++ /tmp/tmpb9ld0rdo.java\t2023-03-24 12:30:39.337227663 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // add an error here\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "return false; // skip first starting underscore {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:30:43.297212774 +0100\n+++ /tmp/tmp2dsx2x2u.java\t2023-03-24 12:30:43.301212757 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // skip first starting underscore {\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "return false; // just to ensure we don't element",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:30:47.237197957 +0100\n+++ /tmp/tmpga_cppey.java\t2023-03-24 12:30:47.237197957 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure we don't element\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "return false; // just to ensure we don'tDeleter",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:30:52.309178884 +0100\n+++ /tmp/tmp212e8gis.java\t2023-03-24 12:30:52.309178884 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure we don'tDeleter\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "return false; // Math.g. return false;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:30:56.761162139 +0100\n+++ /tmp/tmpgfsto0jq.java\t2023-03-24 12:30:56.761162139 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // Math.g. return false;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "return false; // just does add an error here",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:31:02.221141603 +0100\n+++ /tmp/tmpqdilunsm.java\t2023-03-24 12:31:02.225141587 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just does add an error here\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "return false; // just to ensure we don't included",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:31:07.397122130 +0100\n+++ /tmp/tmp01tnguii.java\t2023-03-24 12:31:07.397122130 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure we don't included\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "return false; // just to ensure it's cell info",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:31:12.533102804 +0100\n+++ /tmp/tmpbhpmslb1.java\t2023-03-24 12:31:12.533102804 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure it's cell info\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "return false; // e.g. return false)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:31:17.981082304 +0100\n+++ /tmp/tmpv5ndhab_.java\t2023-03-24 12:31:18.017082167 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // e.g. return false)\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "return false; // just to ensure we don'tcoder",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:31:23.977059736 +0100\n+++ /tmp/tmpw0s9p8hj.java\t2023-03-24 12:31:23.977059736 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure we don'tcoder\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "return false; // can't be an error here",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:31:29.373039425 +0100\n+++ /tmp/tmpyqiymkl7.java\t2023-03-24 12:31:29.373039425 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // can't be an error here\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "return false; // File that the end of list",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:31:34.789019037 +0100\n+++ /tmp/tmps0jit0_3.java\t2023-03-24 12:31:34.793019021 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // File that the end of list\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "return false; // just does not yet in an error here",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:31:41.072995377 +0100\n+++ /tmp/tmpxnfxhpeq.java\t2023-03-24 12:31:41.072995377 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just does not yet in an error here\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "return false; //conversion's an error here",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:31:45.364979215 +0100\n+++ /tmp/tmpbwlhwcgi.java\t2023-03-24 12:31:45.364979215 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; //conversion's an error here\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "return false; // just to ensure it's value.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:31:51.404956468 +0100\n+++ /tmp/tmprteg_h4w.java\t2023-03-24 12:31:51.548955926 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure it's value.\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "return false; // n is the root of all...",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:31:56.896935783 +0100\n+++ /tmp/tmpb7pxccux.java\t2023-03-24 12:31:56.896935783 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // n is the root of all...\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "return false; // just to add an file at the entry",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:32:01.384918876 +0100\n+++ /tmp/tmpmt159gcg.java\t2023-03-24 12:32:01.384918876 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to add an file at the entry\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "return false; // just does have an error here",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:32:07.060897492 +0100\n+++ /tmp/tmpet6m2jjk.java\t2023-03-24 12:32:07.060897492 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just does have an error here\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "return false; // n is the root of list",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:32:12.196878140 +0100\n+++ /tmp/tmp9d5s50tz.java\t2023-03-24 12:32:12.196878140 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // n is the root of list\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "return false; // n is the root of the opposite tree",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:32:17.632857655 +0100\n+++ /tmp/tmp61swkrm3.java\t2023-03-24 12:32:17.632857655 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // n is the root of the opposite tree\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "return false; // just to ensure we added.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:32:24.008833625 +0100\n+++ /tmp/tmps9c9qtaf.java\t2023-03-24 12:32:24.072833383 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure we added.\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "return false; // NOSONAR (end)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:32:29.836811658 +0100\n+++ /tmp/tmpnpvs0p0r.java\t2023-03-24 12:32:30.020810965 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // NOSONAR (end)\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "return false; // skip first starting underscore to the path parameters",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:32:34.048795778 +0100\n+++ /tmp/tmphg00cgb7.java\t2023-03-24 12:32:34.048795778 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // skip first starting underscore to the path parameters\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "return false; // skip first at all unmatched",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:32:38.000780881 +0100\n+++ /tmp/tmp17ui492i.java\t2023-03-24 12:32:38.000780881 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // skip first at all unmatched\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "return false; // n is the root of the opposite file",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:32:41.892766207 +0100\n+++ /tmp/tmpop8ao41j.java\t2023-03-24 12:32:41.892766207 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // n is the root of the opposite file\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "return false; // just to ensure we don't found",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:32:46.072750445 +0100\n+++ /tmp/tmpybbsw2cq.java\t2023-03-24 12:32:46.072750445 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure we don't found\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "return false; //conversion't an error here",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:32:50.192734910 +0100\n+++ /tmp/tmp1h8cw4p5.java\t2023-03-24 12:32:50.192734910 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; //conversion't an error here\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "return false; // just to the end of list",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:32:54.124720079 +0100\n+++ /tmp/tmpmruvb8tj.java\t2023-03-24 12:32:54.124720079 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to the end of list\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "return false; // didn't an error here",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:32:58.008705432 +0100\n+++ /tmp/tmpz7s6dq86.java\t2023-03-24 12:32:58.012705415 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // didn't an error here\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "return false; // just to ensure it's number",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:33:02.148689815 +0100\n+++ /tmp/tmp1lzahpe4.java\t2023-03-24 12:33:02.152689802 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure it's number\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "return false; // just to add an error messages.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:33:06.108674879 +0100\n+++ /tmp/tmpg7jkbpyv.java\t2023-03-24 12:33:06.108674879 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to add an error messages.\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "return false; // just to an error here",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:33:10.076659909 +0100\n+++ /tmp/tmpo0k2_7ik.java\t2023-03-24 12:33:10.080659892 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to an error here\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "return false; // skip first starting underscore to the entry",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:33:14.060644876 +0100\n+++ /tmp/tmplx45ncpk.java\t2023-03-24 12:33:14.060644876 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // skip first starting underscore to the entry\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "return false; // just does not (yet)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:33:18.052629816 +0100\n+++ /tmp/tmpye7m5vy7.java\t2023-03-24 12:33:18.056629799 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just does not (yet)\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "return false; // just to ensure in an error here",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:33:22.072614645 +0100\n+++ /tmp/tmpl7gylrxa.java\t2023-03-24 12:33:22.076614632 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure in an error here\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "return false; // just to see lead.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:33:26.104599430 +0100\n+++ /tmp/tmpfkb5gg6c.java\t2023-03-24 12:33:26.104599430 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to see lead.\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "return false; // n is the root of cycle.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:33:29.960584879 +0100\n+++ /tmp/tmpsz1kiwrk.java\t2023-03-24 12:33:29.960584879 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // n is the root of cycle.\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "return false; // n is the root of the stack",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:33:33.792570417 +0100\n+++ /tmp/tmpxnpdtnvl.java\t2023-03-24 12:33:33.796570401 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // n is the root of the stack\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "return false; // recurse to an error here",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:33:37.776555379 +0100\n+++ /tmp/tmp6kizfdqi.java\t2023-03-24 12:33:37.776555379 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // recurse to an error here\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "return false; // just to add an file value.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:33:41.696540582 +0100\n+++ /tmp/tmpz4yyfezn.java\t2023-03-24 12:33:41.696540582 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to add an file value.\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "return false; // just to join elements",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:33:45.684525527 +0100\n+++ /tmp/tmpg2vvzglz.java\t2023-03-24 12:33:45.684525527 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to join elements\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "return false; // must be an depth to first span",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:33:49.680510439 +0100\n+++ /tmp/tmp9fk_3mtv.java\t2023-03-24 12:33:49.680510439 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // must be an depth to first span\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "return false; // just to ensure in the entry",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:33:53.808494855 +0100\n+++ /tmp/tmp3lyqvilc.java\t2023-03-24 12:33:53.812494840 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure in the entry\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "return false; // just to ensure the entry",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:33:57.784479840 +0100\n+++ /tmp/tmp29_j6x26.java\t2023-03-24 12:33:57.784479840 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure the entry\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "return false; // NOSONAR (true)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:34:01.732464934 +0100\n+++ /tmp/tmpa8mt4w79.java\t2023-03-24 12:34:01.732464934 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // NOSONAR (true)\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "return false; // IMEI",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:34:05.532450584 +0100\n+++ /tmp/tmpk4md29tu.java\t2023-03-24 12:34:05.532450584 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // IMEI\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "return false; // just does not an error here",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:34:09.300436351 +0100\n+++ /tmp/tmpb7pw3e8b.java\t2023-03-24 12:34:09.304436338 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just does not an error here\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "return false; // just to ensure resolve a number",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:34:14.136418087 +0100\n+++ /tmp/tmprt49nwul.java\t2023-03-24 12:34:14.136418087 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure resolve a number\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "return false; // streams add an error here",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:34:20.436394289 +0100\n+++ /tmp/tmpvlcmpkae.java\t2023-03-24 12:34:20.436394289 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // streams add an error here\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "return false; // false -> not an error here",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:34:24.648378379 +0100\n+++ /tmp/tmphj2db3lg.java\t2023-03-24 12:34:24.648378379 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // false -> not an error here\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "return false; // remove all other instances",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:34:29.828358807 +0100\n+++ /tmp/tmpdczleyg_.java\t2023-03-24 12:34:29.828358807 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // remove all other instances\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "return false; // just to add an current order",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:34:34.344341746 +0100\n+++ /tmp/tmpqgoet8wl.java\t2023-03-24 12:34:34.344341746 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to add an current order\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "return false; // just vary",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:34:40.360319015 +0100\n+++ /tmp/tmpbtkb3urf.java\t2023-03-24 12:34:40.360319015 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just vary\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "return false; // just to nodeMapper.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:34:45.640299059 +0100\n+++ /tmp/tmpjx4x7_mx.java\t2023-03-24 12:34:45.640299059 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to nodeMapper.\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "return false; // just to ensure with the entry",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:34:50.352281254 +0100\n+++ /tmp/tmpag037skf.java\t2023-03-24 12:34:50.352281254 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to ensure with the entry\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "return false; // just does not yet implemented",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:34:55.528261688 +0100\n+++ /tmp/tmp68inas_f.java\t2023-03-24 12:34:55.528261688 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just does not yet implemented\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "return false; // see child.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:35:00.380243351 +0100\n+++ /tmp/tmpa8b479da.java\t2023-03-24 12:35:00.380243351 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // see child.\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "return false; // just to left.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:35:05.460224147 +0100\n+++ /tmp/tmp0focz8mi.java\t2023-03-24 12:35:05.464224132 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to left.\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "return false; // just guesses",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:35:11.380201766 +0100\n+++ /tmp/tmpwu8okuh6.java\t2023-03-24 12:35:11.380201766 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just guesses\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "return false; // an error here",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:35:15.640185658 +0100\n+++ /tmp/tmpfp0jjdw_.java\t2023-03-24 12:35:15.640185658 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // an error here\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "return false; // just to add an errorMapper",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:35:20.120168721 +0100\n+++ /tmp/tmpa_09mkev.java\t2023-03-24 12:35:20.120168721 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to add an errorMapper\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "return false; // just to children",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:35:25.324149043 +0100\n+++ /tmp/tmp0g523b9e.java\t2023-03-24 12:35:25.324149043 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to children\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "return false; // just does dit",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:35:30.820128258 +0100\n+++ /tmp/tmpoa_91904.java\t2023-03-24 12:35:30.820128258 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just does dit\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "return false; // must be a number",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:35:35.768109544 +0100\n+++ /tmp/tmpbi_0xv28.java\t2023-03-24 12:35:35.768109544 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // must be a number\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "return false; // n is any.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:35:40.572091377 +0100\n+++ /tmp/tmpjitzg7fp.java\t2023-03-24 12:35:40.572091377 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // n is any.\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "return false; // IME escape.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:35:46.128070361 +0100\n+++ /tmp/tmp9ix1he50.java\t2023-03-24 12:35:46.132070344 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // IME escape.\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "return false; // n is negative",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:35:50.048055531 +0100\n+++ /tmp/tmppe6c5s43.java\t2023-03-24 12:35:50.048055531 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // n is negative\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "return false; // just to dit",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:35:54.068040326 +0100\n+++ /tmp/tmp8mmy3zvc.java\t2023-03-24 12:35:54.068040326 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just to dit\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "return false; //\", false);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:35:58.040025299 +0100\n+++ /tmp/tmp0w8sonls.java\t2023-03-24 12:35:58.044025283 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; //\", false);\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "return false; // just does not found",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:36:02.212009515 +0100\n+++ /tmp/tmpq_7dhzkk.java\t2023-03-24 12:36:02.216009499 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just does not found\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "return false; // already added.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:36:06.239994272 +0100\n+++ /tmp/tmp3ke8f5dr.java\t2023-03-24 12:36:06.239994272 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // already added.\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "return false; // skip list",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:36:10.215979229 +0100\n+++ /tmp/tmp270j_n3p.java\t2023-03-24 12:36:10.215979229 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // skip list\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "return false; // just does cell info",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:36:14.259963925 +0100\n+++ /tmp/tmpumi6ta1k.java\t2023-03-24 12:36:14.259963925 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just does cell info\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "return false; //conversion nodeMapper.",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:36:18.399948261 +0100\n+++ /tmp/tmpgk7pssb8.java\t2023-03-24 12:36:18.399948261 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; //conversion nodeMapper.\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "return false; // just assume negative",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:36:22.435932984 +0100\n+++ /tmp/tmpalyf0_j7.java\t2023-03-24 12:36:22.435932984 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // just assume negative\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "return false; // see dynamic query",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:36:26.367918104 +0100\n+++ /tmp/tmpbld4_ixz.java\t2023-03-24 12:36:26.371918087 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // see dynamic query\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "return false; // end of list",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/is_valid_parenthesization/java_programs/IS_VALID_PARENTHESIZATION.java\t2023-03-24 12:36:30.443902676 +0100\n+++ /tmp/tmpl_5hvefz.java\t2023-03-24 12:36:30.443902676 +0100\n@@ -19,8 +19,8 @@\n             } else {\n                 depth--;\n                 if (depth < 0) { return false; }\n             }\n         }\n-        return true;\n+return false; // end of list\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "return depth==0;"
    },
    "levenshtein": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "return 1 + target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:31:58.144931079 +0100\n+++ /tmp/tmpndc799ph.java\t2023-03-24 12:31:58.796928623 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "return 1 + source.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:01.316919132 +0100\n+++ /tmp/tmpznpw2wti.java\t2023-03-24 12:32:01.316919132 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + source.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "return 1 + target.substring(1) - 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:03.852909578 +0100\n+++ /tmp/tmp0somor6h.java\t2023-03-24 12:32:04.180908342 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + target.substring(1) - 1;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "return 1 + source.substring(1) - 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:06.008901455 +0100\n+++ /tmp/tmpp2gvmjdi.java\t2023-03-24 12:32:06.012901439 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + source.substring(1) - 1;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "return source.substring(1), target.substring(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:09.304889035 +0100\n+++ /tmp/tmpdixivbel.java\t2023-03-24 12:32:09.304889035 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1), target.substring(1));\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "return 1 + target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:11.348881334 +0100\n+++ /tmp/tmpsf_w7mqr.java\t2023-03-24 12:32:11.352881321 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "return source.substring(1 + target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:14.396869850 +0100\n+++ /tmp/tmpwtc0twkg.java\t2023-03-24 12:32:14.400869835 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1 + target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "return source.substring(1), target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:16.388862344 +0100\n+++ /tmp/tmp2pilli70.java\t2023-03-24 12:32:16.388862344 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1), target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "return source.substring(1, target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:18.036856131 +0100\n+++ /tmp/tmpedv81592.java\t2023-03-24 12:32:18.036856131 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1, target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "return source.substring(1, target.substring(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:20.392847254 +0100\n+++ /tmp/tmpnuuh4xdl.java\t2023-03-24 12:32:20.576846561 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1, target.substring(1));\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "return source.substring(1), target.substring(1) - 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:22.768838300 +0100\n+++ /tmp/tmpcr8jrcih.java\t2023-03-24 12:32:22.768838300 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1), target.substring(1) - 1;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "return source.substring(target.substring(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:24.300832523 +0100\n+++ /tmp/tmpb479ce2d.java\t2023-03-24 12:32:24.300832523 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(target.substring(1));\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "return source.substring Matcher, target.substring(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:26.160825515 +0100\n+++ /tmp/tmpbwhpz5y6.java\t2023-03-24 12:32:26.160825515 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring Matcher, target.substring(1));\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "return 1 + source.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:28.208817793 +0100\n+++ /tmp/tmph59wl_6j.java\t2023-03-24 12:32:28.344817283 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + source.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "return 1 + target.substringsubstring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:30.348809729 +0100\n+++ /tmp/tmp9kw33ycy.java\t2023-03-24 12:32:30.348809729 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + target.substringsubstring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "return 1 + target.substring(1), target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:32.124803031 +0100\n+++ /tmp/tmpr3373rl9.java\t2023-03-24 12:32:32.128803018 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + target.substring(1), target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "return source.substring(source.substring(1) - 1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:33.868796459 +0100\n+++ /tmp/tmpjcea9ob6.java\t2023-03-24 12:32:33.868796459 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(source.substring(1) - 1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "return 1 + source.substringsubstring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:35.652789732 +0100\n+++ /tmp/tmpyqiwegdy.java\t2023-03-24 12:32:35.652789732 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + source.substringsubstring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "return 1 + target.substringsubstring(1) - 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:37.512782721 +0100\n+++ /tmp/tmp8v2ouu6e.java\t2023-03-24 12:32:37.512782721 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + target.substringsubstring(1) - 1;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "return 2 + target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:39.324775890 +0100\n+++ /tmp/tmpjy8jc2zq.java\t2023-03-24 12:32:39.324775890 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 2 + target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "return 1 + source.substringsubstring(1) - 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:41.116769131 +0100\n+++ /tmp/tmpfeao17ch.java\t2023-03-24 12:32:41.116769131 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + source.substringsubstring(1) - 1;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "return source.substring(2 + target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:42.928762301 +0100\n+++ /tmp/tmplin67zni.java\t2023-03-24 12:32:42.928762301 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(2 + target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "return 1 + target.substring(3);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:44.608755964 +0100\n+++ /tmp/tmppkbtp_cf.java\t2023-03-24 12:32:44.608755964 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + target.substring(3);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "return source.substring(source.length() - 1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:46.408749177 +0100\n+++ /tmp/tmp9lyx451q.java\t2023-03-24 12:32:46.408749177 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(source.length() - 1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "return source.substring(source.charAt(1) - 1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:48.176742510 +0100\n+++ /tmp/tmppr2kz6to.java\t2023-03-24 12:32:48.176742510 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(source.charAt(1) - 1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "return source.substring(source.substring(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:49.996735649 +0100\n+++ /tmp/tmpl9jashue.java\t2023-03-24 12:32:50.000735632 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(source.substring(1));\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "return source.substringsubstring target.substring(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:51.856728634 +0100\n+++ /tmp/tmp2cusyvyi.java\t2023-03-24 12:32:51.856728634 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substringsubstring target.substring(1));\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "return source.substring(1, target.substring(1) - 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:53.600722055 +0100\n+++ /tmp/tmpdqf_41tq.java\t2023-03-24 12:32:53.600722055 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1, target.substring(1) - 1;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "return 2 + source.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:55.360715420 +0100\n+++ /tmp/tmpnckogl75.java\t2023-03-24 12:32:55.364715404 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 2 + source.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "return 1 + source.substring(3);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:57.160708630 +0100\n+++ /tmp/tmpksfkxd17.java\t2023-03-24 12:32:57.160708630 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + source.substring(3);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "return source.substringsubstring target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:32:58.960701841 +0100\n+++ /tmp/tmpo27mxar0.java\t2023-03-24 12:32:58.960701841 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substringsubstring target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "return source.substring(1) - 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:00.632695533 +0100\n+++ /tmp/tmph2sku1ff.java\t2023-03-24 12:33:00.632695533 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1) - 1;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "return source.substring + target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:02.420688790 +0100\n+++ /tmp/tmped9fyjzh.java\t2023-03-24 12:33:02.420688790 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring + target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "return source.substring(target.substring(1) - 1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:04.164682210 +0100\n+++ /tmp/tmp3cp122ew.java\t2023-03-24 12:33:04.164682210 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(target.substring(1) - 1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "return 1 + target.substring(1), target.substring(2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:06.024675196 +0100\n+++ /tmp/tmpvnzvp23w.java\t2023-03-24 12:33:06.028675180 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + target.substring(1), target.substring(2);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "return source.substring Matcher, target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:07.724668780 +0100\n+++ /tmp/tmpl7hy0m_0.java\t2023-03-24 12:33:07.724668780 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring Matcher, target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "return 1 + source.substring(1), target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:09.428662352 +0100\n+++ /tmp/tmp9del6vvk.java\t2023-03-24 12:33:09.428662352 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + source.substring(1), target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "return 1 + target.substringsubstring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:11.148655865 +0100\n+++ /tmp/tmpm2tqzm8p.java\t2023-03-24 12:33:11.148655865 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + target.substringsubstring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "return source.substring( target.substring(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:13.044648711 +0100\n+++ /tmp/tmpb8w35qy1.java\t2023-03-24 12:33:13.044648711 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring( target.substring(1));\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "return source.substring(1 + target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:14.896641724 +0100\n+++ /tmp/tmpmb7v15hs.java\t2023-03-24 12:33:14.896641724 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1 + target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "return 1 + target.substring(2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:16.648635114 +0100\n+++ /tmp/tmpl25wbxo0.java\t2023-03-24 12:33:16.652635097 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + target.substring(2);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "return 1 + target.substringRECORDS;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:18.440628353 +0100\n+++ /tmp/tmpi0ku35a4.java\t2023-03-24 12:33:18.440628353 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + target.substringRECORDS;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "return source.substring(1, target.substringsubstring(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:20.184621772 +0100\n+++ /tmp/tmpf8pv2fbf.java\t2023-03-24 12:33:20.184621772 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1, target.substringsubstring(1));\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "return source.substring(source.length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:22.028614812 +0100\n+++ /tmp/tmpcatyijc1.java\t2023-03-24 12:33:22.028614812 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(source.length;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "return source.substring(1 + target.substring(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:23.740608353 +0100\n+++ /tmp/tmponi2j8kl.java\t2023-03-24 12:33:23.744608336 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1 + target.substring(1));\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "return source.substringsubstring(1), target.substring(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:25.612601289 +0100\n+++ /tmp/tmpshfvds72.java\t2023-03-24 12:33:25.612601289 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substringsubstring(1), target.substring(1));\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "return source.substring(1) - target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:27.380594617 +0100\n+++ /tmp/tmp43m5fixs.java\t2023-03-24 12:33:27.380594617 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1) - target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "return 1 + source.substring(1), target.substring(2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:29.216587688 +0100\n+++ /tmp/tmpltxaa6qw.java\t2023-03-24 12:33:29.216587688 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + source.substring(1), target.substring(2);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "return 1 + target.substringstd;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:30.968581075 +0100\n+++ /tmp/tmpwu5egsoy.java\t2023-03-24 12:33:30.968581075 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + target.substringstd;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "return 1 + source.substring(2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:32.768574280 +0100\n+++ /tmp/tmpkp7vlucg.java\t2023-03-24 12:33:32.768574280 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + source.substring(2);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "return 1 + source.substring Matcher.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:34.564567501 +0100\n+++ /tmp/tmp9zfbgs_a.java\t2023-03-24 12:33:34.568567488 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + source.substring Matcher.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "return source.substring(target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:36.264561086 +0100\n+++ /tmp/tmp6ifx89b5.java\t2023-03-24 12:33:36.264561086 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "return source.substring(1). target.substring(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:37.940554761 +0100\n+++ /tmp/tmptqb_txoy.java\t2023-03-24 12:33:37.940554761 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1). target.substring(1));\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "return source.substring(1). target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:39.596548509 +0100\n+++ /tmp/tmpg_i87ypr.java\t2023-03-24 12:33:39.600548492 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1). target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "return source.substring( source.substring(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:41.460541473 +0100\n+++ /tmp/tmpc7zijy4p.java\t2023-03-24 12:33:41.460541473 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring( source.substring(1));\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "return source.substring(source.length + 1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:43.296534542 +0100\n+++ /tmp/tmpyjnih9i2.java\t2023-03-24 12:33:43.300534525 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(source.length + 1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "return source.substring(source.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:45.164527490 +0100\n+++ /tmp/tmp9jz6q90d.java\t2023-03-24 12:33:45.164527490 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(source.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "return source.substring(10, target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:46.792521342 +0100\n+++ /tmp/tmp_0o_g9_c.java\t2023-03-24 12:33:46.792521342 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(10, target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "return source.substring(1), source.substring(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:48.604514503 +0100\n+++ /tmp/tmp38udq6fj.java\t2023-03-24 12:33:48.604514503 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1), source.substring(1));\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "return 1 + target.substring(1) == 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:50.288508145 +0100\n+++ /tmp/tmpmxcq9qa6.java\t2023-03-24 12:33:50.292508128 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + target.substring(1) == 1;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "return 1 + source.substringsubstring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:52.080501377 +0100\n+++ /tmp/tmp4w6ya3d9.java\t2023-03-24 12:33:52.080501377 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + source.substringsubstring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "return 1 + source.substringstd;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:53.980494206 +0100\n+++ /tmp/tmplfi0zooj.java\t2023-03-24 12:33:53.980494206 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + source.substringstd;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "return 2 + target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:55.736487573 +0100\n+++ /tmp/tmpyff0_fqo.java\t2023-03-24 12:33:55.736487573 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 2 + target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "return source.substring( target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:57.640480386 +0100\n+++ /tmp/tmplo952hlq.java\t2023-03-24 12:33:57.644480369 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring( target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "return source.substring(3, target.substring(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:33:59.372473845 +0100\n+++ /tmp/tmpxdnkpoo3.java\t2023-03-24 12:33:59.372473845 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(3, target.substring(1));\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "return 1 + source.substringRECORDS;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:01.296466580 +0100\n+++ /tmp/tmp4w6jbgu7.java\t2023-03-24 12:34:01.296466580 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + source.substringRECORDS;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "return 2 + source.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:03.088459813 +0100\n+++ /tmp/tmpken0c6u0.java\t2023-03-24 12:34:03.092459798 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 2 + source.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "return source.substring(3, target.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:04.908452940 +0100\n+++ /tmp/tmpumha129r.java\t2023-03-24 12:34:04.908452940 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(3, target.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "return 2 + target.substringsubstring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:06.736446034 +0100\n+++ /tmp/tmp9zq5s22n.java\t2023-03-24 12:34:06.736446034 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 2 + target.substringsubstring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "return 1 + target.substring(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:09.116437046 +0100\n+++ /tmp/tmp4jwzu5ag.java\t2023-03-24 12:34:09.120437033 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + target.substring(1));\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "return 2 + source.substring(1) - 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:11.176429267 +0100\n+++ /tmp/tmpo0zmqjuk.java\t2023-03-24 12:34:11.176429267 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 2 + source.substring(1) - 1;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "return 2 + source.substringsubstring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:13.220421545 +0100\n+++ /tmp/tmpoledswfh.java\t2023-03-24 12:34:13.848419173 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 2 + source.substringsubstring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "return 1 + target.substringstdstd;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:16.432409413 +0100\n+++ /tmp/tmpw7hynr12.java\t2023-03-24 12:34:16.432409413 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + target.substringstdstd;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "return 1 + source.substring(1) - 2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:19.820396615 +0100\n+++ /tmp/tmpsphr__ec.java\t2023-03-24 12:34:19.904396300 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + source.substring(1) - 2;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "return 1 + target.substring(1) - 2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:22.076388093 +0100\n+++ /tmp/tmpwgzjvtns.java\t2023-03-24 12:34:22.076388093 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + target.substring(1) - 2;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "return source.substring(1, target.substring(2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:24.004380810 +0100\n+++ /tmp/tmpzpnluvy8.java\t2023-03-24 12:34:24.008380797 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1, target.substring(2);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "return source.substring(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:26.196372530 +0100\n+++ /tmp/tmpea7xc7jc.java\t2023-03-24 12:34:26.196372530 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1));\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "return 1 + target.substring(1)];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:29.388360471 +0100\n+++ /tmp/tmpovjwoeko.java\t2023-03-24 12:34:29.532359927 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + target.substring(1)];\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "return source.substring(1) - 2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:31.580352188 +0100\n+++ /tmp/tmpym48or24.java\t2023-03-24 12:34:31.580352188 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1) - 2;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "return 1 + target.substringCount;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:34.348341729 +0100\n+++ /tmp/tmp06smji61.java\t2023-03-24 12:34:34.352341716 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + target.substringCount;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "return source.substringsubstring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:36.964331844 +0100\n+++ /tmp/tmp9kfdmfyr.java\t2023-03-24 12:34:36.964331844 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substringsubstring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "return 2 + source.substring(2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:39.240323246 +0100\n+++ /tmp/tmp5ycbt8oc.java\t2023-03-24 12:34:39.240323246 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 2 + source.substring(2);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "return 1 + source.substring(1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:42.124312348 +0100\n+++ /tmp/tmp1bml471m.java\t2023-03-24 12:34:42.124312348 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + source.substring(1));\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "return source.substring(1) - 1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:44.932301737 +0100\n+++ /tmp/tmpf66lc5nm.java\t2023-03-24 12:34:45.112301055 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1) - 1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "return source.substring(2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:47.184293227 +0100\n+++ /tmp/tmph4emntrv.java\t2023-03-24 12:34:47.340292637 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(2);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "return 2 + target.substring(3);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:50.100282206 +0100\n+++ /tmp/tmpwqb7nunb.java\t2023-03-24 12:34:50.100282206 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 2 + target.substring(3);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "return 2 + target.substring(2);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:52.784272060 +0100\n+++ /tmp/tmp3xx25982.java\t2023-03-24 12:34:52.784272060 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 2 + target.substring(2);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "return 1 + 4;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:34:55.528261688 +0100\n+++ /tmp/tmpg8xmmkfn.java\t2023-03-24 12:34:55.528261688 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + 4;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "return source.substringsubstring(3);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:35:01.684238421 +0100\n+++ /tmp/tmpq2a2a3_x.java\t2023-03-24 12:35:01.684238421 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substringsubstring(3);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "return 1 + y;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:35:03.232232570 +0100\n+++ /tmp/tmpn6w4v3f0.java\t2023-03-24 12:35:03.232232570 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + y;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "return source.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:35:05.468224115 +0100\n+++ /tmp/tmp5oqi8uae.java\t2023-03-24 12:35:05.468224115 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "return 2 + 2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:35:07.680215754 +0100\n+++ /tmp/tmph2quh4lu.java\t2023-03-24 12:35:07.680215754 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 2 + 2;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "return 1 + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:35:12.656196943 +0100\n+++ /tmp/tmpyvnepiti.java\t2023-03-24 12:35:12.660196927 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + 1;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "return source.substring(1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:35:17.860177267 +0100\n+++ /tmp/tmpbef1_w35.java\t2023-03-24 12:35:17.864177250 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(1);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "return 2 + 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:35:19.584170746 +0100\n+++ /tmp/tmpjekti__2.java\t2023-03-24 12:35:19.588170733 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 2 + 1;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "return source.substring(3);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:35:25.372148861 +0100\n+++ /tmp/tmp2a1cjzwq.java\t2023-03-24 12:35:25.372148861 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return source.substring(3);\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "return 1 + length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:35:27.876139391 +0100\n+++ /tmp/tmprswqx3oo.java\t2023-03-24 12:35:27.876139391 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + length;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "return 1 + lastComparison;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:35:30.492129500 +0100\n+++ /tmp/tmpztxrx5op.java\t2023-03-24 12:35:30.596129106 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + lastComparison;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "return 2 + length;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:35:33.000120015 +0100\n+++ /tmp/tmpkaak89ux.java\t2023-03-24 12:35:33.028119907 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 2 + length;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "return 1 + 2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/levenshtein/java_programs/LEVENSHTEIN.java\t2023-03-24 12:35:35.424110848 +0100\n+++ /tmp/tmpgljcz7id.java\t2023-03-24 12:35:35.424110848 +0100\n@@ -12,11 +12,11 @@\n public class LEVENSHTEIN {\n     public static int levenshtein(String source, String target) {\n         if (source.isEmpty() || target.isEmpty()) {\n             return source.isEmpty() ? target.length() : source.length();\n         } else if (source.charAt(0) == target.charAt(0)) {\n-            return 1 + levenshtein(source.substring(1), target.substring(1));\n+return 1 + 2;\n         } else {\n             return 1 + Math.min(Math.min(\n                     levenshtein(source,              target.substring(1)),\n                     levenshtein(source.substring(1), target.substring(1))),\n                     levenshtein(source.substring(1), target)\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "return levenshtein(source.substring(1), target.substring(1));"
    },
    "reverse_linked_list": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:35:42.852082753 +0100\n+++ /tmp/tmp8efn5s32.java\t2023-03-24 12:35:43.396080696 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "[END_BUGGY] node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:35:48.284062206 +0100\n+++ /tmp/tmpt1yvij62.java\t2023-03-24 12:35:48.284062206 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+[END_BUGGY] node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "if (prevnode!= nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:35:50.044055548 +0100\n+++ /tmp/tmpe_jysro4.java\t2023-03-24 12:35:50.044055548 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+if (prevnode!= nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "// next node.prevnode; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:35:51.764049040 +0100\n+++ /tmp/tmpqbjkft18.java\t2023-03-24 12:35:51.768049027 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// next node.prevnode; }\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "// next node = prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:35:55.924033304 +0100\n+++ /tmp/tmph__402_l.java\t2023-03-24 12:35:55.924033304 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// next node = prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "[END_BUGGY] node = prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:36:00.168017248 +0100\n+++ /tmp/tmp6fyurp5x.java\t2023-03-24 12:36:00.172017231 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+[END_BUGGY] node = prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "// next node = prevnode; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:36:01.968010437 +0100\n+++ /tmp/tmp53z8fz0k.java\t2023-03-24 12:36:01.968010437 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// next node = prevnode; }\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "// prev node; use the next node.node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:36:06.147994620 +0100\n+++ /tmp/tmpdwyr5p90.java\t2023-03-24 12:36:06.147994620 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// prev node; use the next node.node;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "Node nextnode = prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:36:10.207979258 +0100\n+++ /tmp/tmp7t8fwo3k.java\t2023-03-24 12:36:10.207979258 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+Node nextnode = prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "// nextnode = prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:36:12.003972464 +0100\n+++ /tmp/tmp8b2agefn.java\t2023-03-24 12:36:12.003972464 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// nextnode = prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "// prev node; C++ node.prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:36:16.223956493 +0100\n+++ /tmp/tmpto6h0zhe.java\t2023-03-24 12:36:16.227956480 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// prev node; C++ node.prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "D nextnode = prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:36:20.327940963 +0100\n+++ /tmp/tmp92s5tnwr.java\t2023-03-24 12:36:20.327940963 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+D nextnode = prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "// prev node; next node.prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:36:22.263933637 +0100\n+++ /tmp/tmp4ssjv0ou.java\t2023-03-24 12:36:22.263933637 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// prev node; next node.prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "nextnode = prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:36:26.403917966 +0100\n+++ /tmp/tmpmfx80kqj.java\t2023-03-24 12:36:26.423917892 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+nextnode = prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "D node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:36:30.463902602 +0100\n+++ /tmp/tmpbd9bv2q4.java\t2023-03-24 12:36:30.463902602 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+D node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "// prev node; next next node.prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:36:32.215895969 +0100\n+++ /tmp/tmpmx2rjf_8.java\t2023-03-24 12:36:32.215895969 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// prev node; next next node.prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "// prev node; use next node.prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:36:36.583879435 +0100\n+++ /tmp/tmphd42ca33.java\t2023-03-24 12:36:36.583879435 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// prev node; use next node.prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "// next node.prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:36:40.679863930 +0100\n+++ /tmp/tmp6yiwde78.java\t2023-03-24 12:36:40.679863930 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// next node.prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:36:44.715848652 +0100\n+++ /tmp/tmpu_0gzh6r.java\t2023-03-24 12:36:44.719848639 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "// next node.prev order = prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:36:48.755833359 +0100\n+++ /tmp/tmpksjz7m3h.java\t2023-03-24 12:36:48.755833359 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// next node.prev order = prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "Dnode = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:36:52.879817746 +0100\n+++ /tmp/tmphx2n4b_u.java\t2023-03-24 12:36:52.879817746 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+Dnode = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "// prev node; use the next node.next;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:36:54.579811307 +0100\n+++ /tmp/tmpdspfnf4f.java\t2023-03-24 12:36:54.579811307 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// prev node; use the next node.next;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "[END_BUGGY] node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:36:58.579796164 +0100\n+++ /tmp/tmp9hdg5gze.java\t2023-03-24 12:36:58.579796164 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+[END_BUGGY] node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "// next node.prevnode; next nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:00.287789697 +0100\n+++ /tmp/tmpxxjmtmrh.java\t2023-03-24 12:37:00.287789697 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// next node.prevnode; next nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "if (prevnode.next;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:04.267774627 +0100\n+++ /tmp/tmp1ecba0eq.java\t2023-03-24 12:37:04.267774627 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+if (prevnode.next;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "if (node.next;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:05.987768114 +0100\n+++ /tmp/tmpdskskclh.java\t2023-03-24 12:37:05.987768114 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+if (node.next;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "//node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:07.743761465 +0100\n+++ /tmp/tmpvez7olz9.java\t2023-03-24 12:37:07.743761465 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+//node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "memoized node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:11.887745771 +0100\n+++ /tmp/tmp8rjbk0wc.java\t2023-03-24 12:37:11.891745754 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+memoized node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "if (prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:13.715738849 +0100\n+++ /tmp/tmpgu39eocl.java\t2023-03-24 12:37:13.719738832 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+if (prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "// prevnode = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:15.507732060 +0100\n+++ /tmp/tmplhufxg70.java\t2023-03-24 12:37:15.507732060 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// prevnode = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "Node node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:19.455717110 +0100\n+++ /tmp/tmpa6c09p0m.java\t2023-03-24 12:37:19.459717093 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+Node node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "int node = prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:21.179710582 +0100\n+++ /tmp/tmpjdmsjfmx.java\t2023-03-24 12:37:21.183710566 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+int node = prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "// prev node; we use the nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:23.003703673 +0100\n+++ /tmp/tmp1we1hk_2.java\t2023-03-24 12:37:23.007703658 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// prev node; we use the nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "Node node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:28.055684538 +0100\n+++ /tmp/tmpifi8v3j3.java\t2023-03-24 12:37:28.055684538 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+Node node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "// next node.prev prev prev node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:29.791677962 +0100\n+++ /tmp/tmp7knukqoe.java\t2023-03-24 12:37:29.791677962 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// next node.prev prev prev node;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "// next node.prev order prev prev node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:34.555659917 +0100\n+++ /tmp/tmpfir1frdn.java\t2023-03-24 12:37:34.555659917 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// next node.prev order prev prev node;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "nonode = prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:39.835639914 +0100\n+++ /tmp/tmpmvbiny5i.java\t2023-03-24 12:37:39.835639914 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+nonode = prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "(node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:41.415633928 +0100\n+++ /tmp/tmp10cl_uae.java\t2023-03-24 12:37:41.415633928 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+(node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "// next node.prev node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:43.975624232 +0100\n+++ /tmp/tmpral2mep6.java\t2023-03-24 12:37:44.147623581 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// next node.prev node; }\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "gs node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:49.375603775 +0100\n+++ /tmp/tmp2sw5t3j4.java\t2023-03-24 12:37:49.375603775 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+gs node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "margin node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:50.971597728 +0100\n+++ /tmp/tmpoe6dwhpd.java\t2023-03-24 12:37:50.971597728 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+margin node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "(\"node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:52.819590723 +0100\n+++ /tmp/tmpg0vswjgg.java\t2023-03-24 12:37:52.819590723 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+(\"node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "// nextnode = prevnode; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:37:54.579584058 +0100\n+++ /tmp/tmpa3pcdu2d.java\t2023-03-24 12:37:54.711583557 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// nextnode = prevnode; }\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "Node node = prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:00.315562324 +0100\n+++ /tmp/tmp_r6sppm9.java\t2023-03-24 12:38:00.315562324 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+Node node = prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "final node node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:01.811556655 +0100\n+++ /tmp/tmpy3a_b4ll.java\t2023-03-24 12:38:01.811556655 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+final node node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "// prev node at the nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:05.707541890 +0100\n+++ /tmp/tmpvft4h_oo.java\t2023-03-24 12:38:05.707541890 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// prev node at the nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "// prev node; use the nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:12.119518180 +0100\n+++ /tmp/tmp3crupur1.java\t2023-03-24 12:38:12.119518180 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// prev node; use the nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "D node = prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:17.755499405 +0100\n+++ /tmp/tmptriwaidb.java\t2023-03-24 12:38:17.755499405 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+D node = prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "Up node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:19.447493764 +0100\n+++ /tmp/tmp16avh8bl.java\t2023-03-24 12:38:19.447493764 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+Up node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "values node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:21.399487250 +0100\n+++ /tmp/tmpjpk1ywbo.java\t2023-03-24 12:38:21.527486823 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+values node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "previousnode = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:23.663479697 +0100\n+++ /tmp/tmpb08btlfs.java\t2023-03-24 12:38:23.663479697 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+previousnode = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "SIZEnode = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:26.135471441 +0100\n+++ /tmp/tmp3gthx6kl.java\t2023-03-24 12:38:26.135471441 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+SIZEnode = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "char node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:28.363464000 +0100\n+++ /tmp/tmpxdsecrtq.java\t2023-03-24 12:38:28.363464000 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+char node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "// next node.prevnode;2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:30.735456069 +0100\n+++ /tmp/tmpbcghmkig.java\t2023-03-24 12:38:30.859455654 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// next node.prevnode;2;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "// prev node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:36.387437162 +0100\n+++ /tmp/tmpco6ns95n.java\t2023-03-24 12:38:36.387437162 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// prev node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "nextnode = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:41.563419823 +0100\n+++ /tmp/tmp6xeg5pp2.java\t2023-03-24 12:38:41.567419808 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+nextnode = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "48 node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:46.111404570 +0100\n+++ /tmp/tmp1wn0knxn.java\t2023-03-24 12:38:46.111404570 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+48 node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "Device node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:48.411396854 +0100\n+++ /tmp/tmpgvl_o369.java\t2023-03-24 12:38:48.503396543 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+Device node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "Identifier node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:50.707389145 +0100\n+++ /tmp/tmp4u3bkikp.java\t2023-03-24 12:38:50.827388739 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+Identifier node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "so node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:52.987381484 +0100\n+++ /tmp/tmpfvojdibt.java\t2023-03-24 12:38:52.987381484 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+so node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "previousnode = next;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:55.223373969 +0100\n+++ /tmp/tmptk9n05sq.java\t2023-03-24 12:38:55.223373969 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+previousnode = next;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "encoded node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:57.807365282 +0100\n+++ /tmp/tmpyr42tdjc.java\t2023-03-24 12:38:57.811365266 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+encoded node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "3 node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:38:59.523359509 +0100\n+++ /tmp/tmpl7gxygxn.java\t2023-03-24 12:38:59.671359010 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+3 node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "memoized node = prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:01.415353138 +0100\n+++ /tmp/tmp80vjy4xk.java\t2023-03-24 12:39:01.419353128 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+memoized node = prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "endpoint node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:03.231347026 +0100\n+++ /tmp/tmpc3fec8xp.java\t2023-03-24 12:39:03.231347026 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+endpoint node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "nonode = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:05.015341016 +0100\n+++ /tmp/tmpav79b_jx.java\t2023-03-24 12:39:05.015341016 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+nonode = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "// next node.prev node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:06.851334832 +0100\n+++ /tmp/tmp7wp87_jf.java\t2023-03-24 12:39:06.851334832 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// next node.prev node;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:10.847321359 +0100\n+++ /tmp/tmpqxdgoezi.java\t2023-03-24 12:39:10.847321359 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "12, node = prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:14.919307618 +0100\n+++ /tmp/tmph81h_0cu.java\t2023-03-24 12:39:14.923307602 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+12, node = prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "// next node = prev prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:16.663301729 +0100\n+++ /tmp/tmpld7s6bi7.java\t2023-03-24 12:39:16.663301729 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// next node = prev prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "int node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:20.587288473 +0100\n+++ /tmp/tmpqejmy7cn.java\t2023-03-24 12:39:20.587288473 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+int node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "previous node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:22.259282821 +0100\n+++ /tmp/tmpzh3xycjh.java\t2023-03-24 12:39:22.259282821 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+previous node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "lastnode = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:24.087276639 +0100\n+++ /tmp/tmpev2g8aux.java\t2023-03-24 12:39:24.087276639 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+lastnode = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "so node = prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:25.951270334 +0100\n+++ /tmp/tmp089f9nve.java\t2023-03-24 12:39:25.951270334 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+so node = prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "Ended node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:27.803264066 +0100\n+++ /tmp/tmpbkb_y6ge.java\t2023-03-24 12:39:27.807264052 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+Ended node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "Parameters node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:29.579258054 +0100\n+++ /tmp/tmp7jaon24b.java\t2023-03-24 12:39:29.579258054 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+Parameters node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "// node = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:31.315252172 +0100\n+++ /tmp/tmpmpf3utk0.java\t2023-03-24 12:39:31.315252172 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// node = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "// next node.node; }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:35.271238770 +0100\n+++ /tmp/tmp4ojm3at5.java\t2023-03-24 12:39:35.271238770 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// next node.node; }\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "// next node.prev2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:39.199225449 +0100\n+++ /tmp/tmpchqkky4c.java\t2023-03-24 12:39:39.203225433 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// next node.prev2;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "[END_BUGGY] node = next;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:43.135212092 +0100\n+++ /tmp/tmpb5q45oxh.java\t2023-03-24 12:39:43.135212092 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+[END_BUGGY] node = next;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "if (node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:44.803206428 +0100\n+++ /tmp/tmpy552m9t7.java\t2023-03-24 12:39:44.803206428 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+if (node;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "e = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:46.539200530 +0100\n+++ /tmp/tmpf38t_rmb.java\t2023-03-24 12:39:46.539200530 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+e = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "(prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:48.203194876 +0100\n+++ /tmp/tmppi2_qf1l.java\t2023-03-24 12:39:48.203194876 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+(prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "// next node.prev order",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:49.891189137 +0100\n+++ /tmp/tmpqiz07c0h.java\t2023-03-24 12:39:49.891189137 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+// next node.prev order\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "SIZEnode = next;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:53.935175386 +0100\n+++ /tmp/tmplqspcc40.java\t2023-03-24 12:39:53.935175386 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+SIZEnode = next;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "[END_BUGGY] = nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:55.791169071 +0100\n+++ /tmp/tmp0ac4rgd7.java\t2023-03-24 12:39:55.795169057 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+[END_BUGGY] = nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "\"\", nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:57.507163229 +0100\n+++ /tmp/tmp344s6eaj.java\t2023-03-24 12:39:57.507163229 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+\"\", nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "(\"node = next;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:39:59.247157304 +0100\n+++ /tmp/tmps3s8h_z8.java\t2023-03-24 12:39:59.247157304 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+(\"node = next;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "//node = next;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:40:00.951151501 +0100\n+++ /tmp/tmp5yp5q0k8.java\t2023-03-24 12:40:00.951151501 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+//node = next;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "return nextnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:40:05.007137675 +0100\n+++ /tmp/tmpf6nps04_.java\t2023-03-24 12:40:05.007137675 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+return nextnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "node = next;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:40:06.731131799 +0100\n+++ /tmp/tmp3jba6l61.java\t2023-03-24 12:40:06.735131785 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+node = next;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "(prevnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:40:08.455125919 +0100\n+++ /tmp/tmp3ndv1n65.java\t2023-03-24 12:40:08.455125919 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+(prevnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "(node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:40:10.111120268 +0100\n+++ /tmp/tmpw7ep8ovd.java\t2023-03-24 12:40:10.115120254 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+(node;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "previousnode;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:40:12.027113729 +0100\n+++ /tmp/tmpo36tczt9.java\t2023-03-24 12:40:12.027113729 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+previousnode;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "(node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:40:13.675108102 +0100\n+++ /tmp/tmptkz5fnps.java\t2023-03-24 12:40:13.679108088 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+(node;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "<>(node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:40:15.307102529 +0100\n+++ /tmp/tmp9246mtn3.java\t2023-03-24 12:40:15.319102485 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+<>(node;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "\", node;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:40:16.879097158 +0100\n+++ /tmp/tmpwxrn9c0x.java\t2023-03-24 12:40:16.879097158 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+\", node;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": ";",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:40:18.263092429 +0100\n+++ /tmp/tmptcvxejbc.java\t2023-03-24 12:40:18.263092429 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "20;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:40:21.647080859 +0100\n+++ /tmp/tmp131supd4.java\t2023-03-24 12:40:21.647080859 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+20;\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "};",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/reverse_linked_list/java_programs/REVERSE_LINKED_LIST.java\t2023-03-24 12:40:23.163075672 +0100\n+++ /tmp/tmp3221zjf_.java\t2023-03-24 12:40:23.163075672 +0100\n@@ -15,10 +15,11 @@\n         Node prevnode = null;\n         Node nextnode;\n         while (node != null) {\n             nextnode = node.getSuccessor();\n             node.setSuccessor(prevnode);\n+};\n             node = nextnode;\n         }\n         return prevnode;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "prevnode = node;"
    },
    "max_sublist_sum": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "max_ending_here = max_ending_here + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:36:37.463876106 +0100\n+++ /tmp/tmpzlb7pl13.java\t2023-03-24 12:36:37.519875894 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ending_here + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "max_ending_here = x + max_ending_here;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:36:41.631860329 +0100\n+++ /tmp/tmp77h5ia6p.java\t2023-03-24 12:36:41.631860329 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_ending_here;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "max_ending_here = y + max_ending_here;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:36:45.683844989 +0100\n+++ /tmp/tmpq_do7i8a.java\t2023-03-24 12:36:45.711844881 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = y + max_ending_here;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "max_ending_here = max_ALWAYS + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:36:47.551837918 +0100\n+++ /tmp/tmp1vhnfa3j.java\t2023-03-24 12:36:47.555837902 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ALWAYS + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "max_ending_here = max_Tail + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:36:49.307831267 +0100\n+++ /tmp/tmpu8jl_2_0.java\t2023-03-24 12:36:49.307831267 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_Tail + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "max_ending_here = max_start + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:36:51.019824786 +0100\n+++ /tmp/tmp24e8d_do.java\t2023-03-24 12:36:51.023824773 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_start + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "max_ending_here = max_running_here + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:36:52.823817957 +0100\n+++ /tmp/tmp3twmoejx.java\t2023-03-24 12:36:52.823817957 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_running_here + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "max_ending_here = max_ jj + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:36:54.599811232 +0100\n+++ /tmp/tmp2fqd51mz.java\t2023-03-24 12:36:54.603811219 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ jj + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "max_ending_here = max_and_here + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:36:56.303804782 +0100\n+++ /tmp/tmpjaemipdd.java\t2023-03-24 12:36:56.303804782 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_and_here + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "max_ending_here = max_ALLIN + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:36:58.107797952 +0100\n+++ /tmp/tmp9ngtwxwz.java\t2023-03-24 12:36:58.107797952 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ALLIN + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "max_ending_here = max_ void_here + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:36:59.919791091 +0100\n+++ /tmp/tmpha91z328.java\t2023-03-24 12:36:59.919791091 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ void_here + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "max_ending_here = max_sublistCount + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:01.551784911 +0100\n+++ /tmp/tmpqog6ilmh.java\t2023-03-24 12:37:01.551784911 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_sublistCount + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "max_ending_here = max_Sk_here + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:03.383777974 +0100\n+++ /tmp/tmpddjfhxjc.java\t2023-03-24 12:37:03.383777974 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_Sk_here + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "max_ending_here = max_QUEUE_here + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:05.159771250 +0100\n+++ /tmp/tmpyoal5fvp.java\t2023-03-24 12:37:05.159771250 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_QUEUE_here + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "max_ending_here = max_sublistOffset + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:06.795765054 +0100\n+++ /tmp/tmp7yo9r6ih.java\t2023-03-24 12:37:06.795765054 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_sublistOffset + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "max_ending_here = max_AN_here + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:08.495758616 +0100\n+++ /tmp/tmpqsq3d_1t.java\t2023-03-24 12:37:08.495758616 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_AN_here + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "max_ending_here = max_ALARM + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:10.303751768 +0100\n+++ /tmp/tmpzr0cfhoe.java\t2023-03-24 12:37:10.303751768 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ALARM + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "max_ending_here = max_ending_ characters + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:12.115744908 +0100\n+++ /tmp/tmp055t5s9z.java\t2023-03-24 12:37:12.115744908 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ending_ characters + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "max_ending_here = max_LF + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:13.755738695 +0100\n+++ /tmp/tmpqj3vu3e3.java\t2023-03-24 12:37:13.755738695 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_LF + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "max_ending_here = z + max_ending_here;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:15.547731911 +0100\n+++ /tmp/tmpvwc53rvf.java\t2023-03-24 12:37:15.547731911 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = z + max_ending_here;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "max_ending_here = x + max_ending;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:17.287725321 +0100\n+++ /tmp/tmpleie_39_.java\t2023-03-24 12:37:17.287725321 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_ending;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "max_ending_here = 9 + max_ending_here;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:19.063718595 +0100\n+++ /tmp/tmpv_zte4qi.java\t2023-03-24 12:37:19.067718578 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = 9 + max_ending_here;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "max_ending_here = max_ending_name + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:23.467701916 +0100\n+++ /tmp/tmpcscbo235.java\t2023-03-24 12:37:23.467701916 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ending_name + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "max_ending_here = max_mn_here + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:25.471694323 +0100\n+++ /tmp/tmp4ziq7a64.java\t2023-03-24 12:37:25.471694323 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_mn_here + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "max_ending_here = max_startTime + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:27.167687901 +0100\n+++ /tmp/tmpnm92s63d.java\t2023-03-24 12:37:27.171687884 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_startTime + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "max_ending_here = max_OUTPUT + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:29.811677887 +0100\n+++ /tmp/tmpu2jcyjou.java\t2023-03-24 12:37:29.811677887 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_OUTPUT + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "max_ending_here = max_sublistLength + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:31.955669765 +0100\n+++ /tmp/tmprrrsztp2.java\t2023-03-24 12:37:31.959669748 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_sublistLength + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "max_ending_here = max_errorCount + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:34.023661932 +0100\n+++ /tmp/tmpdc2icr0e.java\t2023-03-24 12:37:34.023661932 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_errorCount + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "max_ending_here = max_ending_ toIndex + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:36.791651447 +0100\n+++ /tmp/tmp7ioc6cxj.java\t2023-03-24 12:37:36.907651008 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ending_ toIndex + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "max_ending_here = max_ending_me + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:38.843643674 +0100\n+++ /tmp/tmpsnvbma0h.java\t2023-03-24 12:37:38.907643429 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ending_me + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "max_ending_here = max_ending_here / x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:41.447633807 +0100\n+++ /tmp/tmpzw18j6fc.java\t2023-03-24 12:37:41.447633807 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ending_here / x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "max_ending_here = piece + max_ending_here;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:46.399615049 +0100\n+++ /tmp/tmp5d9j7g2t.java\t2023-03-24 12:37:46.399615049 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = piece + max_ending_here;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "max_ending_here = max_AL 4) + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:48.627606606 +0100\n+++ /tmp/tmpl0bwpf6g.java\t2023-03-24 12:37:48.631606593 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_AL 4) + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "max_ending_here = max_Attributes.length + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:50.795598395 +0100\n+++ /tmp/tmpmxc6rwth.java\t2023-03-24 12:37:50.795598395 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_Attributes.length + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "max_ending_here = max_ending_ANY + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:52.915590362 +0100\n+++ /tmp/tmpv79d412c.java\t2023-03-24 12:37:52.915590362 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ending_ANY + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "max_ending_here = max_str + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:54.739583449 +0100\n+++ /tmp/tmpst4w4ng3.java\t2023-03-24 12:37:54.739583449 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_str + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "max_ending_here = max_ending_ bean + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:57.223574037 +0100\n+++ /tmp/tmptjt7htdm.java\t2023-03-24 12:37:57.223574037 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ending_ bean + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "max_ending_here = max_logOffset + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:37:58.995567323 +0100\n+++ /tmp/tmpyqv0ijoy.java\t2023-03-24 12:37:59.123566838 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_logOffset + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "max_ending_here = x + max_ending_ent;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:01.735556941 +0100\n+++ /tmp/tmprcus4wmm.java\t2023-03-24 12:38:01.735556941 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_ending_ent;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "max_ending_here = x + max_ending_ characters;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:03.991548395 +0100\n+++ /tmp/tmps29f9s52.java\t2023-03-24 12:38:04.343547061 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_ending_ characters;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "max_ending_here = max_ traceId + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:05.723541832 +0100\n+++ /tmp/tmpa1f3z3p1.java\t2023-03-24 12:38:05.867541286 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ traceId + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "max_ending_here = max_valued_here + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:09.467527644 +0100\n+++ /tmp/tmp6t5d4_76.java\t2023-03-24 12:38:09.467527644 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_valued_here + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "max_ending_here = max_ void_CLASS + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:12.355517391 +0100\n+++ /tmp/tmpi87rjj4b.java\t2023-03-24 12:38:12.355517391 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ void_CLASS + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "max_ending_here = max_ending_CLASS + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:14.291510947 +0100\n+++ /tmp/tmpec0prvq3.java\t2023-03-24 12:38:14.451510414 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ending_CLASS + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "max_ending_here = x + max_ending_ toIndex;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:17.251501082 +0100\n+++ /tmp/tmpadn2gy2h.java\t2023-03-24 12:38:17.255501071 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_ending_ toIndex;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "max_ending_here = max_startup_here + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:19.299494257 +0100\n+++ /tmp/tmpwbw3b7nk.java\t2023-03-24 12:38:19.299494257 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_startup_here + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "max_ending_here = max_ALANG + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:21.639486452 +0100\n+++ /tmp/tmpti0biqu_.java\t2023-03-24 12:38:21.639486452 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ALANG + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "max_ending_here = max_ending_MS + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:23.683479630 +0100\n+++ /tmp/tmpsqh848vk.java\t2023-03-24 12:38:23.683479630 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ending_MS + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "max_ending_here = max_ending_ Cycle + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:26.375470641 +0100\n+++ /tmp/tmpetqkzjwz.java\t2023-03-24 12:38:26.375470641 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ending_ Cycle + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "max_ending_here = max_ending_csv + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:28.367463984 +0100\n+++ /tmp/tmpdbfj823o.java\t2023-03-24 12:38:28.367463984 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ending_csv + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "max_ending_here = x + max_Sk_here;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:31.111454815 +0100\n+++ /tmp/tmpezue_s34.java\t2023-03-24 12:38:31.111454815 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_Sk_here;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "max_ending_here = max_before + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:33.359447293 +0100\n+++ /tmp/tmpgepnurs5.java\t2023-03-24 12:38:33.359447293 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_before + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "max_ending_here = max_ Num + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:35.023441725 +0100\n+++ /tmp/tmpl3usee04.java\t2023-03-24 12:38:35.023441725 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ Num + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "max_ending_here = max_ending_ export + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:36.767435890 +0100\n+++ /tmp/tmp_vyy5et9.java\t2023-03-24 12:38:36.767435890 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ending_ export + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "max_ending_here = max_ending_Piece + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:38.531429983 +0100\n+++ /tmp/tmpfdr9ywte.java\t2023-03-24 12:38:38.535429969 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ending_Piece + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "max_ending_here = x + max_ending_Deserializer;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:40.799422384 +0100\n+++ /tmp/tmpym71m9if.java\t2023-03-24 12:38:40.799422384 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_ending_Deserializer;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "max_ending_here = max_COLUMNS + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:43.367413776 +0100\n+++ /tmp/tmpr3c_tze_.java\t2023-03-24 12:38:43.367413776 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_COLUMNS + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "max_ending_here = max_startOffset + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:45.827405525 +0100\n+++ /tmp/tmp7owux9ec.java\t2023-03-24 12:38:45.827405525 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_startOffset + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "max_ending_here = max_Path + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:48.999394881 +0100\n+++ /tmp/tmplj5mj66i.java\t2023-03-24 12:38:49.003394867 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_Path + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "max_ending_here = x + max_ending_InBytes;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:50.855388648 +0100\n+++ /tmp/tmp804chqva.java\t2023-03-24 12:38:50.855388648 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_ending_InBytes;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "max_ending_here = max_compound + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:53.027381352 +0100\n+++ /tmp/tmp53mmgusp.java\t2023-03-24 12:38:53.027381352 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_compound + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "max_ending_here = 9 + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:38:55.439373244 +0100\n+++ /tmp/tmpuavwibr4.java\t2023-03-24 12:38:55.439373244 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = 9 + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "max_ending_here = x + max_ending_name;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:01.455353007 +0100\n+++ /tmp/tmpjjphucjn.java\t2023-03-24 12:39:01.459352993 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_ending_name;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "max_ending_here = max_ANNOTATION + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:03.267346905 +0100\n+++ /tmp/tmpql_0xwez.java\t2023-03-24 12:39:03.267346905 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ANNOTATION + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "max_ending_here = max_ending_DISTANCE + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:05.047340911 +0100\n+++ /tmp/tmpuan3t7y5.java\t2023-03-24 12:39:05.051340897 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ending_DISTANCE + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "max_ending_here = x + max_ending_ parentId;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:06.823334926 +0100\n+++ /tmp/tmp42zvwh7r.java\t2023-03-24 12:39:06.823334926 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_ending_ parentId;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "max_ending_here = x + max_ALWAYS;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:08.499329276 +0100\n+++ /tmp/tmptnfgc_tn.java\t2023-03-24 12:39:08.499329276 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_ALWAYS;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "max_ending_here = max_FALSE + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:10.295323218 +0100\n+++ /tmp/tmp8fz69x07.java\t2023-03-24 12:39:10.295323218 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_FALSE + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "max_ending_here = max_BufLast - x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:11.983317524 +0100\n+++ /tmp/tmpa1hgjl70.java\t2023-03-24 12:39:11.983317524 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_BufLast - x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "max_ending_here = max_ending_here * x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:13.727311641 +0100\n+++ /tmp/tmprq3pzz62.java\t2023-03-24 12:39:13.727311641 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ending_here * x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "max_ending_here = max_FORMAT + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:17.575298649 +0100\n+++ /tmp/tmpke56txhq.java\t2023-03-24 12:39:17.575298649 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_FORMAT + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "max_ending_here = max_right + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:19.335292701 +0100\n+++ /tmp/tmppk9e62b9.java\t2023-03-24 12:39:19.335292701 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_right + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "max_ending_here = max_ Symbol + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:21.175286486 +0100\n+++ /tmp/tmprwcy6vaf.java\t2023-03-24 12:39:21.175286486 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ Symbol + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "max_ending_here = max_ Terminal + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:22.847280830 +0100\n+++ /tmp/tmpexv9984c.java\t2023-03-24 12:39:22.847280830 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ Terminal + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "max_ending_here = x + max_ending_.1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:24.515275192 +0100\n+++ /tmp/tmpb7mc_q2k.java\t2023-03-24 12:39:24.515275192 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_ending_.1;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "max_ending_here = max_tag + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:26.115269776 +0100\n+++ /tmp/tmpqri9406z.java\t2023-03-24 12:39:26.115269776 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_tag + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "max_ending_here = x + max_Tail;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:27.935263620 +0100\n+++ /tmp/tmpe7vm7tff.java\t2023-03-24 12:39:27.935263620 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_Tail;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "max_ending_here = x + max_ending_Header;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:29.659257782 +0100\n+++ /tmp/tmpff6afsqf.java\t2023-03-24 12:39:29.659257782 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_ending_Header;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "max_ending_here = max_Max + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:31.391251917 +0100\n+++ /tmp/tmpfrkehwg7.java\t2023-03-24 12:39:31.395251901 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_Max + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "max_ending_here = x + max_ending_DISTANCE;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:33.139245995 +0100\n+++ /tmp/tmpp3leucdh.java\t2023-03-24 12:39:33.139245995 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_ending_DISTANCE;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "max_ending_here = max_start(1) + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:34.955239841 +0100\n+++ /tmp/tmppmvmbq8l.java\t2023-03-24 12:39:34.955239841 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_start(1) + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "max_ending_here = max_distance + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:36.739233793 +0100\n+++ /tmp/tmpqge10i93.java\t2023-03-24 12:39:36.739233793 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_distance + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "max_ending_here = max_download + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:38.515227770 +0100\n+++ /tmp/tmpxtqzd8gh.java\t2023-03-24 12:39:38.515227770 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_download + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "max_ending_here = x + max_ending_ variable;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:40.307221688 +0100\n+++ /tmp/tmp9toyi33g.java\t2023-03-24 12:39:40.307221688 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_ending_ variable;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "max_ending_here = max_ errorPrefix + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:42.003215934 +0100\n+++ /tmp/tmp_yu6d3d1.java\t2023-03-24 12:39:42.003215934 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ errorPrefix + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "max_ending_here = max_QUERY + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:43.695210191 +0100\n+++ /tmp/tmp0y8fef4i.java\t2023-03-24 12:39:43.699210177 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_QUERY + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "max_ending_here = x + max_ending_ changed;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:45.455204213 +0100\n+++ /tmp/tmpf9un3kmy.java\t2023-03-24 12:39:45.455204213 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_ending_ changed;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "max_ending_here = max_unit + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:47.147198463 +0100\n+++ /tmp/tmpjmtu5ijj.java\t2023-03-24 12:39:47.147198463 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_unit + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "max_ending_here = x + max_ending_ DOUBLE;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:49.083191883 +0100\n+++ /tmp/tmpt2fkpipj.java\t2023-03-24 12:39:49.087191873 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_ending_ DOUBLE;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "max_ending_here = x + max_ending_Piece;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:50.715186337 +0100\n+++ /tmp/tmpuo_aesdm.java\t2023-03-24 12:39:50.715186337 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_ending_Piece;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "max_ending_here = x + max_ending_ga;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:52.495180284 +0100\n+++ /tmp/tmpaml1lypg.java\t2023-03-24 12:39:52.495180284 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = x + max_ending_ga;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "max_ending_here = max_identifier + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:54.251174309 +0100\n+++ /tmp/tmporrmqata.java\t2023-03-24 12:39:54.251174309 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_identifier + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "max_ending_here = max_UTF_8 + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:55.951168527 +0100\n+++ /tmp/tmpkbl03cjb.java\t2023-03-24 12:39:55.951168527 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_UTF_8 + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "max_ending_here = max_ending_STRING_far;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:57.643162766 +0100\n+++ /tmp/tmp35r1z7h2.java\t2023-03-24 12:39:57.643162766 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ending_STRING_far;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "max_ending_here = max_ getParameter + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:39:59.343156975 +0100\n+++ /tmp/tmpls1wxh7h.java\t2023-03-24 12:39:59.343156975 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ getParameter + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "max_ending_here = max_cpCount + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:40:01.055151146 +0100\n+++ /tmp/tmpw_hxtg4d.java\t2023-03-24 12:40:01.055151146 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_cpCount + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "max_ending_here = max_ired + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:40:02.847145040 +0100\n+++ /tmp/tmp3y83k4va.java\t2023-03-24 12:40:02.851145026 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_ired + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "max_ending_here = max_SPAN + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:40:04.659138861 +0100\n+++ /tmp/tmp9l_9fbe5.java\t2023-03-24 12:40:04.659138861 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_SPAN + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "max_ending_here = max_TEXT + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:40:06.411132890 +0100\n+++ /tmp/tmpzl34sm68.java\t2023-03-24 12:40:06.415132876 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_TEXT + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "max_ending_here = max_line + x;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/max_sublist_sum/java_programs/MAX_SUBLIST_SUM.java\t2023-03-24 12:40:08.139126997 +0100\n+++ /tmp/tmpdk2_p179.java\t2023-03-24 12:40:08.139126997 +0100\n@@ -14,11 +14,11 @@\n     public static int max_sublist_sum(int[] arr) {\n         int max_ending_here = 0;\n         int max_so_far = 0;\n \n         for (int x : arr) {\n-            max_ending_here = max_ending_here + x;\n+max_ending_here = max_line + x;\n             max_so_far = Math.max(max_so_far, max_ending_here);\n         }\n \n         return max_so_far;\n     }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "max_ending_here = Math.max(0,max_ending_here + x);"
    },
    "bitcount": {
        "patches": [
            {
                "k": 1,
                "tentative_fix": "n = (n ^(n - 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:40:11.875114248 +0100\n+++ /tmp/tmpt7mg4u6l.java\t2023-03-24 12:40:11.927114070 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 2,
                "tentative_fix": "n -= (n ^(n - 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:40:42.831008281 +0100\n+++ /tmp/tmp8hi2ngsl.java\t2023-03-24 12:40:42.831008281 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n -= (n ^(n - 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 3,
                "tentative_fix": "n = (n ^(n - 1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:41:13.090904148 +0100\n+++ /tmp/tmp85n70i7a.java\t2023-03-24 12:41:13.090904148 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1)) {\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 4,
                "tentative_fix": "n = (n ^(n - 1];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:41:14.426899540 +0100\n+++ /tmp/tmpohv39uoa.java\t2023-03-24 12:41:14.426899540 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1];\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 5,
                "tentative_fix": "n = (n ^(n - 1K",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:41:15.750894970 +0100\n+++ /tmp/tmpch7yey85.java\t2023-03-24 12:41:15.750894970 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1K\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 6,
                "tentative_fix": "n = (n ^(length - 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:41:17.094890332 +0100\n+++ /tmp/tmpoyeoupmn.java\t2023-03-24 12:41:17.094890332 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(length - 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 7,
                "tentative_fix": "n = (n ^(n - 1 });",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:41:18.494885498 +0100\n+++ /tmp/tmpxq4ublyg.java\t2023-03-24 12:41:18.494885498 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1 });\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 8,
                "tentative_fix": "n = (n ^(n - 1){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:41:19.838880856 +0100\n+++ /tmp/tmpxuuddvk7.java\t2023-03-24 12:41:19.838880856 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1){\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 9,
                "tentative_fix": "n = (n ^(n - 1)];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:41:24.810863678 +0100\n+++ /tmp/tmpzdxv4jbl.java\t2023-03-24 12:41:24.810863678 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1)];\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 10,
                "tentative_fix": "n = (n ^(count - 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:41:33.518833560 +0100\n+++ /tmp/tmp6l4wn0fk.java\t2023-03-24 12:41:33.518833560 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(count - 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 11,
                "tentative_fix": "n = (n ^(n / 1000;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:42:21.978665233 +0100\n+++ /tmp/tmpu2euyg45.java\t2023-03-24 12:42:21.978665233 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n / 1000;\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 12,
                "tentative_fix": "n = (n ^(n - 1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:42:28.938640961 +0100\n+++ /tmp/tmpuhake62p.java\t2023-03-24 12:42:28.938640961 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1);\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 13,
                "tentative_fix": "n = (n ^(n - 1)){",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:42:36.642614067 +0100\n+++ /tmp/tmphefvhz5x.java\t2023-03-24 12:42:36.642614067 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1)){\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 14,
                "tentative_fix": "n = (n ^(n - 1});",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:42:43.902588697 +0100\n+++ /tmp/tmpaqedmg3a.java\t2023-03-24 12:42:43.902588697 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1});\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 15,
                "tentative_fix": "n = (n ^(n / 1000));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:42:51.662561551 +0100\n+++ /tmp/tmpzhw3b0ju.java\t2023-03-24 12:42:51.678561495 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n / 1000));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 16,
                "tentative_fix": "n = (n ^(size - 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:43:35.762406780 +0100\n+++ /tmp/tmpncka8fdw.java\t2023-03-24 12:43:35.762406780 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(size - 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 17,
                "tentative_fix": "n = (n ^(n - 1BYTES;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:43:41.574386319 +0100\n+++ /tmp/tmp30jtnjjo.java\t2023-03-24 12:43:41.574386319 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1BYTES;\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 18,
                "tentative_fix": "n = (n ^(n - 1[0];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:43:47.070366958 +0100\n+++ /tmp/tmpfhl1y837.java\t2023-03-24 12:43:47.070366958 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1[0];\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 19,
                "tentative_fix": "n = (n ^(length - 1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:43:52.506347797 +0100\n+++ /tmp/tmpfpnwx9i1.java\t2023-03-24 12:43:52.506347797 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(length - 1)) {\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 20,
                "tentative_fix": "n = (n ^(n * 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:43:57.714329427 +0100\n+++ /tmp/tmpfpsced_g.java\t2023-03-24 12:43:57.714329427 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n * 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 21,
                "tentative_fix": "n = (n ^(n - 1};",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:44:11.158281958 +0100\n+++ /tmp/tmpqydf3g5t.java\t2023-03-24 12:44:11.166281930 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1};\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 22,
                "tentative_fix": "n = (n ^(n - 1 quoted;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:44:16.186264187 +0100\n+++ /tmp/tmpkpd0f0z7.java\t2023-03-24 12:44:16.186264187 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1 quoted;\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 23,
                "tentative_fix": "n = (nUtil(n - 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:44:21.330245995 +0100\n+++ /tmp/tmppubfohti.java\t2023-03-24 12:44:21.330245995 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (nUtil(n - 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 24,
                "tentative_fix": "n = (n ^(n - 1][",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:44:26.582227411 +0100\n+++ /tmp/tmpy4_ucj4m.java\t2023-03-24 12:44:26.582227411 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1][\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 25,
                "tentative_fix": "n = (n ^(n - 1[0],",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:44:31.746209128 +0100\n+++ /tmp/tmp0335i_6k.java\t2023-03-24 12:44:31.746209128 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1[0],\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 26,
                "tentative_fix": "n -= (n ^(n - 1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:44:36.742191429 +0100\n+++ /tmp/tmps1d4d8o4.java\t2023-03-24 12:44:36.742191429 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n -= (n ^(n - 1)) {\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 27,
                "tentative_fix": "n = (n ^(n - 14) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:44:41.682173921 +0100\n+++ /tmp/tmp_32cg_l6.java\t2023-03-24 12:44:41.686173907 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 14) {\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 28,
                "tentative_fix": "n = (n ^(n - 1\":",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:44:45.142161652 +0100\n+++ /tmp/tmpfv3miaw8.java\t2023-03-24 12:44:45.142161652 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1\":\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 29,
                "tentative_fix": "n = (n ^(n - 175",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:44:48.418150032 +0100\n+++ /tmp/tmpdkc4fni7.java\t2023-03-24 12:44:48.418150032 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 175\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 30,
                "tentative_fix": "n = (n ^ (n - 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:44:51.378139529 +0100\n+++ /tmp/tmpglg61vpx.java\t2023-03-24 12:44:51.382139515 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^ (n - 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 31,
                "tentative_fix": "n = (n ^(n - 110;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:45:25.662017656 +0100\n+++ /tmp/tmp8kim1x7u.java\t2023-03-24 12:45:25.662017656 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 110;\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 32,
                "tentative_fix": "n -= (n ^(n - 1];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:45:28.058009123 +0100\n+++ /tmp/tmpch10roox.java\t2023-03-24 12:45:28.058009123 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n -= (n ^(n - 1];\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 33,
                "tentative_fix": "n = (n ^(n - 1000);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:45:30.402000773 +0100\n+++ /tmp/tmpr_vnty41.java\t2023-03-24 12:45:30.406000759 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1000);\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 34,
                "tentative_fix": "n = (n ^(rows - 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:45:32.649992765 +0100\n+++ /tmp/tmpdw91k1ii.java\t2023-03-24 12:45:32.649992765 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(rows - 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 35,
                "tentative_fix": "n = (n ^(n - 1Bit",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:45:34.953984554 +0100\n+++ /tmp/tmpfrnst1hd.java\t2023-03-24 12:45:34.953984554 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1Bit\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 36,
                "tentative_fix": "n = (n ^(n - 1)) / 2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:45:37.081976970 +0100\n+++ /tmp/tmp57hkagwp.java\t2023-03-24 12:45:37.085976956 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1)) / 2;\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 37,
                "tentative_fix": "n = (n ^(n / frameSize;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:45:41.849959970 +0100\n+++ /tmp/tmp4t1fcdi_.java\t2023-03-24 12:45:41.849959970 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n / frameSize;\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 38,
                "tentative_fix": "n = (n ^(n - 1ase",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:45:43.429954335 +0100\n+++ /tmp/tmp2v7sic2f.java\t2023-03-24 12:45:43.429954335 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1ase\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 39,
                "tentative_fix": "n = (n ^(n / frameSize);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:45:45.033948615 +0100\n+++ /tmp/tmpgdpydqm3.java\t2023-03-24 12:45:45.033948615 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n / frameSize);\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 40,
                "tentative_fix": "n = (n ^(n - 1val",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:45:46.653942834 +0100\n+++ /tmp/tmpwfnkqczo.java\t2023-03-24 12:45:46.653942834 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1val\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 41,
                "tentative_fix": "n = (n ^(n - 1r;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:45:48.265937084 +0100\n+++ /tmp/tmp8n2kglvs.java\t2023-03-24 12:45:48.269937068 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1r;\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 42,
                "tentative_fix": "n = (n ^(n - 1Generator",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:45:49.861931387 +0100\n+++ /tmp/tmpxrsvkxo0.java\t2023-03-24 12:45:49.861931387 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1Generator\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 43,
                "tentative_fix": "n = (n ^(n - 1 }",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:45:51.437925763 +0100\n+++ /tmp/tmpvjrt259s.java\t2023-03-24 12:45:51.437925763 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1 }\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 44,
                "tentative_fix": "n = (n ^(n - 1Headers;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:45:52.977920266 +0100\n+++ /tmp/tmpyhhf0ll4.java\t2023-03-24 12:45:52.981920252 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1Headers;\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 45,
                "tentative_fix": "n = (n ^(n - 1EDITOR",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:45:54.505914811 +0100\n+++ /tmp/tmpux9p2pcj.java\t2023-03-24 12:45:54.505914811 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1EDITOR\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 46,
                "tentative_fix": "n = (n ^(nn - 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:45:56.117909055 +0100\n+++ /tmp/tmp08swl2vy.java\t2023-03-24 12:45:56.117909055 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(nn - 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 47,
                "tentative_fix": "n = (n ^(n - 1--",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:45:57.821902971 +0100\n+++ /tmp/tmpumb4vou3.java\t2023-03-24 12:45:57.821902971 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1--\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 48,
                "tentative_fix": "n = (n ^(n - 1This",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:45:59.353897498 +0100\n+++ /tmp/tmp9rgirtwt.java\t2023-03-24 12:45:59.353897498 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1This\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 49,
                "tentative_fix": "n = (n ^(n-1 - 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:46:00.985891668 +0100\n+++ /tmp/tmpu95rbqkq.java\t2023-03-24 12:46:00.985891668 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n-1 - 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 50,
                "tentative_fix": "n = (n ^(n - 1) / 2;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:46:31.661781935 +0100\n+++ /tmp/tmplo_zi1ut.java\t2023-03-24 12:46:31.661781935 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1) / 2;\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 51,
                "tentative_fix": "n = (n ^(n - 1 ');",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:46:33.049776963 +0100\n+++ /tmp/tmptb9b7byd.java\t2023-03-24 12:46:33.053776949 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1 ');\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 52,
                "tentative_fix": "n = (n ^(n - 1)",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:46:34.485771819 +0100\n+++ /tmp/tmpoydnawjj.java\t2023-03-24 12:46:34.485771819 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1)\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 53,
                "tentative_fix": "n = (n[0].(n - 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:46:35.921766674 +0100\n+++ /tmp/tmpa9n55700.java\t2023-03-24 12:46:35.945766588 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n[0].(n - 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 54,
                "tentative_fix": "n = (n ^(n - 1(4);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:46:37.357761529 +0100\n+++ /tmp/tmppic961z1.java\t2023-03-24 12:46:37.357761529 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1(4);\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 55,
                "tentative_fix": "n = (hash ^(n - 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:46:38.757756512 +0100\n+++ /tmp/tmpsmvjb0t1.java\t2023-03-24 12:46:38.761756498 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (hash ^(n - 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 56,
                "tentative_fix": "n = (n ^(n - 1ca",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:46:40.137751566 +0100\n+++ /tmp/tmp5kzrgxpk.java\t2023-03-24 12:46:40.141751550 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1ca\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 57,
                "tentative_fix": "n = (nUtil(n - 1)) {",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:46:41.553746489 +0100\n+++ /tmp/tmpvxekaz1v.java\t2023-03-24 12:46:41.553746489 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (nUtil(n - 1)) {\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 58,
                "tentative_fix": "n = (n ^(id - 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:46:42.929741557 +0100\n+++ /tmp/tmpkn_6gh5q.java\t2023-03-24 12:46:42.929741557 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(id - 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 59,
                "tentative_fix": "n = (n >>> (n - 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:46:44.417736221 +0100\n+++ /tmp/tmp68rb9rbt.java\t2023-03-24 12:46:44.421736207 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n >>> (n - 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 60,
                "tentative_fix": "n = (n ^(n - 1Uris;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:46:50.853713139 +0100\n+++ /tmp/tmphp3iqv5x.java\t2023-03-24 12:46:50.857713126 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1Uris;\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 61,
                "tentative_fix": "n = (n ^(n - 1,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:46:52.309707915 +0100\n+++ /tmp/tmpvoymfdf3.java\t2023-03-24 12:46:52.309707915 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1,\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 62,
                "tentative_fix": "n -= (n ^(length - 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:46:53.741702777 +0100\n+++ /tmp/tmp068asqza.java\t2023-03-24 12:46:53.741702777 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n -= (n ^(length - 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 63,
                "tentative_fix": "n = (n ^(n - 1>>",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:46:55.209697509 +0100\n+++ /tmp/tmpxo98rpr4.java\t2023-03-24 12:46:55.209697509 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1>>\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 64,
                "tentative_fix": "n = (n ^(n - 1 during",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:46:56.545692714 +0100\n+++ /tmp/tmp29h4xrxr.java\t2023-03-24 12:46:56.545692714 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1 during\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 65,
                "tentative_fix": "n = (n ^(n - 1>\"",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:46:57.957687646 +0100\n+++ /tmp/tmp1t44vzj5.java\t2023-03-24 12:46:57.957687646 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1>\"\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 66,
                "tentative_fix": "n = (n ^(n - 1ARGS",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:46:59.381682536 +0100\n+++ /tmp/tmpfvd_3sye.java\t2023-03-24 12:46:59.381682536 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1ARGS\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 67,
                "tentative_fix": "n = (n ^(n - 1category",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:47:00.769677551 +0100\n+++ /tmp/tmprdx54u95.java\t2023-03-24 12:47:00.769677551 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1category\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 68,
                "tentative_fix": "n = (n ^(n - 1(4));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:47:02.161672555 +0100\n+++ /tmp/tmpcnwoqdgn.java\t2023-03-24 12:47:02.161672555 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1(4));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 69,
                "tentative_fix": "n = (n ^(n - 1 \"\");",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:47:03.625667298 +0100\n+++ /tmp/tmpr7o06xjv.java\t2023-03-24 12:47:03.625667298 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1 \"\");\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 70,
                "tentative_fix": "n = (n ^(n - 12()",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:47:05.037662225 +0100\n+++ /tmp/tmpj3655vvy.java\t2023-03-24 12:47:05.037662225 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 12()\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 71,
                "tentative_fix": "n = (n ^(n - 1Cursor",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:47:06.469657082 +0100\n+++ /tmp/tmpfikvwdbp.java\t2023-03-24 12:47:06.469657082 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1Cursor\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 72,
                "tentative_fix": "n = (n readFrom(n - 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:47:07.825652211 +0100\n+++ /tmp/tmpmejifu_6.java\t2023-03-24 12:47:07.825652211 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n readFrom(n - 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 73,
                "tentative_fix": "n = (n ^(n - 1)[0];",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:47:09.213647225 +0100\n+++ /tmp/tmpoz7e3f5x.java\t2023-03-24 12:47:09.217647211 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1)[0];\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 74,
                "tentative_fix": "n = (n ^(n - 1ts",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:47:10.637642110 +0100\n+++ /tmp/tmp_c8_wni2.java\t2023-03-24 12:47:10.637642110 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1ts\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 75,
                "tentative_fix": "n = (n ^(n - 1), 1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:47:12.037637078 +0100\n+++ /tmp/tmps0qzkvr0.java\t2023-03-24 12:47:12.041637064 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1), 1);\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 76,
                "tentative_fix": "n = (n ^(n - 1Dist",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:47:13.453631991 +0100\n+++ /tmp/tmpp1lgcp8t.java\t2023-03-24 12:47:13.453631991 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1Dist\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 77,
                "tentative_fix": "n = (n ^(n - 1-1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:47:14.877626872 +0100\n+++ /tmp/tmpg_lbha80.java\t2023-03-24 12:47:14.877626872 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1-1);\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 78,
                "tentative_fix": "n = (n ^(n + 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:47:16.305621741 +0100\n+++ /tmp/tmptsb8v_4q.java\t2023-03-24 12:47:16.309621724 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n + 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 79,
                "tentative_fix": "n -= (n ^(n - 1K",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:47:46.697512370 +0100\n+++ /tmp/tmpw3f8kgzs.java\t2023-03-24 12:47:46.697512370 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n -= (n ^(n - 1K\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 80,
                "tentative_fix": "n = (n ^(n - 1X",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:47:48.125507224 +0100\n+++ /tmp/tmp6kjf510d.java\t2023-03-24 12:47:48.125507224 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1X\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 81,
                "tentative_fix": "n = (n ^(n - 1category;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:47:49.481502338 +0100\n+++ /tmp/tmpqeg2ifiu.java\t2023-03-24 12:47:49.481502338 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1category;\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 82,
                "tentative_fix": "n = (n ^(n - 1JSONArray",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:47:50.857497380 +0100\n+++ /tmp/tmpcjleo9ni.java\t2023-03-24 12:47:50.861497366 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1JSONArray\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 83,
                "tentative_fix": "n = (n >>>(n - 1));",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:47:52.261492320 +0100\n+++ /tmp/tmp_cjt90y6.java\t2023-03-24 12:47:52.261492320 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n >>>(n - 1));\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": true,
                "test_exec": true,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 84,
                "tentative_fix": "n = (n ^(n - 1000",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:47:58.613469421 +0100\n+++ /tmp/tmp35_7b82h.java\t2023-03-24 12:47:58.613469421 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1000\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 85,
                "tentative_fix": "n = (n ^(n - 1iate",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:48:00.033464302 +0100\n+++ /tmp/tmp7h9dqa7y.java\t2023-03-24 12:48:00.037464288 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1iate\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 86,
                "tentative_fix": "n = (n ^(n - 12.0",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:48:01.449459195 +0100\n+++ /tmp/tmp3ti2fsia.java\t2023-03-24 12:48:01.449459195 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 12.0\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 87,
                "tentative_fix": "n = (n ^(n - 1 su",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:48:02.881454030 +0100\n+++ /tmp/tmpao3y_8b_.java\t2023-03-24 12:48:02.881454030 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1 su\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 88,
                "tentative_fix": "n = (n ^(n - 1).",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:48:04.257449067 +0100\n+++ /tmp/tmpoepvuut3.java\t2023-03-24 12:48:04.257449067 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1).\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 89,
                "tentative_fix": "n = (n ^(n - 1 << 1;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:48:05.669443974 +0100\n+++ /tmp/tmpvv9hisp_.java\t2023-03-24 12:48:05.673443960 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1 << 1;\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 90,
                "tentative_fix": "n = (n ^(n - 1 {1",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:48:07.125438722 +0100\n+++ /tmp/tmp4a5dmmzw.java\t2023-03-24 12:48:07.125438722 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1 {1\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 91,
                "tentative_fix": "n = (n ^(count - 1);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:48:08.525433671 +0100\n+++ /tmp/tmpdop1e5on.java\t2023-03-24 12:48:08.529433655 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(count - 1);\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 92,
                "tentative_fix": "n = (n ^(n - 1 occurs;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:48:09.873428805 +0100\n+++ /tmp/tmp9hxcuug9.java\t2023-03-24 12:48:09.873428805 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1 occurs;\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 93,
                "tentative_fix": "n = (n ^(n - 1 an",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:48:11.281423725 +0100\n+++ /tmp/tmpnl7zq0zc.java\t2023-03-24 12:48:11.281423725 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1 an\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 94,
                "tentative_fix": "n = (n ^(n - 1r",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:48:12.737418471 +0100\n+++ /tmp/tmpofvkhpq6.java\t2023-03-24 12:48:12.741418455 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1r\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 95,
                "tentative_fix": "n = (n ^(n - 1ByName;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:48:14.173413287 +0100\n+++ /tmp/tmp_lz_1io8.java\t2023-03-24 12:48:14.173413287 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1ByName;\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 96,
                "tentative_fix": "n = (n ^(n - 1,",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:48:15.613408089 +0100\n+++ /tmp/tmpn7ezon2k.java\t2023-03-24 12:48:15.613408089 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1,\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 97,
                "tentative_fix": "n = (n ^(n - 1(4;",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:48:17.061402861 +0100\n+++ /tmp/tmpzl5mg08l.java\t2023-03-24 12:48:17.061402861 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1(4;\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 98,
                "tentative_fix": "n = (n ^(n - 1[]{",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:48:18.421397952 +0100\n+++ /tmp/tmplsu76o64.java\t2023-03-24 12:48:18.421397952 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1[]{\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 99,
                "tentative_fix": "n = (n ^(n - 1ByName",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:48:19.861392752 +0100\n+++ /tmp/tmpyjb3sbeg.java\t2023-03-24 12:48:19.861392752 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1ByName\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            },
            {
                "k": 100,
                "tentative_fix": "n = (n ^(n - 1ByName);",
                "patch": "--- /mnt/data/andre/mscthesis/storage_for_eval/quixbugs/bitcount/java_programs/BITCOUNT.java\t2023-03-24 12:48:21.265387682 +0100\n+++ /tmp/tmp2zoyvwej.java\t2023-03-24 12:48:21.269387668 +0100\n@@ -10,11 +10,11 @@\n  */\n public class BITCOUNT {\n     public static int bitcount(int n) {\n     int count = 0;\n     while (n != 0) {\n-        n = (n ^ (n - 1));\n+n = (n ^(n - 1ByName);\n         count++;\n     }\n     return count;\n     }\n }\n",
                "compile_exec": true,
                "compile_pass": false,
                "test_exec": false,
                "test_pass": false,
                "identical": false
            }
        ],
        "ground_truth": "n = (n & (n - 1));"
    }
}