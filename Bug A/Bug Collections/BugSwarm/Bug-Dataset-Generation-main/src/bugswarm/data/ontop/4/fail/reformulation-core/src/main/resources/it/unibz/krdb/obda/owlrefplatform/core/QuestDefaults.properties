
##########################################
# GENERAL OPTIONS
##########################################

# Indicates if we should rewrite w.r.t. to the TBox during query answering. This is only necessary
# to deal with inferences of the form A subClassOf R some A (existential reasoning). For ground
# queries (i.e. the default SPARQL semantics) this is not necessary.
rewrite=false

# Indicates which rewriting techniques should be used. Either 'PerfectRef' which
# is a direct implementation of the PerfectRef algorithm, or 'UCQ-based' which
# is a rewriting technique, based on PerfectRef, but improved in many ways to 
# avoid the generation of redundant queries. We now have a new technique called 
# TreeWitnes written by R. Kontchakov, should be must faster than any other.
# RECOMMENDED: TreeWitness
# OPT:{PerfectRef, UCQ-based, TreeWitness}
org.obda.owlreformulationplatform.reformulationTechnique=TreeWitness

# Indicates if the system should work in 'VIRTUAL' mode (the system should read
# the user defined mappings of the OBDA model) or 'CLASSIC' mode, (the system
# reads an ABox)  
#OPT:{classic, virtual}
org.obda.owlreformulationplatform.aboxmode=virtual

# EXPERIMENTAL
# Optimize the TBox w.r.t. to the dependencies found or generated.
# Recommended: TRUE
# OPT: {true, false}
org.obda.owlreformulationplatform.optimizeTboxSigma=true

# EXPERIMENTAL
# Optimize the TBox by removing equivalences. Recommended: TRUE 
# OPT: {true, false}
org.obda.owlreformulationplatform.optimizeEquivalences=true

# Indicates if the system will generate the long nested REPLACE expressions
# OPT: {true, false}
org.obda.owlreformulationplatform.sqlGenerateReplace=true

# Indicates whether to enable (true) or disable (false) t-mappings (i.e., reasoning in rdf)
t_mappings=true

##########################################
# CLASSIC-MODE-ONLY OPTIONS
##########################################

# Indicates how to construct the database repository to store the ABox/data of
# the system.
# DIRECT: one table per class/property, no special processing
# SEMANTIC (recommended): one table for all classes, one for all properties using "Semantic Indexes"
#           to identify each class/property. Indexes and Mappings for the system are computed
#           using the semantics of the ontology to "complete the repository virtualy"
# OPT:{direct, semantic}
org.obda.owlreformulationplatform.dbtype=semantic

# Indicates that the ABox data should be read from the loaded ontology
#
# OPT: {true,false}
org.obda.owlreformulationplatform.obtainFromOntology=true

# Indicates that the ABox data should be read from the OBDA model
#
# OPT: {true,false}
org.obda.owlreformulationplatform.obtainFromMappings=false

# Tells Quest the location of the database that will serve as ABox repository
# in classic mode. Options are: 
#  - h2-inmemory: Quest will create an H2 inmemory database to hold the data, note
#                 all data is lost when the instance stops running
#  - h2-persistent: Quest will create a persitent H2 database. If this options
#                   is enabled you must indicate the folder where the db should be 
#                   stored. (see more options bellow)
#  - jdbc: Quest will connect to an externally manged JDBC database and create all 
#          necessary schemas and tables. It is necessary to have read-write permissions
#          on the jdbc account. You must define the JDBC connection parameters.          
# OPT: {h2-inmemory,jdbc}
STORAGE_LOCATION=h2-inmemory

##########################################
# JDBC options
##########################################
JDBC_URL=

DBUSER=

DBPASSWORD=

JDBC_DRIVER=

##########################################
# Connection pool options
##########################################

# Set initial and max pool size according to servers resources
# Set remove abandoned to true to put abandoned(not properly closed connections) back to pool after timeout (in seconds)
# Keep alive setting will use SELECT 1 test query to make sure connection is alive before passing it

max_pool_size=20
initial_pool_size=2
remove_abandoned=false
abandoned_timeout=60
keep_alive=true

##########################################
# h2-inmemory options
##########################################

H2LOCATION=h2folder/


##########################################
# print keys option
##########################################

# Sets whether to print all primary and foreign keys registered with ontop
# to standard output
# Useful for debugging problems with self-joins 

PRINT_KEYS=false
VIEW_KEY_FILE=view_keys.lst
